import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.uml2.uml.Package
import org.eclipse.uml2.uml.resource.UMLResource
import org.palladiosimulator.pcm.repository.CollectionDataType
import org.palladiosimulator.pcm.repository.InnerDeclaration
import org.palladiosimulator.pcm.repository.OperationSignature
import org.palladiosimulator.pcm.repository.Parameter
import tools.vitruv.applications.pcmumlcomponents.pcm2uml.PcmToUmlUtil
import org.eclipse.uml2.uml.DataType
import org.eclipse.uml2.uml.UMLPackage
import tools.vitruv.framework.userinteraction.UserInteractionOptions.WindowModality

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: pcmToUml
in reaction to changes in PCM
execute actions in UML


// ###################################################
// ############### UNIVERSAL REACTIONS ###############

reaction RenamedElement {
	after attribute replaced at pcm::NamedElement[entityName]
	call renameUmlElement(affectedEObject)
}

routine renameUmlElement(pcm::NamedElement pcmElement) {
	match {
		val umlElement = retrieve uml::NamedElement corresponding to pcmElement 
	}
	action {
		update umlElement {
			umlElement.name = pcmElement.entityName
		}
	}
}

// most elements should be named. others might get special treatment
routine deleteElement(pcm::NamedElement pcmElement) {
	match {
		val umlElement = retrieve asserted uml::NamedElement corresponding to pcmElement
	}
	action {
		delete umlElement
	}
}

// ###################################################
// ############### CONTAINER REACTIONS ###############

reaction CreatedPcmRepository {
	after element pcm::Repository created and inserted as root
	call createUmlModel(newValue)
}

routine createUmlModel(pcm::Repository pcmRepository) {
	action {
		val packageImport = create uml::PackageImport and initialize {
			val resourceSet = new ResourceSetImpl()
			val primitiveTypesUri = URI.createURI(UMLResource.UML_PRIMITIVE_TYPES_LIBRARY_URI).appendFragment("_0")
			val primitiveTypes = resourceSet.getEObject(primitiveTypesUri, true)
			packageImport.importedPackage = primitiveTypes as Package
		}
		val umlModel = create uml::Model and initialize {
			umlModel.name = pcmRepository.entityName
			umlModel.packageImports += packageImport
			persistProjectRelative(pcmRepository, umlModel, "model/" + pcmRepository.entityName + ".uml")	
		}
		add correspondence between pcmRepository and umlModel
		add correspondence between UMLPackage.Literals.MODEL and umlModel
	}
}


// ###################################################
// ############## DATA TYPES REACTIONS ###############

reaction CreatedPrimitiveDataType {
	after element pcm::PrimitiveDataType created and inserted in pcm::Repository[dataTypes__Repository]
	call createPrimitiveDataType(newValue)
}

routine createPrimitiveDataType(pcm::PrimitiveDataType dataType) {
	match {
		val umlModel = retrieve uml::Model corresponding to dataType.repository__DataType
	}
	action {
		val umlType = create uml::PrimitiveType and initialize {
			umlType.name = PcmToUmlUtil.getUmlPrimitiveTypeName(dataType.type)
		}
		update umlModel {
			umlModel.ownedTypes += umlType
		}
		add correspondence between dataType and umlType
	}
}

reaction DeletedDataType {
	after element pcm::DataType deleted and removed from pcm::Repository[dataTypes__Repository]
	call deleteDataType(oldValue)
}

routine deleteDataType(pcm::DataType dataType) {
	match {
		val umlType = retrieve asserted uml::Type corresponding to dataType
	}
	action {
		delete umlType
	}
}

reaction CreatedCompositeDataType {
	after element pcm::CompositeDataType created and inserted in pcm::Repository[dataTypes__Repository]
	call createCompositeDataType(newValue)
}

routine createCompositeDataType(pcm::CompositeDataType dataType) {
	match {
		val umlModel = retrieve uml::Model corresponding to dataType.repository__DataType
	}
	action {
		val umlType = create uml::DataType and initialize {
			umlType.name = dataType.entityName
		}
		update umlModel {
			umlModel.ownedTypes += umlType
		}
		add correspondence between dataType and umlType
	}
}

reaction CreatedInnerDeclaration {
	after element pcm::InnerDeclaration created and inserted in pcm::CompositeDataType[innerDeclaration_CompositeDataType]
	call createInnerDeclaration(newValue)
}

routine createInnerDeclaration(pcm::InnerDeclaration innerDeclaration) {
	match {
		val compositeType = retrieve uml::DataType corresponding to innerDeclaration.compositeDataType_InnerDeclaration
		val umlType = retrieve optional uml::DataType corresponding to innerDeclaration.datatype_InnerDeclaration
	}
	action {
		call createUmlPropertyForDatatype(if (umlType.present) umlType.get else null, innerDeclaration, compositeType)
	}
}

reaction ChangedInnerDeclarationType {
	after element replaced at pcm::InnerDeclaration[datatype_InnerDeclaration]
	call changeInnerDeclarationType(affectedEObject, newValue)
}

routine changeInnerDeclarationType(pcm::InnerDeclaration innerDeclaration, pcm::DataType pcmDataType) {
	match {
		val umlProperty = retrieve uml::Property corresponding to innerDeclaration
		val umlModel = retrieve uml::Model corresponding to innerDeclaration.compositeDataType_InnerDeclaration.repository__DataType
	}
	action {
		update umlProperty {
			if (pcmDataType === null ||
				(pcmDataType instanceof CollectionDataType && (pcmDataType as CollectionDataType).innerType_CollectionDataType === null)) {
				umlProperty.type = null
			} else {
				umlProperty.type = PcmToUmlUtil.retrieveUmlType(correspondenceModel, pcmDataType, umlModel)
			}
			PcmToUmlUtil.updateMultiplicity(umlProperty, umlProperty.type !== null && pcmDataType instanceof CollectionDataType)
		}
	}
}

reaction DeletedInnerDeclaration {
	after element pcm::InnerDeclaration removed from pcm::CompositeDataType[innerDeclaration_CompositeDataType]
	call deleteInnerDeclaration(affectedEObject, oldValue)
}

routine deleteInnerDeclaration(pcm::CompositeDataType dataType, pcm::InnerDeclaration innerDeclaration) {
	match {
		val compositeType = retrieve asserted uml::DataType corresponding to dataType
		val umlProperty = retrieve asserted uml::Property corresponding to innerDeclaration
	}
	action {
		call compositeType.ownedAttributes -= umlProperty
	}
}

reaction AddedCompositeDataTypeParent {
	after element inserted in pcm::CompositeDataType[parentType_CompositeDataType]
	call addCompositeDataTypeParent(affectedEObject, newValue)
}

routine addCompositeDataTypeParent(pcm::CompositeDataType dataType, pcm::CompositeDataType parent) {
	match {
		val compositeType = retrieve uml::DataType corresponding to dataType
		val parentType = retrieve uml::DataType corresponding to parent
	}
	action {
		val generalization = create uml::Generalization and initialize {
			generalization.general = parentType
			generalization.specific = compositeType
		}
		update compositeType {
			compositeType.generalizations += generalization
		}
	}
}

reaction RemovedCompositeDataTypeParent {
	after element removed from pcm::CompositeDataType[parentType_CompositeDataType]
	call removeCompositeDataTypeParent(affectedEObject, oldValue)
}

routine removeCompositeDataTypeParent(pcm::CompositeDataType dataType, pcm::CompositeDataType parent) {
	match {
		val compositeType = retrieve asserted uml::DataType corresponding to dataType
		val parentType = retrieve asserted uml::DataType corresponding to parent
	}
	action {
		update compositeType {
			compositeType.parents -= parentType
		}
	}
}

reaction ChangedCollectionDataTypeInnerType {
	after element replaced at pcm::CollectionDataType[innerType_CollectionDataType]
	call changeCollectionDataTypeInnerType(affectedEObject, newValue)
}

routine changeCollectionDataTypeInnerType(pcm::CollectionDataType pcmDataType, pcm::DataType pcmInnerType) {
	match {
		val umlInnerType = retrieve optional uml::DataType corresponding to pcmInnerType
		val umlModel = retrieve uml::Model corresponding to pcmDataType.repository__DataType
	}
	action {
		call {
			if (pcmInnerType instanceof CollectionDataType) {
			    userInteractor.notificationDialogBuilder
			        .message("Nested collection types are not transformed to UML. Consider using a composite type.")
			        .windowModality(WindowModality.MODAL).startInteraction()
			}
			var DataType innerType = null
			if (!umlInnerType.present) {
				innerType = PcmToUmlUtil.retrieveUmlType(correspondenceModel, pcmInnerType, umlModel)
			} else {
				innerType = umlInnerType.get
			}
			if (innerType !== null && !(pcmInnerType instanceof CollectionDataType)) {
				logger.info("collection type: " + pcmDataType.entityName)
				logger.info(pcmInnerType)
				logger.info(innerType)
				clearCorrespondenceForCollectionTypes(pcmDataType)
				addCorrespondenceForCollectionTypes(pcmDataType, innerType)
			} else {
				logger.warn("CollectionDataType inner type could not be resolved")
			}
			val references = EcoreUtil.UsageCrossReferencer.find(pcmDataType, pcmDataType.repository__DataType)
			for (reference : references) {
				if (reference.EObject instanceof OperationSignature && reference.EStructuralFeature.name == "returnType__OperationSignature") {
					changeUmlOperationType(reference.EObject as OperationSignature)
				} else if (reference.EObject instanceof InnerDeclaration && reference.EStructuralFeature.name == "datatype_InnerDeclaration") {
					changeInnerDeclarationType(reference.EObject as InnerDeclaration, pcmDataType)
				} else if (reference.EObject instanceof Parameter && reference.EStructuralFeature.name == "dataType__Parameter") {
					changeParameterType(reference.EObject as Parameter, pcmDataType)
				} else {
					logger.warn("Inner collection type changed at unhandled reference for " + reference.EObject.class.name +
						" at " + reference.EStructuralFeature.name)
				}
			}
				
		}
	}
}

routine clearCorrespondenceForCollectionTypes(pcm::CollectionDataType pcmType) {
	match {
		val oldInnerType = retrieve uml::DataType corresponding to pcmType tagged with PcmToUmlUtil.COLLECTION_TYPE_TAG
	}
	action {
		remove correspondence between pcmType and oldInnerType
	}
}
routine addCorrespondenceForCollectionTypes(pcm::CollectionDataType pcmType, uml::DataType innerType) {
	match {
		val oldInnerType = retrieve optional uml::DataType corresponding to pcmType tagged with PcmToUmlUtil.COLLECTION_TYPE_TAG
	}
	action {
		add correspondence between pcmType and innerType tagged with PcmToUmlUtil.COLLECTION_TYPE_TAG
	}
}

routine createUmlPropertyForDatatype(uml::DataType type, pcm::InnerDeclaration counterpart, uml::DataType owner) {
	action {
		val property = create uml::Property and initialize {
			property.name = counterpart.entityName
			property.type = type
		}
		update owner {
			owner.ownedAttributes += property
		}
		add correspondence between counterpart and property
	}
}


// ###################################################
// ############## INTERFACE REACTIONS ################

reaction CreatedPcmInterface {
	after element created and inserted in pcm::Repository[interfaces__Repository]
	call createUmlInterface(newValue)
}

routine createUmlInterface(pcm::Interface pcmInterface) {
	match {
		val umlModel = retrieve uml::Model corresponding to pcmInterface.repository__Interface 
	}
	action { 
		val umlInterface = create uml::Interface and initialize {
			umlInterface.name = pcmInterface.entityName
		}
		update umlModel {
			umlModel.packagedElements += umlInterface
		}
		add correspondence between umlInterface and pcmInterface
	}
}

reaction DeletedPcmInterface {
	after element removed from pcm::Repository[interfaces__Repository]
	call deleteElement(oldValue)
}

reaction CreatedOperationInterfaceSignature {
	after element created and inserted in pcm::OperationInterface[signatures__OperationInterface]
	call createOperationInterfaceSignature(newValue)
}

routine createOperationInterfaceSignature(pcm::OperationSignature pcmSignature) {
	match {
		val umlInterface = retrieve uml::Interface corresponding to pcmSignature.interface__OperationSignature
	}
	action {
		val umlOperation = create uml::Operation and initialize {
			umlOperation.name = pcmSignature.entityName
		}
		update umlInterface {
			umlInterface.ownedOperations += umlOperation
		}
		add correspondence between umlOperation and pcmSignature
	}
}

reaction ChangedOperationSignatureType {
	after element replaced at pcm::OperationSignature[returnType__OperationSignature]
	call {
		if (newValue === null) {
			unsetUmlOperationType(affectedEObject)
		} else {
			changeUmlOperationType(affectedEObject)
		}
	}
}

routine changeUmlOperationType(pcm::OperationSignature pcmSignature) {
	match {
		val umlModel = retrieve uml::Model corresponding to pcmSignature.interface__OperationSignature.repository__Interface
		val umlOperation = retrieve uml::Operation corresponding to pcmSignature
		val umlReturnType = retrieve optional uml::DataType corresponding to pcmSignature.returnType__OperationSignature
	}
	action {
		update umlOperation {
			var DataType returnType = null
			if (!umlReturnType.present) {
				returnType = PcmToUmlUtil.retrieveUmlType(correspondenceModel, pcmSignature.returnType__OperationSignature, umlModel)
			} else {
				returnType = umlReturnType.get
			}
			umlOperation.type = returnType
			PcmToUmlUtil.updateOperationReturnTypeMultiplicity(
				umlOperation,
				pcmSignature.returnType__OperationSignature instanceof CollectionDataType &&
				(pcmSignature.returnType__OperationSignature as CollectionDataType).innerType_CollectionDataType !== null
				)
		}
	}
}

routine unsetUmlOperationType(pcm::OperationSignature pcmSignature) {
	match {
		val umlOperation = retrieve uml::Operation corresponding to pcmSignature
	}
	action {
		update umlOperation {
			umlOperation.type = null
		}
	}
}

reaction DeletedOperationInterfaceSignature {
	after element removed from pcm::OperationInterface[signatures__OperationInterface]
	call deleteElement(oldValue) 
}

reaction CreatedOperationSignatureParameter {
	after element inserted in pcm::OperationSignature[parameters__OperationSignature]
	call createOperationSignatureParameter(affectedEObject, newValue)
}
routine createOperationSignatureParameter(pcm::OperationSignature pcmSignature, pcm::Parameter pcmParameter)
{
	match {
		val umlOperation = retrieve uml::Operation corresponding to pcmSignature
	}
	action {
		val umlParameter = create uml::Parameter and initialize {
			umlParameter.name = pcmParameter.parameterName
		}
		update umlOperation {
			umlOperation.ownedParameters += umlParameter
		}
		add correspondence between umlParameter and pcmParameter
	}
}
reaction RenamedParameter {
	after attribute replaced at pcm::Parameter[parameterName]
	call renameParameter(affectedEObject)
}
routine renameParameter(pcm::Parameter pcmParameter) {
	match {
		val umlParameter = retrieve uml::Parameter corresponding to pcmParameter
	}
	action {
		update umlParameter {
			umlParameter.name = pcmParameter.parameterName
		}
	}
}
reaction ChangedParameterDirection {
	after attribute replaced at pcm::Parameter[modifier__Parameter]
	call changeParameterDirection(affectedEObject)
}
routine changeParameterDirection(pcm::Parameter pcmParameter) {
	match {
		val umlParameter = retrieve uml::Parameter corresponding to pcmParameter
	}
	action {
		update umlParameter {
			umlParameter.direction = PcmToUmlUtil.getUmlParameterDirection(pcmParameter.modifier__Parameter)
		}
	}
}
reaction ChangedParameterType {
	after element pcm::DataType replaced at pcm::Parameter[dataType__Parameter]
	call changeParameterType(affectedEObject, newValue)
}
routine changeParameterType(pcm::Parameter pcmParameter, pcm::DataType pcmDataType) {
	match {
		val umlParameter = retrieve uml::Parameter corresponding to pcmParameter
		val umlModel = retrieve uml::Model corresponding to pcmParameter.operationSignature__Parameter.interface__OperationSignature.repository__Interface
	}
	action {
		update umlParameter {
			if (pcmDataType === null ||
				(pcmDataType instanceof CollectionDataType && (pcmDataType as CollectionDataType).innerType_CollectionDataType === null)) {
				umlParameter.type = null
			} else {
				umlParameter.type = PcmToUmlUtil.retrieveUmlType(correspondenceModel, pcmParameter.dataType__Parameter, umlModel)
			}
			PcmToUmlUtil.updateMultiplicity(umlParameter, umlParameter.type !== null && pcmDataType instanceof CollectionDataType)
		}
	}
}
reaction DeletedOperationSignatureParameter {
	after element pcm::Parameter removed from pcm::OperationSignature[parameters__OperationSignature]
	call removeOperationSignatureParameter(oldValue)
}
routine removeOperationSignatureParameter(pcm::Parameter pcmParameter) {
	match {
		val umlParameter = retrieve asserted uml::Parameter corresponding to pcmParameter
	}
	action {
		delete umlParameter
	}
}

// ###################################################
// ############### COMPONENT REACTIONS ###############

reaction CreatedBasicPcmComponent {
	after element pcm::BasicComponent created and inserted in pcm::Repository[components__Repository]
	call createUmlComponent(newValue, "basic")
}
reaction CreatedCompositePcmComponent {
	after element pcm::CompositeComponent created and inserted in pcm::Repository[components__Repository]
	call createUmlComponent(newValue, "composite")
}
routine createUmlComponent(pcm::RepositoryComponent pcmComponent, String correspondenceTag) {
	match {
		val umlModel = retrieve uml::Model corresponding to pcmComponent.repository__RepositoryComponent 
	}
	action {
		val umlComponent = create uml::Component and initialize {
			umlComponent.name = pcmComponent.entityName;
		}
		update umlModel {
			umlModel.packagedElements += umlComponent;
		}
		add correspondence between pcmComponent and umlComponent tagged with correspondenceTag
	}
}
reaction DeletedComponent {
	after element removed from pcm::Repository[components__Repository]
	call deleteElement(oldValue)
}

reaction CreatedProvidedRole {
	after element created and inserted in pcm::InterfaceProvidingEntity[providedRoles_InterfaceProvidingEntity]
	call createProvidedRole(affectedEObject, newValue)
}
routine createProvidedRole(pcm::InterfaceProvidingEntity pcmComponent, pcm::ProvidedRole pcmProvidedRole) {
	match {
		val umlComponent = retrieve uml::Component corresponding to pcmComponent
	}
	action {
		val interfaceRealization = create uml::InterfaceRealization and initialize {
			interfaceRealization.name = pcmProvidedRole.entityName
			interfaceRealization.clients += umlComponent
		}
		update umlComponent {
			umlComponent.interfaceRealizations += interfaceRealization
		}
		add correspondence between interfaceRealization and pcmProvidedRole
	}
}
reaction DeletedProvidedRole {
	after element removed from pcm::InterfaceProvidingEntity[providedRoles_InterfaceProvidingEntity]
	call deleteProvidedRole(oldValue)
}
routine deleteProvidedRole(pcm::ProvidedRole pcmProvidedRole) {
	match {
		val interfaceRealization = retrieve uml::InterfaceRealization corresponding to pcmProvidedRole
	}
	action {
		delete interfaceRealization
	}
}
reaction AddedOperationProvidedRoleInterface {
	after element replaced at pcm::OperationProvidedRole[providedInterface__OperationProvidedRole]
	call addOperationProvidedRoleInterface(affectedEObject, newValue)
}
routine addOperationProvidedRoleInterface(pcm::OperationProvidedRole pcmRole, pcm::OperationInterface pcmInterface) {
	match {
		val interfaceRealization = retrieve uml::InterfaceRealization corresponding to pcmRole
		val umlInterface = retrieve uml::Interface corresponding to pcmInterface
		val umlComponent = retrieve uml::Component corresponding to pcmRole.providingEntity_ProvidedRole
	}
	action {
		update interfaceRealization {
			if (interfaceRealization.suppliers != #[umlInterface]) {
				interfaceRealization.suppliers.clear()
				interfaceRealization.suppliers += umlInterface	
			}
		}
	}
}

reaction CreatedRequiredRole {
	after element pcm::OperationRequiredRole inserted in pcm::InterfaceRequiringEntity[requiredRoles_InterfaceRequiringEntity]
	call createRequiredRole(affectedEObject, newValue)
}
routine createRequiredRole(pcm::InterfaceRequiringEntity pcmComponent, pcm::OperationRequiredRole requiredRole) {
	match {
		val umlComponent = retrieve uml::Component corresponding to pcmComponent
	}
	action {
		val usage = create uml::Usage and initialize {
			usage.name = requiredRole.entityName
			usage.clients += umlComponent
		}
		update umlComponent {
			umlComponent.packagedElements += usage
		}
		add correspondence between usage and requiredRole
	}
}
reaction DeletedRequiredRole {
	after element pcm::OperationRequiredRole removed from pcm::InterfaceRequiringEntity[requiredRoles_InterfaceRequiringEntity]
	call deleteRequiredRole(oldValue)
}
routine deleteRequiredRole(pcm::OperationRequiredRole requiredRole) {
	match {
		val usage = retrieve uml::Usage corresponding to requiredRole
	}
	action {
		delete usage
	}
}
reaction AddedOperationRequiredRoleInterface {
	after element replaced at pcm::OperationRequiredRole[requiredInterface__OperationRequiredRole]
	call addOperationRequiredRoleInterface(affectedEObject, newValue)
}
routine addOperationRequiredRoleInterface(pcm::OperationRequiredRole pcmRole, pcm::OperationInterface pcmInterface) {
	match {
		val umlUsage = retrieve uml::Usage corresponding to pcmRole
		val umlInterface = retrieve uml::Interface corresponding to pcmInterface
	}
	action {
		update umlUsage {
			if (umlUsage.suppliers != #[umlInterface]) {
				umlUsage.suppliers.clear()
				umlUsage.suppliers += umlInterface	
			}
		}
	}
}
