import edu.kit.ipd.sdq.commons.util.org.eclipse.emf.common.util.URIUtil
import tools.vitruv.applications.pcmumlclass.DefaultLiterals
import tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper
import tools.vitruv.applications.pcmumlclass.TagLiterals
import tools.vitruv.extensions.dslsruntime.reactions.helper.PersistenceHelper
import tools.vitruv.framework.userinteraction.UserInteractionOptions.WindowModality
import org.eclipse.uml2.uml.UMLPackage
import org.palladiosimulator.pcm.repository.RepositoryPackage
import org.palladiosimulator.pcm.system.SystemPackage

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::Repository
//	with its corresponding uml::Packages (main package for components, contracts package for interfaces, and datatypes package),
//	or a pcm::System with its corresponding uml::Package.
//
//	These reactions handle the correspondence for pcm::Repository and pcm::System correspondences,
//	because the corresponding uml::Packages have the same requirements for the context and therefore
//	the user needs to disambiguate what pcm root element should be created for a new uml::Package.
//
//	Related files:
//		PcmRepository.reactions, PcmSystem.reactions
//		RepositoryConceptTest, SystemConceptTest

reactions: umlRepositoryAndSystemPackageReactions
in reaction to changes in UML
execute actions in PCM

reaction UmlModelCreated {
    after element uml::Model created and inserted as root
    call ensureModelCorrespondenceExists(newValue)
}

routine ensureModelCorrespondenceExists(uml::Model newModel) {
    match {
        val alreadyCorrespondingModels = retrieve many uml::Model corresponding to UMLPackage.Literals.MODEL
        check !alreadyCorrespondingModels.contains(newModel)
    }
    action {
        add correspondence between UMLPackage.Literals.MODEL and newModel
    }
}

reaction RepositoryOrSystemPackageInserted {
	after element uml::Package inserted in uml::Package[packagedElement]
	call insertCorrespondingRepositoryOrSystem(newValue, affectedEObject)
}

routine insertCorrespondingRepositoryOrSystem(uml::Package umlPackage, uml::Package umlParentPackage) {
	match {
		val pcmRepository = retrieve optional pcm::Repository corresponding to umlPackage tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		val pcmSystem = retrieve optional pcm::System corresponding to umlPackage tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
	}
	action {
		call {
			if(!PcmUmlClassHelper.isContainedInRepositoryHierarchy(umlPackage, correspondenceModel)) {
				if (!pcmRepository.isPresent && !pcmSystem.isPresent)
					userDisambiguateRepositoryOrSystemCreation(umlPackage, umlParentPackage)
				//no move-operation necessary since both repository and system are root elements
			} else {
				// nested component repositories and component based systems are not allowed
				deleteCorrespondingRepositoryOrSystem(umlPackage)
			}
		}
	}
}

routine userDisambiguateRepositoryOrSystemCreation(uml::Package umlPkg, uml::Package umlParentPkg) {
	action {
		execute {
			val pcmElementType = userInteractor.singleSelectionDialogBuilder
					.message(DefaultLiterals.USER_DISAMBIGUATE_REPOSITORY_SYSTEM__REQUEST)
					.choices(DefaultLiterals.USER_DISAMBIGUATE_REPOSITORY_SYSTEM__OPTIONS)
					.windowModality(WindowModality.MODAL)
					.startInteraction
			switch (pcmElementType) {
				case DefaultLiterals.USER_DISAMBIGUATE_REPOSITORY_SYSTEM__REPOSITORY:
						createOrFindCorrespondingRepository(umlPkg, umlParentPkg)
				case DefaultLiterals.USER_DISAMBIGUATE_REPOSITORY_SYSTEM__SYSTEM:
						createOrFindCorrespondingSystem(umlPkg, umlParentPkg)
				default: return //do nothing
			}
		}
	}
}

routine createOrFindCorrespondingRepository(uml::Package umlPkg, uml::Package umlParentPkg) {
    match {
        require absence of pcm::Repository corresponding to umlPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
        val foundRepository = retrieve optional pcm::Repository corresponding to RepositoryPackage.Literals.REPOSITORY
            with foundRepository.entityName.toFirstLower == umlPkg.name // PCM repositories can be both upper and lower case
    }
    action {
        call {
            if (foundRepository.isPresent) {
                ensureFirstCaseUpperCaseRepositoryNaming(foundRepository.get, umlPkg)
                addRepositoryCorrespondence(foundRepository.get, umlPkg)
            } else {
                createCorrespondingRepository(umlPkg, umlParentPkg)
            }
        }
    }
}

routine ensureFirstCaseUpperCaseRepositoryNaming(pcm::Repository pcmRepository, uml::Package umlPackage) {
    match {
       check pcmRepository.entityName == umlPackage.name
    }
    action {
        update pcmRepository {
            pcmRepository.entityName = umlPackage.name.toFirstUpper
        }
    }
}

routine addRepositoryCorrespondence(pcm::Repository pcmRepository, uml::Package umlPkg) {
    action {
        add correspondence between pcmRepository and umlPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
    }
}

routine createCorrespondingRepository(uml::Package umlPkg, uml::Package umlParentPkg) {
	action {
		val pcmRepository = create pcm::Repository and initialize {
			pcmRepository.entityName = umlPkg.name?.toFirstUpper
		}
		add correspondence between pcmRepository and umlPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		add correspondence between pcmRepository and RepositoryPackage.Literals.REPOSITORY
		execute {
			val fileExtension = DefaultLiterals.PCM_REPOSITORY_EXTENSION

			var relativeModelPath = userInteractor.textInputDialogBuilder.message(DefaultLiterals.INPUT_REQUEST_NEW_MODEL_PATH).startInteraction
			if (relativeModelPath.nullOrEmpty) {
				relativeModelPath = DefaultLiterals.MODEL_DIRECTORY + "/" + DefaultLiterals.PCM_REPOSITORY_FILE_NAME;
			}

			//check if a model at the specified path already exists; if so, append a number
			//remove extension for now, so that it is easier to add a suffix if necessary
			if (relativeModelPath.endsWith(fileExtension)) {
				relativeModelPath.substring(0, relativeModelPath.length - fileExtension.length)
			}
			var uri = PersistenceHelper.getURIFromSourceProjectFolder(umlPkg, relativeModelPath + fileExtension)
			while(URIUtil.existsResourceAtUri(uri)) {
				uri = PersistenceHelper.getURIFromSourceProjectFolder(umlPkg, relativeModelPath + "-2" + fileExtension)
			}
			//append file extension now
			if (!relativeModelPath.endsWith(fileExtension)) {
				relativeModelPath += fileExtension
			}

			persistProjectRelative(umlPkg, pcmRepository, relativeModelPath);
		}
	}
}

routine createOrFindCorrespondingSystem(uml::Package umlPkg, uml::Package umlParentPkg) {
    match {
        require absence of pcm::System corresponding to umlPkg tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
        val foundSystem = retrieve optional pcm::System corresponding to SystemPackage.Literals.SYSTEM
            with foundSystem.entityName.toFirstLower == umlPkg.name // PCM system can be both upper and lower case
    }
    action {
        call {
            if (foundSystem.isPresent) {
                addSystemCorrespondence(foundSystem.get, umlPkg)
            } else {
                createCorrespondingSystem(umlPkg, umlParentPkg)
            }
        }
    }
}

routine addSystemCorrespondence(pcm::System pcmSystem, uml::Package umlPkg) {
    action {
        add correspondence between pcmSystem and umlPkg tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
    }
}

routine createCorrespondingSystem(uml::Package umlPkg, uml::Package umlParentPkg) {
	action {
		val pcmSystem = create pcm::System and initialize {
			pcmSystem.entityName = umlPkg.name?.toFirstUpper
		}
		add correspondence between pcmSystem and umlPkg tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
		add correspondence between pcmSystem and  SystemPackage.Literals.SYSTEM
		execute {
			val fileExtension = DefaultLiterals.PCM_SYSTEM_EXTENSION
			var relativeModelPath = userInteractor.textInputDialogBuilder.message(DefaultLiterals.INPUT_REQUEST_NEW_MODEL_PATH).startInteraction
			if (relativeModelPath.nullOrEmpty) {
				relativeModelPath = DefaultLiterals.MODEL_DIRECTORY + "/" + DefaultLiterals.PCM_SYSTEM_FILE_NAME;
			}

			//check if a model at the specified path already exists; if so, append a number
			//remove extension for now, so that it is easier to add a suffix if necessary
			if (relativeModelPath.endsWith(fileExtension)) {
				relativeModelPath.substring(0, relativeModelPath.length - fileExtension.length)
			}
			var uri = PersistenceHelper.getURIFromSourceProjectFolder(umlPkg, relativeModelPath + fileExtension)
			while(URIUtil.existsResourceAtUri(uri)) {
				uri = PersistenceHelper.getURIFromSourceProjectFolder(umlPkg, relativeModelPath + "-2" + fileExtension)
			}
			//append file extension now
			if (!relativeModelPath.endsWith(fileExtension)) {
				relativeModelPath += fileExtension
			}

			persistProjectRelative(umlPkg, pcmSystem, relativeModelPath);
		}
	}
}

reaction RepositoryOrSystemPackageDeleted {
	after element uml::Package deleted
	call deleteCorrespondingRepositoryOrSystem(affectedEObject)
}


routine deleteCorrespondingRepositoryOrSystem(uml::Package umlPackage) {
	match {
		val pcmRepository = retrieve optional pcm::Repository corresponding to umlPackage tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		val pcmSystem = retrieve optional pcm::System corresponding to umlPackage tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
	}
	action {
		call {
			pcmRepository.ifPresent[deleteCorrespondingRepository(umlPackage)]
			pcmSystem.ifPresent[deleteCorrespondingSystem(umlPackage)]
		}
	}
}

routine deleteCorrespondingRepository(uml::Package umlRepositoryPkg) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to umlRepositoryPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
	}
	action {
		remove correspondence between pcmRepository and umlRepositoryPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		delete pcmRepository
	}
}

routine deleteCorrespondingSystem(uml::Package umlSystemPkg) {
	match {
		val pcmSystem = retrieve pcm::System corresponding to umlSystemPkg tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
	}
	action {
		remove correspondence between pcmSystem and umlSystemPkg tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
		delete pcmSystem
	}
}

reaction RepositoryOrSystemPackageRenamed {
	after attribute replaced at uml::Package[name]
	with affectedEObject.name == newValue
	call renameCorrespondingRepositoryOrSystem(affectedEObject, newValue)
}

routine renameCorrespondingRepositoryOrSystem(uml::Package umlPkg, String newName) {
	match {
		val pcmRepository = retrieve optional pcm::Repository corresponding to umlPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		val pcmSystem = retrieve optional pcm::System corresponding to umlPkg tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
	}
	action {
		call {
			if (pcmRepository.isPresent)
				pcmRepository.get.entityName = newName?.toFirstUpper
			else if (pcmSystem.isPresent)
				pcmSystem.get.entityName = newName?.toFirstUpper
		}
	}
}

