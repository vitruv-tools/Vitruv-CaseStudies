import tools.vitruv.applications.pcmumlclass.DefaultLiterals
import tools.vitruv.applications.pcmumlclass.TagLiterals

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::RepositoryComponent 
//	with its corresponding uml::Package.
//
// 	The correspondence is instantiated from this side when an uml::Package 
//	is inserted in a repository package and the user selects a concrete RepositoryComponent-type.
//	The correspondence is deleted when the uml::Package is deleted.
//
//	Related files: 
//		PcmRepositoryComponent.reactions
//		UmlIPREClassReactions.reactions, UmlIPREConstructorOperation.reactions
//		RepositoryComponentConceptTest

reactions: umlRepositoryComponentPackageReactions
in reaction to changes in UML
execute actions in PCM

reaction RepositoryComponentPackageInserted {
	after element uml::Package inserted in uml::Package[packagedElement]
	call {
		detectDatatypesSubpackage(newValue, affectedEObject)
		detectContractsSubpackage(newValue, affectedEObject)
		insertCorrespondingRepositoryComponent(newValue, affectedEObject)
	}
}

routine detectDatatypesSubpackage(uml::Package umlPackage, uml::Package umlParentPackage) {
	match {
		check umlPackage.name == DefaultLiterals.DATATYPES_PACKAGE_NAME
		val pcmRepository = retrieve pcm::Repository corresponding to umlParentPackage tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
	}
	action {
		add correspondence between umlPackage and pcmRepository tagged with TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE
	}
}

routine detectContractsSubpackage(uml::Package umlPackage, uml::Package umlParentPackage) {
	match {
		check umlPackage.name == DefaultLiterals.CONTRACTS_PACKAGE_NAME
		val pcmRepository = retrieve pcm::Repository corresponding to umlParentPackage tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
	}
	action {
		add correspondence between umlPackage and pcmRepository tagged with TagLiterals.REPOSITORY_TO_CONTRACTS_PACKAGE
	}
}

routine insertCorrespondingRepositoryComponent(uml::Package umlPkg, uml::Package umlParentPkg) {
	match {
		val pcmRepository = retrieve optional pcm::Repository corresponding to umlParentPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		require absence of pcm::Repository corresponding to umlPkg tagged with TagLiterals.REPOSITORY_TO_CONTRACTS_PACKAGE
		require absence of pcm::Repository corresponding to umlPkg tagged with TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE
	}
	action {
		call {
			if (pcmRepository.isPresent) {
				detectOrCreateCorrespondingRepositoryComponent(umlPkg, umlParentPkg)
				moveCorrespondingRepositoryComponent(umlPkg, umlParentPkg)
			} else {
				// context does not match, delete correspondence if necessary
				deleteCorrespondingRepositoryComponent(umlPkg)
			}
		}
	}
}

routine detectOrCreateCorrespondingRepositoryComponent(uml::Package umlPkg, uml::Package umlParentPkg) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to umlParentPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		require absence of pcm::RepositoryComponent corresponding to umlPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
	action {
		call {
			val pcmComponentCandidate = pcmRepository.components__Repository.findFirst[entityName.toFirstLower == umlPkg.name]
			if (pcmComponentCandidate === null) {
				userDisambiguateCorrespondingRepositoryComponentType(umlPkg, umlParentPkg)
			} else {
				addCorrespondenceForExistingRepositoryComponent(umlPkg, pcmComponentCandidate)
			}
		}
	}
}

routine addCorrespondenceForExistingRepositoryComponent(uml::Package umlPkg, pcm::RepositoryComponent pcmComponent) {
	match{
		require absence of pcm::RepositoryComponent corresponding to umlPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
		require absence of uml::Package corresponding to pcmComponent tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
	action{
		add correspondence between pcmComponent and umlPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
}

routine userDisambiguateCorrespondingRepositoryComponentType(uml::Package umlPkg, uml::Package umlParentPkg) {
	action {
		execute {
			val componentType = userInteractor.singleSelectionDialogBuilder
					.message(DefaultLiterals.USER_DISAMBIGUATE_REPOSITORYCOMPONENT_TYPE__REQUEST)
					.choices(DefaultLiterals.USER_DISAMBIGUATE_REPOSITORYCOMPONENT_TYPE__OPTIONS)
					.startInteraction
					
			switch (componentType) {
				case DefaultLiterals.USER_DISAMBIGUATE_REPOSITORYCOMPONENT_TYPE__BASIC_COMPONENT: 
					createCorrespondingBasicComponent(umlPkg, umlParentPkg)
				case DefaultLiterals.USER_DISAMBIGUATE_REPOSITORYCOMPONENT_TYPE__COMPOSITE_COMPONENT:
					createCorrespondingCompositeComponent(umlPkg, umlParentPkg)
				case DefaultLiterals.USER_DISAMBIGUATE_REPOSITORYCOMPONENT_TYPE__SUB_SYSTEM:
					createCorrespondingSubSystem(umlPkg, umlParentPkg)
				default: return //do nothing
			}
		}
	}
}

routine createCorrespondingBasicComponent(uml::Package umlPkg, uml::Package umlParentPkg) {
	action {
		val pcmComponent = create pcm::BasicComponent and initialize {
			pcmComponent.entityName = umlPkg.name?.toFirstUpper
		}
		add correspondence between pcmComponent and umlPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
}

routine createCorrespondingCompositeComponent(uml::Package umlPkg, uml::Package umlParentPkg) {
	action {
		val pcmComponent = create pcm::CompositeComponent and initialize {
			pcmComponent.entityName = umlPkg.name?.toFirstUpper
		}
		add correspondence between pcmComponent and umlPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
}

routine createCorrespondingSubSystem(uml::Package umlPkg, uml::Package umlParentPkg) {
	action {
		val pcmComponent = create pcm::SubSystem and initialize {
			pcmComponent.entityName = umlPkg.name?.toFirstUpper
		}
		add correspondence between pcmComponent and umlPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
}

routine moveCorrespondingRepositoryComponent(uml::Package umlPkg, uml::Package umlParentPkg) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to umlParentPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to umlPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
	action {
		update pcmRepository {
			pcmRepository.components__Repository += pcmComponent
		}
	}
}

reaction RepositoryComponentPackageRemoved {
	after element uml::Package removed from uml::Package[nestedPackage]
	with !affectedEObject.nestedPackages.contains(oldValue)
	call removeCorrespondingRepositoryComponent(oldValue, affectedEObject)
}

routine removeCorrespondingRepositoryComponent(uml::Package umlPkg, uml::Package umlParentPkg) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to umlParentPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to umlPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
	action {
		update pcmRepository {
			pcmRepository.components__Repository -= pcmComponent
		}
	}
}

reaction PackageDeleted {
	after element uml::Package deleted
	call deleteCorrespondingRepositoryComponent(affectedEObject)
}

routine deleteCorrespondingRepositoryComponent(uml::Package umlComponentPkg) {
	match {
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to umlComponentPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
	action {
		remove correspondence between pcmComponent and umlComponentPkg
		delete pcmComponent
	}
}

reaction RepositoryComponentPackageRenamed {
	after attribute replaced at uml::Package[name]
	with affectedEObject.name == newValue
	call changeNameOfCorrespondingRepositoryComponent(affectedEObject, newValue)
}

routine changeNameOfCorrespondingRepositoryComponent(uml::Package umlPkg, String newName) {
	match {
		val pcmComponent = retrieve pcm::RepositoryComponent corresponding to umlPkg tagged with TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
	action {
		update pcmComponent {
			pcmComponent.entityName = newName?.toFirstUpper
		}
	}
}

