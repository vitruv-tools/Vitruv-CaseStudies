import org.eclipse.uml2.uml.Class
import org.eclipse.uml2.uml.UMLPackage
import tools.vitruv.applications.pcmumlclass.DefaultLiterals
import tools.vitruv.applications.pcmumlclass.TagLiterals
import org.palladiosimulator.pcm.system.SystemPackage

import static tools.vitruv.applications.util.temporary.uml.UmlClassifierAndPackageUtil.findUmlPackage

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

// The following reactions and routines synchronize a pcm::System with its corresponding uml::Package,
// uml::Class (implementation) and uml::Operation (Constructor).
//
// Related files:
// UmlRepositoryAndSystemPackage.reactions,
// UmlIPREClass.reactions,
// UmlIPREConstructorOperation.reactions,
// RepositoryConceptTest

reactions: pcmSystemReactions
in reaction to changes in PCM
execute actions in UML

import routines sharedRoutines // for UML model handling

reaction SystemCreated {
	after element pcm::System inserted as root
	call{
	    addSystemCorrespondence(newValue)
		ensureUmlModelExists(newValue)
		createOrFindCorrespondingSystemPackage(newValue)
		detectOrCreateCorrespondingSystemImplementation(newValue)
		detectOrCreateCorrespondingSystemConstructor(newValue)
	}
}

routine addSystemCorrespondence(pcm::System pcmSystem) {
    action { // required to enable find-or-create-pattern:
        add correspondence between pcmSystem and SystemPackage.Literals.SYSTEM
    }
}

routine createOrFindCorrespondingSystemPackage(pcm::System pcmSystem) {
	match {
		require absence of uml::Package corresponding to pcmSystem tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
		 val umlModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
	}
	action {
		call {
			val foundPackage = findUmlPackage(umlModel, pcmSystem.entityName.toFirstLower)
			if(foundPackage === null) {
				createCorrespondingSystemPackage(pcmSystem, umlModel)
			} else {
				addSystemPackageCorrespondence(pcmSystem, foundPackage)
			}
		}
	}
}

routine addSystemPackageCorrespondence(pcm::System pcmSystem, uml::Package umlPackage) {
	action {
		add correspondence between pcmSystem and umlPackage tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
	}
}

routine createCorrespondingSystemPackage(pcm::System pcmSystem, uml::Model umlRootModel) {
	match {
		require absence of uml::Package corresponding to pcmSystem tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
	}
	action {
		val umlSystemPackage = create uml::Package and initialize{
			umlSystemPackage.name = pcmSystem.entityName.toFirstLower;
			umlRootModel.nestedPackages += umlSystemPackage
		}
		call addSystemPackageCorrespondence(pcmSystem, umlSystemPackage)
	}
}


routine detectOrCreateCorrespondingSystemImplementation(pcm::System pcmSystem) {
	match {
		val umlSystemPackage = retrieve uml::Package corresponding to pcmSystem tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
		require absence of uml::Class corresponding to pcmSystem tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
	action {
		call {
			val umlSystemImplementationCandidate = umlSystemPackage.packagedElements
					.filter(Class).findFirst[it.name == pcmSystem.entityName.toFirstUpper + DefaultLiterals.IMPLEMENTATION_SUFFIX]
			if (umlSystemImplementationCandidate !== null) {
				addCorrespondenceForExistingSystemImplementation(pcmSystem, umlSystemImplementationCandidate)
			} else {
				createCorrespondingSystemImplementation(pcmSystem)
			}
		}
	}
}

routine addCorrespondenceForExistingSystemImplementation(pcm::System pcmSystem, uml::Class umlSystemImplementation) {
	match {
		require absence of uml::Class corresponding to pcmSystem tagged with TagLiterals.IPRE__IMPLEMENTATION
		require absence of pcm::System corresponding to umlSystemImplementation tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
	action {
		add correspondence between pcmSystem and umlSystemImplementation tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
}

routine createCorrespondingSystemImplementation(pcm::System pcmSystem) {
	match {
		val umlSystemPackage = retrieve uml::Package corresponding to pcmSystem tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
		require absence of uml::Class corresponding to pcmSystem tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
	action {
		val umlSystemImplementation = create uml::Class and initialize {
			umlSystemImplementation.name = pcmSystem.entityName.toFirstUpper + DefaultLiterals.IMPLEMENTATION_SUFFIX
			umlSystemImplementation.isFinalSpecialization = true
			umlSystemPackage.packagedElements += umlSystemImplementation
		}
		add correspondence between pcmSystem and umlSystemImplementation tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
}

routine detectOrCreateCorrespondingSystemConstructor(pcm::System pcmSystem) {
	match {
		val umlSystemImplementation = retrieve uml::Class corresponding to pcmSystem tagged with TagLiterals.IPRE__IMPLEMENTATION
		require absence of uml::Operation corresponding to pcmSystem tagged with TagLiterals.IPRE__CONSTRUCTOR
	}
	action {
		call {
			val umlSystemConstructorCandidate = umlSystemImplementation.ownedOperations
					.findFirst[it.name == pcmSystem.entityName.toFirstUpper + DefaultLiterals.IMPLEMENTATION_SUFFIX]
			if (umlSystemConstructorCandidate !== null) {
				addCorrespondenceForExistingSystemConstructor(pcmSystem, umlSystemConstructorCandidate)
			} else {
				createCorrespondingSystemConstructor(pcmSystem)
			}
		}
	}
}

routine addCorrespondenceForExistingSystemConstructor(pcm::System pcmSystem, uml::Operation umlSystemConstructor) {
	match {
		require absence of uml::Operation corresponding to pcmSystem tagged with TagLiterals.IPRE__CONSTRUCTOR
		require absence of pcm::System corresponding to umlSystemConstructor tagged with TagLiterals.IPRE__CONSTRUCTOR
	}
	action {
		add correspondence between pcmSystem and umlSystemConstructor tagged with TagLiterals.IPRE__CONSTRUCTOR
	}
}

routine createCorrespondingSystemConstructor(pcm::System pcmSystem) {
	match {
		val umlSystemImplementation = retrieve uml::Class corresponding to pcmSystem tagged with TagLiterals.IPRE__IMPLEMENTATION
		require absence of uml::Operation corresponding to pcmSystem tagged with TagLiterals.IPRE__CONSTRUCTOR
	}
	action {
		val umlSystemConstructor = create uml::Operation and initialize {
			umlSystemConstructor.name = pcmSystem.entityName.toFirstUpper + DefaultLiterals.IMPLEMENTATION_SUFFIX
			umlSystemImplementation.ownedOperations += umlSystemConstructor
		}
		add correspondence between pcmSystem and umlSystemConstructor tagged with TagLiterals.IPRE__CONSTRUCTOR
	}
}

reaction SystemDeleted {
	after element pcm::System deleted
	call {
		deleteCorrespondenceToSystemPackage(affectedEObject)
		deleteCorrespondenceToSystemImplementation(affectedEObject)
		deleteCorrespondenceToSystemConstructor(affectedEObject)
	}
}

routine deleteCorrespondenceToSystemPackage(pcm::System pcmSystem) {
	match {
		val umlSystemPackage = retrieve uml::Package corresponding to pcmSystem tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
	}
	action {
		remove correspondence between pcmSystem and umlSystemPackage tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
		delete umlSystemPackage
	}
}

routine deleteCorrespondenceToSystemImplementation(pcm::System pcmSystem) {
	match {
		val umlSystemImplementation = retrieve uml::Class corresponding to pcmSystem tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
	action {
		remove correspondence between pcmSystem and umlSystemImplementation tagged with TagLiterals.IPRE__IMPLEMENTATION
	}
}

routine deleteCorrespondenceToSystemConstructor(pcm::System pcmSystem) {
	match {
		val umlSystemConstructor = retrieve uml::Operation corresponding to pcmSystem tagged with TagLiterals.IPRE__CONSTRUCTOR
	}
	action {
		remove correspondence between pcmSystem and umlSystemConstructor tagged with TagLiterals.IPRE__CONSTRUCTOR
	}
}

reaction SystemNameChanged {
	after attribute replaced at pcm::System[entityName]
	with affectedEObject.entityName == newValue
	call changeNameOfSystemCorrespondences(affectedEObject, newValue)
}

routine changeNameOfSystemCorrespondences(pcm::System pcmSystem, String newName) {
	match {
		val umlSystemPackage = retrieve optional uml::Package corresponding to pcmSystem tagged with TagLiterals.SYSTEM__SYSTEM_PACKAGE
		val umlSystemImplementation = retrieve optional uml::Class corresponding to pcmSystem tagged with TagLiterals.IPRE__IMPLEMENTATION
		val umlSystemConstructor = retrieve optional uml::Operation corresponding to pcmSystem tagged with TagLiterals.IPRE__CONSTRUCTOR
	}
	action {
		execute{
			umlSystemPackage.ifPresent[name = newName.toFirstLower]
			umlSystemImplementation.ifPresent[name = newName + DefaultLiterals.IMPLEMENTATION_SUFFIX]
			umlSystemConstructor.ifPresent[name = newName + DefaultLiterals.IMPLEMENTATION_SUFFIX]
		}
	}
}

