import tools.vitruv.applications.pcmumlclass.TagLiterals

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::OperationRequiredRole of a pcm::InterfaceProvidingRequiringEntity (IPRE)
//	with its corresponding uml::Parameter (constructor parameter of the IPRE implementation class) and 
//	uml::Property (the field in the IPRE implementation class used to store the Component passed to the constructor).
//
//	Related files: 
//		UmlRequiredRoleParameter.reactions, UmlRequiredRoleProperty.reactions,
//		RequiredRoleConceptTest

reactions: pcmRequiredRoleReactions
in reaction to changes in PCM
execute actions in UML

reaction RequiredRoleInserted {
	after element pcm::OperationRequiredRole inserted in pcm::InterfaceProvidingRequiringEntity[requiredRoles_InterfaceRequiringEntity]
	with affectedEObject.requiredRoles_InterfaceRequiringEntity.contains(newValue)
	call insertCorrespondingRequiredElements(newValue, affectedEObject)
}

routine insertCorrespondingRequiredElements(pcm::OperationRequiredRole pcmRequired, pcm::InterfaceProvidingRequiringEntity pcmIPRE) {
	action {
		call detectOrCreateCorrespondingRequiredConstructorParameter(pcmRequired, pcmIPRE)
		call detectOrCreateCorrespondingRequiredField(pcmRequired, pcmIPRE)
		call moveCorrespondingRequiredElements(pcmRequired, pcmIPRE)
	}
}

routine detectOrCreateCorrespondingRequiredConstructorParameter(pcm::OperationRequiredRole pcmRequired, pcm::InterfaceProvidingRequiringEntity pcmIPRE) {
	match {
		val umlComponentConstructor = retrieve uml::Operation corresponding to pcmIPRE tagged with TagLiterals.IPRE__CONSTRUCTOR
		val umlConstructorParameter = retrieve optional uml::Parameter corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PARAMETER
	}
	action {
		call {
			if (!umlConstructorParameter.isPresent) {
				// what would be a good criterion for detecting the RequiredConstructorParameter?
				createCorrespondingRequiredConstructorParameter(pcmRequired, pcmIPRE)
			}
		}
	}
}

routine createCorrespondingRequiredConstructorParameter(pcm::OperationRequiredRole pcmRequired, pcm::InterfaceProvidingRequiringEntity pcmIPRE) {
	match {
		val umlComponentConstructor = retrieve uml::Operation corresponding to pcmIPRE tagged with TagLiterals.IPRE__CONSTRUCTOR
		require absence of uml::Parameter corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PARAMETER
		val umlRequiredInterface = retrieve optional uml::Interface 
			corresponding to pcmRequired.requiredInterface__OperationRequiredRole tagged with TagLiterals.INTERFACE_TO_INTERFACE
	}
	action {
		val umlConstructorParameter = create uml::Parameter and initialize {
			umlConstructorParameter.name = pcmRequired.entityName
			umlConstructorParameter.type = umlRequiredInterface.orElse(null) 
		}
		add correspondence between pcmRequired and umlConstructorParameter tagged with TagLiterals.REQUIRED_ROLE__PARAMETER
	}
}

routine detectOrCreateCorrespondingRequiredField(pcm::OperationRequiredRole pcmRequired, pcm::InterfaceProvidingRequiringEntity pcmIPRE) {
	match {
		val umlComponentImpl = retrieve uml::Class corresponding to pcmIPRE tagged with TagLiterals.IPRE__IMPLEMENTATION
		val umlRequiredField = retrieve optional uml::Property corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PROPERTY
	}
	action {
		call {
			if (!umlRequiredField.isPresent) {
				// what would be a good criterion for detecting the RequiredField?
				createCorrespondingRequiredField(pcmRequired, pcmIPRE)
			}
		}
	}
}

routine createCorrespondingRequiredField(pcm::OperationRequiredRole pcmRequired, pcm::InterfaceProvidingRequiringEntity pcmIPRE) {
	match {
		val umlComponentImpl = retrieve uml::Class corresponding to pcmIPRE tagged with TagLiterals.IPRE__IMPLEMENTATION
		require absence of uml::Property corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PROPERTY
		val umlRequiredInterface = retrieve optional uml::Interface 
			corresponding to pcmRequired.requiredInterface__OperationRequiredRole tagged with TagLiterals.INTERFACE_TO_INTERFACE
	}
	action {
		val umlRequiredField = create uml::Property and initialize {
			umlRequiredField.name = pcmRequired.entityName
			umlRequiredField.type = umlRequiredInterface.orElse(null) 
		}
		add correspondence between pcmRequired and umlRequiredField tagged with TagLiterals.REQUIRED_ROLE__PROPERTY
	}
}

routine moveCorrespondingRequiredElements(pcm::OperationRequiredRole pcmRequired, pcm::InterfaceProvidingRequiringEntity pcmIPRE) {
	match {
		val umlComponentConstructor = retrieve uml::Operation corresponding to pcmIPRE tagged with TagLiterals.IPRE__CONSTRUCTOR
		val umlConstructorParameter = retrieve uml::Parameter corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PARAMETER
		
		val umlComponentImpl = retrieve uml::Class corresponding to pcmIPRE tagged with TagLiterals.IPRE__IMPLEMENTATION
		val umlRequiredField = retrieve uml::Property corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PROPERTY
	}
	action {
		update umlComponentImpl {
			umlComponentConstructor.ownedParameters += umlConstructorParameter
			umlComponentImpl.ownedAttributes += umlRequiredField
		}
	}
}

reaction RequiredRoleRemoved {
	after element pcm::OperationRequiredRole removed from pcm::InterfaceProvidingRequiringEntity[requiredRoles_InterfaceRequiringEntity]
	with !affectedEObject.requiredRoles_InterfaceRequiringEntity.contains(oldValue)
	call removeCorrespondingRequiredElements(oldValue, affectedEObject)
}

routine removeCorrespondingRequiredElements(pcm::OperationRequiredRole pcmRequired, pcm::InterfaceProvidingRequiringEntity pcmIPRE) {
	match {
		val umlComponentConstructor = retrieve uml::Operation corresponding to pcmIPRE tagged with TagLiterals.IPRE__CONSTRUCTOR
		val umlConstructorParameter = retrieve optional uml::Parameter corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PARAMETER
		
		val umlComponentImpl = retrieve uml::Class corresponding to pcmIPRE tagged with TagLiterals.IPRE__IMPLEMENTATION
		val umlRequiredField = retrieve optional uml::Property corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PROPERTY
	}
	action {
		execute {
			if (umlConstructorParameter.isPresent) 	
				umlComponentConstructor.ownedParameters -= umlConstructorParameter.get
			if (umlRequiredField.isPresent)
				umlComponentImpl.ownedAttributes -= umlRequiredField.get
		}
	}
}

reaction RequiredRoleDeleted {
	after element pcm::OperationRequiredRole deleted
	call deleteCorrespondingRequiredElements(affectedEObject)
}

routine deleteCorrespondingRequiredElements(pcm::OperationRequiredRole pcmRequired) {
	action {
		call deleteCorrespondingRequiredConstructorParameter(pcmRequired)
		call deleteCorrespondingRequiredField(pcmRequired)
	}
}

routine deleteCorrespondingRequiredConstructorParameter(pcm::OperationRequiredRole pcmRequired) {
	match {
		val umlConstructorParameter = retrieve uml::Parameter corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PARAMETER
	}
	action {
		remove correspondence between pcmRequired and umlConstructorParameter tagged with TagLiterals.REQUIRED_ROLE__PARAMETER
		delete umlConstructorParameter
	}
}

routine deleteCorrespondingRequiredField(pcm::OperationRequiredRole pcmRequired) {
	match {
		val umlRequiredField = retrieve uml::Property corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PROPERTY
	}
	action {
		remove correspondence between pcmRequired and umlRequiredField tagged with TagLiterals.REQUIRED_ROLE__PROPERTY
		delete umlRequiredField
	}
}

reaction RequiredRoleNameChanged {
	after attribute replaced at pcm::OperationRequiredRole[entityName]
	with affectedEObject.entityName === newValue
	call changeNameOfCorrespondingRequiredElements(affectedEObject, newValue)
}

routine changeNameOfCorrespondingRequiredElements(pcm::OperationRequiredRole pcmRequired, String newName) {
	match {
		val umlConstructorParameter = retrieve uml::Parameter corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PARAMETER
		val umlRequiredField = retrieve uml::Property corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PROPERTY
	}
	action {
		execute {
			umlConstructorParameter.name = newName
			umlRequiredField.name = newName
		}
	}
}

reaction RequiredRoleInterfaceChanged {
	after element pcm::OperationInterface replaced at pcm::OperationRequiredRole[requiredInterface__OperationRequiredRole]
	with affectedEObject.requiredInterface__OperationRequiredRole === newValue
	call changeTypeOfCorrespondingRequiredElements(affectedEObject, newValue)
}

routine changeTypeOfCorrespondingRequiredElements(pcm::OperationRequiredRole pcmRequired, pcm::OperationInterface pcmInterface) {
	match {
		val umlConstructorParameter = retrieve uml::Parameter corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PARAMETER
		val umlRequiredField = retrieve uml::Property corresponding to pcmRequired tagged with TagLiterals.REQUIRED_ROLE__PROPERTY
		
		val umlInterface = retrieve optional uml::Interface corresponding to pcmInterface tagged with TagLiterals.INTERFACE_TO_INTERFACE
	}
	action {
		execute {
			umlConstructorParameter.type = umlInterface.orElse(null)
			umlRequiredField.type = umlInterface.orElse(null)
		}
	}
}

