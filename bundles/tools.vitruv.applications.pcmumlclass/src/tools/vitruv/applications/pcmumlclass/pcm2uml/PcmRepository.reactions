import org.eclipse.uml2.uml.UMLPackage
import tools.vitruv.applications.pcmumlclass.DefaultLiterals
import tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper
import tools.vitruv.applications.pcmumlclass.TagLiterals
import tools.vitruv.applications.util.temporary.uml.UmlTypeUtil
import tools.vitruv.extensions.dslsruntime.reactions.helper.ReactionsCorrespondenceHelper
import tools.vitruv.applications.util.temporary.pcm.PcmDataTypeUtil
import org.palladiosimulator.pcm.repository.RepositoryPackage

import static tools.vitruv.applications.util.temporary.uml.UmlClassifierAndPackageUtil.findUmlPackage

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

// The following reactions and routines synchronize a pcm::Repository with its corresponding uml::Packages
// (main package for components, contracts package for interfaces, and datatypes package)
// and bootstrap the pcm::PrimitiveDataType - uml::PrimitiveType correspondences for the externally defined primitive types
// on first creation of the repository.
//
// Related files:
// UmlRepositoryAndSystemPackage.reactions
// RepositoryConceptTest

reactions: pcmRepositoryReactions
in reaction to changes in PCM
execute actions in UML

import routines sharedRoutines // for UML model handling

reaction RepositoryCreated {
	after element pcm::Repository inserted as root
	call {
		addRepositoryCorrespondence(newValue)
		ensureUmlModelExists(newValue)
		createOrFindUmlRepositoryPackage(newValue)
		createUmlContractsPackage(newValue)
		createUmlDatatypesPackage(newValue)
		bootstrapPrimitiveDatatypes(newValue)
	}
}

routine addRepositoryCorrespondence(pcm::Repository pcmRepository) {
	action {
		add correspondence between pcmRepository and RepositoryPackage.Literals.REPOSITORY
	}
}

routine createOrFindUmlRepositoryPackage(pcm::Repository pcmRepo) {
	match {
		val umlModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		require absence of uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
	}
	action {
		call {
			val umlPackage = findUmlPackage(umlModel, pcmRepo.entityName.toFirstLower)
			if(umlPackage === null) {
				createUmlRepositoryPackage(pcmRepo)
			} else {
				addPackageCorrespondence(pcmRepo, umlPackage)
			}
		}
	}
}

routine addPackageCorrespondence(pcm::Repository pcmRepo, uml::Package uPackage) {
	action {
		add correspondence between pcmRepo and uPackage tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
	}
}

routine createUmlRepositoryPackage(pcm::Repository pcmRepo) {
	match {
		val umlModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
	}
	action {
		val umlRepositoryPkg = create uml::Package and initialize {
			umlRepositoryPkg.name = pcmRepo.entityName.toFirstLower;
			umlModel.nestedPackages += umlRepositoryPkg
		}
		add correspondence between pcmRepo and umlRepositoryPkg tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
	}
}

routine createUmlContractsPackage(pcm::Repository pcmRepo) {
	match {
		val umlRepositoryPkg = retrieve asserted uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		require absence of uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_CONTRACTS_PACKAGE
	}
	action {
		call {
			//look for candidate before creating a new Package
			var umlContractsPkg = umlRepositoryPkg.nestedPackages.findFirst[pkg | pkg.name == DefaultLiterals.CONTRACTS_PACKAGE_NAME]
			if (umlContractsPkg === null) {
				umlContractsPkg = umlRepositoryPkg.createNestedPackage(DefaultLiterals.CONTRACTS_PACKAGE_NAME)
			}
			ReactionsCorrespondenceHelper.addCorrespondence(correspondenceModel, pcmRepo, umlContractsPkg, TagLiterals.REPOSITORY_TO_CONTRACTS_PACKAGE)
		}
	}
}
routine createUmlDatatypesPackage(pcm::Repository pcmRepo) {
	match {
		val umlRepositoryPkg = retrieve asserted uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		require absence of uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE
	}
	action {
		call {
			//look for candidate before creating a new Package
			var umlDatatypesPkg = umlRepositoryPkg.nestedPackages.findFirst[pkg | pkg.name == DefaultLiterals.DATATYPES_PACKAGE_NAME]
			if (umlDatatypesPkg === null) {
				umlDatatypesPkg = umlRepositoryPkg.createNestedPackage(DefaultLiterals.DATATYPES_PACKAGE_NAME)
			}
			ReactionsCorrespondenceHelper.addCorrespondence(correspondenceModel, pcmRepo, umlDatatypesPkg, TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE)
		}
	}
}

reaction RepositoryNameChanged {
	after attribute replaced at pcm::Repository[entityName]
	with affectedEObject.entityName == newValue
	call changeNameOfCorrespondingRepositoryPackage(affectedEObject)
}

routine changeNameOfCorrespondingRepositoryPackage(pcm::Repository pcmRepo) {
	match {
		val umlRepositoryPkg = retrieve asserted uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
	}
	action {
		update umlRepositoryPkg {
			if (umlRepositoryPkg.name != pcmRepo.entityName.toFirstLower)
				umlRepositoryPkg.name = pcmRepo.entityName.toFirstLower
		}
	}
}

reaction RepositoryDeleted {
	after element pcm::Repository deleted
	call deleteCorrespondingRepositoryPackages(affectedEObject)
}

routine deleteCorrespondingRepositoryPackages(pcm::Repository pcmRepo) {
	match {
		val umlModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		val umlRepositoryPkg = retrieve uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		val umlContractsPkg = retrieve optional uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_CONTRACTS_PACKAGE
		val umlDatatypesPkg = retrieve optional uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE
	}
	action {
		call{
			// remove correspondences
			ReactionsCorrespondenceHelper.removeCorrespondencesBetweenElements(correspondenceModel,
				pcmRepo, umlRepositoryPkg, TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE)
			umlContractsPkg.ifPresent[ReactionsCorrespondenceHelper.removeCorrespondencesBetweenElements(
				correspondenceModel, pcmRepo, it, TagLiterals.REPOSITORY_TO_CONTRACTS_PACKAGE)]
			umlDatatypesPkg.ifPresent[ReactionsCorrespondenceHelper.removeCorrespondencesBetweenElements(
				correspondenceModel, pcmRepo, it, TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE)]
			// ask if the corresponding model should also be deleted
			val deleteCorrespondingUmlRepository = userInteractor.confirmationDialogBuilder
					.message(DefaultLiterals.INPUT_REQUEST_DELETE_CORRESPONDING_UML_MODEL).startInteraction

			if (deleteCorrespondingUmlRepository) {// DefaultLiterals.INPUT_REQUEST_DELETE_CORRESPONDING_UML_MODEL_YES
				umlContractsPkg.ifPresent[umlRepositoryPkg.packagedElements -= it]
				umlDatatypesPkg.ifPresent[umlRepositoryPkg.packagedElements -= it]
				umlModel.packagedElements -= umlRepositoryPkg // remove parent package last to allow the recorder to notice the child package deletion
			}
		}
	}
}


//Primitive Datatypes are bootstraped in
routine bootstrapPrimitiveDatatypes(pcm::Repository pcmRepo) {
	match {
		val umlDatatypesPkg = retrieve asserted uml::Package corresponding to pcmRepo tagged with TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE
	}
	action {
		execute {
			val pcmPrimitiveTypes = PcmDataTypeUtil.getPcmPrimitiveTypes(pcmRepo)
			val umlPrimitiveTypes = UmlTypeUtil.getUmlPrimitiveTypes(pcmRepo)
			for (pcmType : pcmPrimitiveTypes) {
				val umlType = PcmUmlClassHelper.mapPrimitiveTypes(pcmType, umlPrimitiveTypes)
				if (umlType !== null)
					addPrimitiveDatatypeCorrespondence(pcmType, umlType)
			}
		}
	}
}

routine addPrimitiveDatatypeCorrespondence(pcm::PrimitiveDataType pcmPrimitiveType, uml::PrimitiveType umlPrimitiveType) {
	match {
		require absence of uml::PrimitiveType corresponding to pcmPrimitiveType tagged with TagLiterals.DATATYPE__TYPE
		require absence of pcm::PrimitiveDataType corresponding to umlPrimitiveType tagged with TagLiterals.DATATYPE__TYPE
	}
	action{
		add correspondence between pcmPrimitiveType and umlPrimitiveType tagged with TagLiterals.DATATYPE__TYPE
	}
}

