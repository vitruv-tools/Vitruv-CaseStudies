import org.eclipse.uml2.uml.Property
import org.palladiosimulator.pcm.repository.CollectionDataType
import org.palladiosimulator.pcm.repository.Repository
import tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper
import tools.vitruv.applications.pcmumlclass.TagLiterals

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::InnerDeclaration with its corresponding uml::Property
//	and handle type and multiplicity changes for the uml::Property.
//
//	Related files: 
//		PcmInnerDeclaration.reactions, 
//		AttributeConceptTest

reactions: umlInnerDeclarationPropertyReactions
in reaction to changes in UML
execute actions in PCM

reaction InnerDeclarationPropertyInserted {
	after element uml::Property inserted in uml::Class[ownedAttribute]
	with affectedEObject.ownedAttributes.contains(newValue)
	call insertCorrespondingInnerDeclaration(newValue, affectedEObject)
}

routine insertCorrespondingInnerDeclaration(uml::Property umlProperty, uml::Class umlCompositeType) {
	match {
		val pcmCompositeType = retrieve optional pcm::CompositeDataType corresponding to umlCompositeType tagged with TagLiterals.COMPOSITE_DATATYPE__CLASS 
	}
	action {
		call {
			if (pcmCompositeType.isPresent) {
				detectOrCreateCorrespondingInnerDeclaration(umlProperty, umlCompositeType)
				moveCorrespondingInnerDeclaration(umlProperty, umlCompositeType)
			} else {
				// not a matching context -> delete correspondence, if it exists
				deleteCorrespondingInnerDeclaration(umlProperty)
			}
		}
	}
}

routine detectOrCreateCorrespondingInnerDeclaration(uml::Property umlProperty, uml::Class umlCompositeType) {
	match {
		val pcmCompositeType = retrieve pcm::CompositeDataType corresponding to umlCompositeType tagged with TagLiterals.COMPOSITE_DATATYPE__CLASS 
		val pcmInnerDeclaration = retrieve optional pcm::InnerDeclaration corresponding to umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		call {
			if (!pcmInnerDeclaration.isPresent) {
				val pcmInnerDeclarationCandidate = pcmCompositeType.innerDeclaration_CompositeDataType
						.findFirst[it.entityName === umlProperty.name]
				if (pcmInnerDeclarationCandidate !== null) {
					addCorrespondenceForExistingInnerDeclaration(umlProperty, pcmInnerDeclarationCandidate)
				} else {
					createCorrespondingInnerDeclaration(umlProperty, umlCompositeType)
				}
			}
		}
	}
}

routine addCorrespondenceForExistingInnerDeclaration(uml::Property umlProperty, pcm::InnerDeclaration pcmInnerDeclaration) {
	match {
		require absence of uml::Property corresponding to pcmInnerDeclaration tagged with TagLiterals.INNER_DECLARATION__PROPERTY
		require absence of pcm::InnerDeclaration corresponding to umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		add correspondence between pcmInnerDeclaration and umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
}

routine createCorrespondingInnerDeclaration(uml::Property umlProperty, uml::Class umlCompositeType) {
	match {
		val pcmCompositeType = retrieve pcm::CompositeDataType corresponding to umlCompositeType tagged with TagLiterals.COMPOSITE_DATATYPE__CLASS
		require absence of pcm::InnerDeclaration corresponding to umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		val pcmInnerDeclaration = create pcm::InnerDeclaration and initialize {
			pcmInnerDeclaration.entityName = umlProperty.name
			pcmCompositeType.innerDeclaration_CompositeDataType += pcmInnerDeclaration
		}
		add correspondence between pcmInnerDeclaration and umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
		call propagateTypeChange(umlProperty)
	}
}

routine moveCorrespondingInnerDeclaration(uml::Property umlProperty, uml::Class umlCompositeType) {
	match {
		val pcmCompositeType = retrieve pcm::CompositeDataType corresponding to umlCompositeType tagged with TagLiterals.COMPOSITE_DATATYPE__CLASS
		val pcmInnerDeclaration = retrieve pcm::InnerDeclaration corresponding to umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		update pcmCompositeType {
			pcmCompositeType.innerDeclaration_CompositeDataType += pcmInnerDeclaration
		}
	}
}

reaction InnerDeclarationPropertyRemoved {
	after element uml::Property removed from uml::Class[ownedAttribute]
	with !affectedEObject.ownedAttributes.contains(oldValue) //validity check
	call removeCorrespondingInnerDeclaration(oldValue, affectedEObject)
}

routine removeCorrespondingInnerDeclaration(uml::Property umlProperty, uml::Class umlCompositeType) {
	match {
		val pcmCompositeType = retrieve pcm::CompositeDataType corresponding to umlCompositeType tagged with TagLiterals.COMPOSITE_DATATYPE__CLASS
		val pcmInnerDeclaration = retrieve pcm::InnerDeclaration corresponding to umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		update pcmCompositeType {
			pcmCompositeType.innerDeclaration_CompositeDataType -= pcmInnerDeclaration
		}
	}
}

reaction InnerDeclarationPropertyDeleted {
	after element uml::Property deleted
	call deleteCorrespondingInnerDeclaration(affectedEObject)
}

routine deleteCorrespondingInnerDeclaration(uml::Property umlProperty) {
	match {
		val pcmInnerDeclaration = retrieve pcm::InnerDeclaration corresponding to umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		remove correspondence between pcmInnerDeclaration and umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
		delete pcmInnerDeclaration
	}
}

reaction InnerDeclarationPropertyNameChanged {
	after attribute replaced at uml::Property[name]
	with affectedEObject.name == newValue
	call changeNameOfCorrespondingInnerDeclaration(affectedEObject, newValue)
}

routine changeNameOfCorrespondingInnerDeclaration(uml::Property umlProperty, String newName) {
	match {
		val pcmInnerDeclaration = retrieve pcm::InnerDeclaration corresponding to umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		update pcmInnerDeclaration {
			pcmInnerDeclaration.entityName = newName
		}
	}
}

reaction InnerDeclarationPropertyTypeChanged {
	after element replaced at uml::Property[type]
	with affectedEObject.type === newValue 
		&& oldValue !== newValue
	call propagateTypeChange(affectedEObject)
}

reaction InnerDeclarationPropertyLowerChanged {
	after element replaced at uml::Property[lowerValue]
	call propagateTypeChange(affectedEObject)
}

reaction InnerDeclarationPropertyLowerChanged2 {
	after attribute replaced at uml::LiteralInteger[value]
	with affectedEObject.owner instanceof Property 
		&& affectedEObject.value == newValue
	call propagateTypeChange(affectedEObject.owner as Property)
}

reaction InnerDeclarationPropertyUpperChanged {
	after element replaced at uml::Property[upperValue]
	call propagateTypeChange(affectedEObject)
}

reaction InnerDeclarationPropertyUpperChanged2 {
	after attribute replaced at uml::LiteralUnlimitedNatural[value]
	with affectedEObject.owner instanceof Property 
		&& affectedEObject.value == newValue
	call propagateTypeChange(affectedEObject.owner as Property)
}

routine propagateTypeChange(uml::Property umlProperty) {
	match {
		val pcmInnerDeclaration = retrieve pcm::InnerDeclaration corresponding to umlProperty tagged with TagLiterals.INNER_DECLARATION__PROPERTY
		
		val pcmOldCollectionType = retrieve optional pcm::CollectionDataType corresponding to umlProperty tagged with TagLiterals.COLLECTION_DATATYPE__PROPERTY
	}
	action {
		execute {
			val pcmRepository = pcmInnerDeclaration.eResource.allContents.filter(Repository).head
			val pcmDataType = PcmUmlClassHelper.getCorrespondingPcmDataType(correspondenceModel, umlProperty.type, umlProperty.lower, umlProperty.upper, pcmRepository, userInteractor)
			pcmInnerDeclaration.datatype_InnerDeclaration = pcmDataType
			
			if(pcmOldCollectionType.isPresent && pcmOldCollectionType.get !== pcmDataType) removeCorrespondenceForOldCollectionType(umlProperty)
			if(pcmDataType instanceof CollectionDataType) addCorrespondenceForCollectionType(umlProperty, pcmDataType)
		}
	}
}

routine removeCorrespondenceForOldCollectionType(uml::Property umlProperty) {
	match {
		val pcmCollectionType = retrieve pcm::CollectionDataType corresponding to umlProperty tagged with TagLiterals.COLLECTION_DATATYPE__PROPERTY
	}
	action {
		remove correspondence between pcmCollectionType and umlProperty tagged with TagLiterals.COLLECTION_DATATYPE__PROPERTY
	}
}

routine addCorrespondenceForCollectionType(uml::Property umlProperty, pcm::CollectionDataType pcmCollectionType) {
	match {
		// one Parameter can only correspond to one CollectionDataType, but one CollectionDataType can correspond to many Parameters
		require absence of pcm::CollectionDataType corresponding to umlProperty tagged with TagLiterals.COLLECTION_DATATYPE__PROPERTY
	}
	action {
		add correspondence between pcmCollectionType and umlProperty tagged with TagLiterals.COLLECTION_DATATYPE__PROPERTY
	}
}
