import org.eclipse.uml2.uml.Interface
import tools.vitruv.applications.pcmumlclass.TagLiterals

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize the parent interface reference of pcm::OperationInterface
//	with the generalizations of its corresponding uml::Interface (in the contracts uml::Package corresponding to a pcm::Repository).
//
//	Related files: 
//		PcmInterface.reactions
//		UmlInterface.reactions
//		InterfaceConceptTest

reactions: umlInterfaceGeneralizationReactions
in reaction to changes in UML
execute actions in PCM


reaction InterfaceGeneralizationAdded {
	after element uml::Generalization inserted in uml::Interface[generalization]
	with affectedEObject.generalizations.contains(newValue) //validity check
	call addParentInterface(affectedEObject, newValue.general)
}

routine addParentInterface(uml::Interface umlInterface, uml::Classifier umlNewParent) {
	match {
		val pcmInterface = retrieve pcm::OperationInterface corresponding to umlInterface tagged with TagLiterals.INTERFACE_TO_INTERFACE
		val pcmNewParent = retrieve pcm::OperationInterface corresponding to umlNewParent tagged with TagLiterals.INTERFACE_TO_INTERFACE
	}
	action {
		execute {
			val isAlreadyParent = pcmInterface.parentInterfaces__Interface.contains(pcmNewParent) 
			if (!isAlreadyParent) {
				pcmInterface.parentInterfaces__Interface += pcmNewParent
			}
		}
	}
}

reaction InterfaceGeneralizationRemoved {
	after element uml::Generalization removed from uml::Interface[generalization]
	with !affectedEObject.generalizations.contains(oldValue) //validity check
	call removeParentInterface(affectedEObject, oldValue.general)
}

routine removeParentInterface(uml::Interface umlInterface, uml::Classifier umlOldParent) {
	match {
		val pcmInterface = retrieve pcm::OperationInterface corresponding to umlInterface tagged with TagLiterals.INTERFACE_TO_INTERFACE
		val pcmOldParent = retrieve pcm::OperationInterface corresponding to umlOldParent tagged with TagLiterals.INTERFACE_TO_INTERFACE
	}
	action {
		execute {
			if (pcmInterface.parentInterfaces__Interface.contains(pcmOldParent))
				pcmInterface.parentInterfaces__Interface -= pcmOldParent
		}
	}
}

reaction ParentInterfaceReplaced {
	after element replaced at uml::Generalization[general]
	with affectedEObject.specific instanceof Interface
//	with affectedEObject.general === newValue // delay validity check to ensure that the old parent interface is removed
	call replaceParentInterface(affectedEObject, newValue, oldValue)
}

routine replaceParentInterface(uml::Generalization gen, uml::Classifier newParent, uml::Classifier oldParent) {
	match {
		val pcmInterface = retrieve pcm::OperationInterface corresponding to gen.specific tagged with TagLiterals.INTERFACE_TO_INTERFACE
	}
	action {
		call {
			if (oldParent === newParent) return; //nothing to do
			
			removeParentInterface(gen.specific as Interface, oldParent)
			if (gen.general === newParent) { // delayed validity check
				addParentInterface(gen.specific as Interface, newParent)
			}
		}
	}
}

