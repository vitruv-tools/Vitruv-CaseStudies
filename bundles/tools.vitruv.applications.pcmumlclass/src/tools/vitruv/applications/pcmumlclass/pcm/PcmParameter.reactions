import tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper
import tools.vitruv.applications.pcmumlclass.TagLiterals

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::Parameter in an pcm::OperationSignature (regular Parameter)
//	with an uml::Parameter in an uml::Operation corresponding to the signature.
//
//	Related files:
//		PcmDataTypePropagation.reactions,
//		UmlRegularParameter.reactions, UmlReturnAndRegularParameterType.reactions
//		ParameterConceptTest

reactions: pcmParameterReactions
in reaction to changes in PCM
execute actions in UML
  
import routines pcmDataTypePropagationReactions using qualified names

reaction ParameterInsertedInSignature {
	after element pcm::Parameter inserted in pcm::OperationSignature[parameters__OperationSignature]
	with affectedEObject.parameters__OperationSignature.contains(newValue)
	call insertCorrespondingRegularParameter(newValue, affectedEObject)
}

routine insertCorrespondingRegularParameter(pcm::Parameter pcmParameter, pcm::OperationSignature pcmSignature) {
	action {
		call detectOrCreateRegularParameterCandidate(pcmParameter, pcmSignature)
		call moveCorrespondingRegularParameter(pcmParameter, pcmSignature)
		
	}
}

routine detectOrCreateRegularParameterCandidate(pcm::Parameter pcmParam, pcm::OperationSignature pcmSignature) {
	match {
		val umlOperation = retrieve uml::Operation corresponding to pcmSignature tagged with TagLiterals.SIGNATURE__OPERATION
		val umlParam = retrieve optional uml::Parameter corresponding to pcmParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
	action {
		call {
			if (!umlParam.isPresent) {
				val umlParamCandidate = umlOperation.ownedParameters.findFirst[it.name == pcmParam.parameterName]
				if (umlParamCandidate !== null) {
					addCorrespondenceForExistingRegularParameter(pcmParam, umlParamCandidate)
				} else {
					createCorrespondingRegularParameter(pcmParam, pcmSignature)
				}
			}
		}
	}
}

routine addCorrespondenceForExistingRegularParameter(pcm::Parameter pcmParam, uml::Parameter umlParam) {
	match {
		require absence of uml::Parameter corresponding to pcmParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
		require absence of pcm::Parameter corresponding to umlParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
	action {
		add correspondence between pcmParam and umlParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
}

routine createCorrespondingRegularParameter(pcm::Parameter pcmParam, pcm::OperationSignature pcmSignature) {
	match {
		val umlOperation = retrieve uml::Operation corresponding to pcmSignature tagged with TagLiterals.SIGNATURE__OPERATION
		require absence of uml::Parameter corresponding to pcmParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
	action {
		val umlParam = create uml::Parameter and initialize{
			umlParam.name = pcmParam.parameterName
		}
		add correspondence between pcmParam and umlParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
		call changeDirectionOfCorrespondingRegularParameter(pcmParam)
		call changeTypeOfCorrespondingRegularParameter(pcmParam, pcmParam.dataType__Parameter)
	}
}

routine moveCorrespondingRegularParameter(pcm::Parameter pcmParam, pcm::OperationSignature pcmSignature) {
	match {
		val umlOperation = retrieve asserted uml::Operation corresponding to pcmSignature tagged with TagLiterals.SIGNATURE__OPERATION
		val umlParameter = retrieve asserted uml::Parameter corresponding to pcmParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
	action {
		update umlOperation {
			umlOperation.ownedParameters += umlParameter
		}
	}
}

reaction ParameterRemovedFromSignature {
	after element pcm::Parameter removed from pcm::OperationSignature[parameters__OperationSignature]
	with !affectedEObject.parameters__OperationSignature.contains(oldValue)
	call removeCorrespondingRegularParameter(oldValue, affectedEObject)
}

routine removeCorrespondingRegularParameter(pcm::Parameter pcmParam, pcm::OperationSignature pcmSignature) {
	match {
		val umlOperation = retrieve uml::Operation corresponding to pcmSignature tagged with TagLiterals.SIGNATURE__OPERATION
		val umlParameter = retrieve uml::Parameter corresponding to pcmParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
	action {
		update umlOperation {
			umlOperation.ownedParameters -= umlParameter
		}
	}
}

reaction ParameterDeletedFromSignature {
	after element pcm::Parameter deleted
	call deleteCorrespondingRegularParameter(affectedEObject)
}

routine deleteCorrespondingRegularParameter(pcm::Parameter pcmParam) {
	match {
		val umlParameter = retrieve uml::Parameter corresponding to pcmParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
	action {
		remove correspondence between pcmParam and umlParameter tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
		delete umlParameter
	}
}

reaction ParameterRenamed {
	after attribute replaced at pcm::Parameter[parameterName]
	with affectedEObject.parameterName == newValue
	call renameCorrespondingRegularParameter(affectedEObject, newValue)
}

routine renameCorrespondingRegularParameter(pcm::Parameter pcmParam, String newName) {
	match {
		val umlParam = retrieve uml::Parameter corresponding to pcmParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
	action {
		update umlParam {
			umlParam.name = newName
		}
	}
}

reaction ParameterModifierChanged {
	after attribute replaced at pcm::Parameter[modifier__Parameter]
	with affectedEObject.modifier__Parameter === newValue
	call changeDirectionOfCorrespondingRegularParameter(affectedEObject)
}

// pcm::ParameterModifier import can't be resolved for some reason -> retrieve from element
routine changeDirectionOfCorrespondingRegularParameter(pcm::Parameter pcmParam) {
	match {
		val umlParam = retrieve uml::Parameter corresponding to pcmParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
	action {
		update umlParam {
			umlParam.direction = PcmUmlClassHelper.getMatchingParameterDirection(pcmParam.modifier__Parameter)
		}
	}
}

reaction ParameterTypeChanged {
	after element pcm::DataType replaced at pcm::Parameter[dataType__Parameter]
	with affectedEObject.dataType__Parameter === newValue
	call changeTypeOfCorrespondingRegularParameter(affectedEObject, newValue)
}

routine changeTypeOfCorrespondingRegularParameter(pcm::Parameter pcmParam, pcm::DataType pcmDataType) {
	match {
		val umlParam = retrieve uml::Parameter corresponding to pcmParam tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
	}
	action {
		call pcmDataTypePropagationReactions.setUmlParameterType(pcmDataType, umlParam)
	}
}

