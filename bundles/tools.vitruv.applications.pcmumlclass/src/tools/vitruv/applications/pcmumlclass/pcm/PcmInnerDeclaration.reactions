import tools.vitruv.applications.pcmumlclass.TagLiterals

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::InnerDeclaration with its corresponding uml::Property.
//
//	Related files:
//		PcmDataTypePropagation.reactions,
//		UmlInnerDeclarationProperty.reactions
//		AttributeConceptTest

reactions: pcmInnerDeclarationReactions
in reaction to changes in PCM
execute actions in UML
 
import routines pcmDataTypePropagationReactions using qualified names

reaction InnerDeclarationInserted {
	after element pcm::InnerDeclaration inserted in pcm::CompositeDataType[innerDeclaration_CompositeDataType]
	with affectedEObject.innerDeclaration_CompositeDataType.contains(newValue)
	call insertCorrespondingAttribute(newValue, affectedEObject)
}

routine insertCorrespondingAttribute(pcm::InnerDeclaration pcmAttribute, pcm::CompositeDataType pcmComposite) {
	action {
		call detectOrCreateCorrespondingAttribute(pcmAttribute, pcmComposite)
		call moveCorrespondingAttribute(pcmAttribute, pcmComposite)
	}
}

routine detectOrCreateCorrespondingAttribute(pcm::InnerDeclaration pcmAttribute, pcm::CompositeDataType pcmComposite) {
	match{
		val umlComposite = retrieve uml::Class corresponding to pcmComposite tagged with TagLiterals.COMPOSITE_DATATYPE__CLASS
		val umlAttribute = retrieve optional uml::Property corresponding to pcmAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		call {
			if (!umlAttribute.isPresent) {
				val umlAttributeCandidate = umlComposite.ownedAttributes.findFirst[it.name == pcmAttribute.entityName]
				if (umlAttributeCandidate !== null) {
					addCorrespondenceForExistingAttribute(pcmAttribute, umlAttributeCandidate)
				} else {
					createCorrespondingAttribute(pcmAttribute, pcmComposite)
				}
			}
		}
	}
}

routine addCorrespondenceForExistingAttribute(pcm::InnerDeclaration pcmAttribute, uml::Property umlAttribute) {
	match {
		require absence of uml::Property corresponding to pcmAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
		require absence of pcm::InnerDeclaration corresponding to umlAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		add correspondence between pcmAttribute and umlAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
}

routine createCorrespondingAttribute(pcm::InnerDeclaration pcmAttribute, pcm::CompositeDataType pcmComposite) {
	match {
		val umlComposite = retrieve uml::Class corresponding to pcmComposite tagged with TagLiterals.COMPOSITE_DATATYPE__CLASS
		require absence of uml::Property corresponding to pcmAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		val umlAttribute = create uml::Property and initialize {
			umlAttribute.name = pcmAttribute.entityName
		}
		add correspondence between pcmAttribute and umlAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
		call changeTypeOfCorrespondingAttribute(pcmAttribute, pcmAttribute.datatype_InnerDeclaration)
	}
}

routine moveCorrespondingAttribute(pcm::InnerDeclaration pcmAttribute, pcm::CompositeDataType pcmComposite) {
	match {
		val umlComposite = retrieve uml::Class corresponding to pcmComposite tagged with TagLiterals.COMPOSITE_DATATYPE__CLASS
		val umlAttribute = retrieve uml::Property corresponding to pcmAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		update umlComposite {
			umlComposite.ownedAttributes += umlAttribute
		}
	}
}

reaction InnerDeclarationRemoved {
	after element pcm::InnerDeclaration removed from pcm::CompositeDataType[innerDeclaration_CompositeDataType]
	with !affectedEObject.innerDeclaration_CompositeDataType.contains(oldValue)
	call removeCorrespondingAttribute(oldValue, affectedEObject)
}

routine removeCorrespondingAttribute(pcm::InnerDeclaration pcmAttribute, pcm::CompositeDataType pcmComposite) {
	match {
		val umlComposite = retrieve uml::Class corresponding to pcmComposite tagged with TagLiterals.COMPOSITE_DATATYPE__CLASS
		val umlAttribute = retrieve uml::Property corresponding to pcmAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		update umlComposite {
			umlComposite.ownedAttributes -= umlAttribute
		}
	}
}

reaction InnerDeclarationDeleted {
	after element pcm::InnerDeclaration deleted
	call deleteCorrespondingAttribute(affectedEObject)
}

routine deleteCorrespondingAttribute(pcm::InnerDeclaration pcmAttribute) {
	match {
		val umlAttribute = retrieve uml::Property corresponding to pcmAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		remove correspondence between pcmAttribute and umlAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
		delete umlAttribute
	}
}

reaction InnerDeclarationNameChanged {
	after attribute replaced at pcm::InnerDeclaration[entityName]
	with affectedEObject.entityName == newValue
	call changeNameOfCorrespondingAttribute(affectedEObject, newValue)
}

routine changeNameOfCorrespondingAttribute(pcm::InnerDeclaration pcmAttribute, String newName) {
	match {
		val umlAttribute = retrieve uml::Property corresponding to pcmAttribute tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		update umlAttribute {
			umlAttribute.name = newName
		}
	}
}

reaction InnerDeclarationTypeChanged {
	after element pcm::DataType replaced at pcm::InnerDeclaration[datatype_InnerDeclaration]
	with affectedEObject.datatype_InnerDeclaration === newValue 
		&& newValue != oldValue
	call changeTypeOfCorrespondingAttribute(affectedEObject, newValue)
}

routine changeTypeOfCorrespondingAttribute(pcm::InnerDeclaration pcmInnerDeclaration, pcm::DataType pcmDataType) {
	match {
		val umlProperty = retrieve uml::Property corresponding to pcmInnerDeclaration tagged with TagLiterals.INNER_DECLARATION__PROPERTY
	}
	action {
		call pcmDataTypePropagationReactions.setUmlPropertyType(pcmDataType, umlProperty)
	}
}

