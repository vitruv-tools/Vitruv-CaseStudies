import org.eclipse.uml2.uml.ParameterDirectionKind
import org.emftext.language.java.types.TypesFactory
import org.eclipse.emf.ecore.util.EcoreUtil
import static tools.vitruv.applications.umljava.uml2java.UmlToJavaHelper.*
import static extension tools.vitruv.applications.umljava.util.java.JavaModifierUtil.*
import org.eclipse.uml2.uml.VisibilityKind

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: umlToJavaMethod
in reaction to changes in UML
execute actions inJava

//===========================================
//=========================================== Method
//===========================================


reaction UmlMethodCreated {
    after element uml::Operation created and inserted in uml::Class[ownedOperation]
    call {
        createJavaMethod(affectedEObject, newValue)       
    }
}
//We need separate Reactions for Class and Enums, because they don't have a common
//superClass for "having ownedOperation"
reaction UmlMethodCreatedInDataType {
    after element uml::Operation created and inserted in uml::DataType[ownedOperation]
    call {
        createJavaMethod(affectedEObject, newValue)       
    }
}
routine createJavaMethod(uml::Classifier uClassifier, uml::Operation uOperation) {
    action {
        call {
            if (uClassifier.name.equals(uOperation.name)) {
                createJavaConstructor(uClassifier, uOperation)
            } else if (uClassifier instanceof org.eclipse.uml2.uml.Class
                || uClassifier instanceof org.eclipse.uml2.uml.DataType) {
                createJavaClassMethod(uClassifier, uOperation)
            } else if (uClassifier instanceof org.eclipse.uml2.uml.Interface) {
                createJavaInterfaceMethod(uClassifier, uOperation)
            } else {
                logger.warn("Invalid creation of " + uOperation + ", containing UML-Classifier is neither a Class, nor an Interface nor a DataType")
            }
        }
    }
}
routine createJavaClassMethod(uml::Classifier uClassifier, uml::Operation uOperation) {
    match {
        val jClassifier = retrieve java::ConcreteClassifier corresponding to uClassifier
        val customTypeClass = retrieve optional java::Class corresponding to uOperation.type
    }
    action {
        val javaMethod = create java::ClassMethod and initialize {
            javaMethod.name = uOperation.name;
            setJavaVisibility(javaMethod, uOperation.visibility)
            javaMethod.typeReference = createTypeReferenceAndUpdateImport(uOperation.type, customTypeClass, jClassifier.getContainingCompilationUnit, userInteracting)
        }
        update jClassifier {
            jClassifier.members += javaMethod;
        }
        add correspondence between uOperation and javaMethod
    }
}

routine createJavaConstructor(uml::Classifier uClassifier, uml::Operation uOperation) {
    match {
        val jClassifier = retrieve java::ConcreteClassifier corresponding to uClassifier
    }
    action {
        val jConstructor = create java::Constructor and initialize {
            jConstructor.name = uOperation.name;
            setJavaVisibility(jConstructor, uOperation.visibility)
        }
        update jClassifier {
            jClassifier.members += jConstructor;
        }
        add correspondence between uOperation and jConstructor
    }
}


reaction UmlClassMethodDeleted {
    after element uml::Operation deleted and removed from uml::Class[ownedOperation]
    call deleteJavaMethod(oldValue)
}
//uml::Interface and uml::Class and uml::DataType dont have a common superClass for "having ownedOperation",
//so we need separate reactions
reaction UmlInterfaceMethodDeleted {
    after element uml::Operation deleted and removed from uml::Interface[ownedOperation]
    call deleteJavaMethod(oldValue)
}
//uml::Enumeration is a uml::DataType
reaction UmlDataTypeMethodDeleted {
    after element uml::Operation deleted and removed from uml::DataType[ownedOperation]
    call deleteJavaMethod(oldValue)
}

routine deleteJavaMethod(uml::Operation uOperation) {
    match {
        val jMeth = retrieve java::Method corresponding to uOperation
    }
    action {
        delete jMeth
    }
}

reaction UmlMethodReturnTypeChanged {
    after element uml::Type replaced at uml::Parameter[type]
    with affectedEObject.direction == ParameterDirectionKind.RETURN_LITERAL
    call setJavaMethodReturnType(affectedEObject.operation)
}

routine setJavaMethodReturnType(uml::Operation uOperation) {
    match {
        val javaMethod = retrieve java::Method corresponding to uOperation
        val returnType = retrieve optional java::Class corresponding to uOperation.type
    }
    action {
        update javaMethod {
            javaMethod.typeReference = createTypeReferenceAndUpdateImport(uOperation.type, returnType, javaMethod.getContainingCompilationUnit, userInteracting)
        }
    }
}

//uml::Feature defines static
reaction UmlFeatureMadeStatic {
    after attribute replaced at uml::Feature[isStatic]
    call setStatic(affectedEObject)
}

routine setStatic(uml::Feature uFeat) {
    match {
        val jMod = retrieve java::AnnotableAndModifiable corresponding to uFeat
    }
    action {
        val staticMod = create java::Static
        update jMod {
            jMod.static = uFeat.isStatic
        }
    }
}

reaction UmlMethodMadeAbstract {
    after attribute replaced at uml::Operation[isAbstract] 
    call setJavaMethodAbstract(affectedEObject)
}

routine setJavaMethodAbstract(uml::Operation uOperation) {
    match {
        val javaClass = retrieve java::Class corresponding to uOperation.class_
        val javaMethod = retrieve java::ClassMethod corresponding to uOperation
    }
    action {
        update javaMethod {
            javaMethod.abstract =  uOperation.abstract
        }
    }    
}

reaction UmlInterfaceMethodCreated {
    after element uml::Operation created and inserted in uml::Interface[ownedOperation]
    call createJavaMethod(affectedEObject, newValue)
}

routine createJavaInterfaceMethod(uml::Interface uInterface, uml::Operation uOperation) {
    match {
        val jInterface = retrieve java::Interface corresponding to uInterface
        val customTypeClass = retrieve optional java::Class corresponding to uOperation.type
    }
    action {
        val javaMethod = create java::InterfaceMethod and initialize {
            javaMethod.name = uOperation.name;
            javaMethod.typeReference = createTypeReferenceAndUpdateImport(uOperation.type, customTypeClass, jInterface.getContainingCompilationUnit, userInteracting)
            javaMethod.makePublic
        }
        add correspondence between uOperation and javaMethod
        update jInterface {
            jInterface.members += javaMethod;
        }
    }
}

reaction UmlMethodMadeFinal {
    after attribute replaced at uml::Operation[isLeaf]
    with !(affectedEObject.class_ instanceof org.eclipse.uml2.uml.Interface)
    call setJavaMethodFinal(affectedEObject, newValue)
}

routine setJavaMethodFinal(uml::Operation uOperation, Boolean isFinal) {
    match {
        val jMethod = retrieve java::ClassMethod corresponding to uOperation
    }
    action {
        update jMethod {
            jMethod.final = isFinal
        }
    }
}


//===========================================
//=========================================== NamedElement
//===========================================


reaction UmlElementVisibilityChanged {
    after attribute replaced at uml::NamedElement[visibility]
    with !(affectedEObject.eContainer instanceof org.eclipse.uml2.uml.Interface)
    call changeJavaElementVisibility(affectedEObject)
}

routine changeJavaElementVisibility(uml::NamedElement uElem) {
    match {
        val jElem = retrieve java::AnnotableAndModifiable corresponding to uElem
    }
    action {
        update jElem {
            setJavaVisibility(jElem, uElem.visibility);
        }
    }
}

reaction UmlNamedElementRenamed{
    after attribute replaced at uml::NamedElement[name] 
    with !(affectedEObject instanceof org.eclipse.uml2.uml.Classifier)
    && !(affectedEObject instanceof org.eclipse.uml2.uml.Property)
    && !(affectedEObject instanceof org.eclipse.uml2.uml.Package)
    call renameJavaNamedElement(affectedEObject, newValue)
}

routine renameJavaNamedElement(uml::NamedElement uElem, String name) {
    match {
        val jElem = retrieve java::NamedElement corresponding to uElem
    }
    action {
        update jElem {
            jElem.name = name
        }
    }
}



//===========================================
//=========================================== Parameter
//===========================================


reaction UmlParameterCreated {
    after element uml::Parameter created and inserted in uml::Operation[ownedParameter]
    with newValue.direction == ParameterDirectionKind.IN_LITERAL && newValue.name !== null
    call createJavaParameter(affectedEObject, newValue)

}

routine createJavaParameter(uml::Operation uMeth, uml::Parameter umlParam) {
    match {
        val javaMethod = retrieve java::Parametrizable corresponding to uMeth
        val customTypeClass = retrieve optional java::Class corresponding to umlParam.type
    }
    action {
        val javaParam = create java::OrdinaryParameter and initialize {
            javaParam.name = umlParam.name;
            javaParam.typeReference = createTypeReferenceAndUpdateImport(umlParam.type, customTypeClass, javaMethod.getContainingCompilationUnit, userInteracting)
        }
        add correspondence between javaParam and umlParam
        update javaMethod {
            javaMethod.parameters += javaParam;
        }
    }
}

reaction UmlParameterDeleted {
    after element uml::Parameter deleted and removed from uml::Operation[ownedParameter]
    with oldValue.direction == ParameterDirectionKind.IN_LITERAL
    call deleteJavaParameter(oldValue)
}

routine deleteJavaParameter(uml::Parameter uParam) {
    match {
        val jParam = retrieve java::OrdinaryParameter corresponding to uParam
    }
    action {
        delete jParam
    }
}

reaction UmlParameterTypeChanged {
    after element uml::Type replaced at uml::Parameter[type]
    with affectedEObject.direction == ParameterDirectionKind.IN_LITERAL
    call  changeJavaParameterType(affectedEObject, newValue)
}

routine changeJavaParameterType(uml::Parameter uParam, uml::Type uType) {
    match {
        val jParam = retrieve java::OrdinaryParameter corresponding to uParam
        val customClass = retrieve optional java::Class corresponding to uType
    }
    action {
        update jParam {
            jParam.typeReference = createTypeReferenceAndUpdateImport(uType, customClass, jParam.getContainingCompilationUnit, userInteracting)
        }
    }
}

reaction UmlParameterDirectionChanged {
    after attribute replaced at uml::Parameter[direction]
    with (newValue == ParameterDirectionKind.RETURN_LITERAL)
    || (newValue == ParameterDirectionKind.IN_LITERAL)
    call adaptJavaParametertoDirectionChange(affectedEObject.operation, affectedEObject, oldValue, newValue)
}

routine adaptJavaParametertoDirectionChange(uml::Operation uOperation, uml::Parameter uParam, plain ParameterDirectionKind as oldDirection,
    plain ParameterDirectionKind as newDirection) {
    match {
        val jMethod = retrieve java::Method corresponding to uOperation
        val jParam = retrieve optional java::OrdinaryParameter corresponding to uParam
        val customTypeClass = retrieve optional java::Class corresponding to uParam.type
    }
    action {
        update jMethod {
            if (newDirection == ParameterDirectionKind.RETURN_LITERAL) {
                jMethod.typeReference = createTypeReferenceAndUpdateImport(uParam.type, customTypeClass, jMethod.getContainingCompilationUnit, userInteracting)
            } else if (oldDirection == ParameterDirectionKind.RETURN_LITERAL) {
                jMethod.typeReference = TypesFactory.eINSTANCE.createVoid
            }
        }
        call {
            if (newDirection == ParameterDirectionKind.RETURN_LITERAL && jParam.present) {
                EcoreUtil.remove(jParam.get)
            } else if (newDirection == ParameterDirectionKind.IN_LITERAL && jParam === null) {
                createJavaParameter(uOperation, uParam)
            }
        }
    }
}

//===========================================
//=========================================== Unsupported
//===========================================

reaction UmlParameterDirectionKindChangedInvalid {
    after attribute replaced at uml::Parameter[direction]
    with (newValue !== ParameterDirectionKind.RETURN_LITERAL)
    && (newValue !== ParameterDirectionKind.IN_LITERAL)
    call showMessage(userInteracting, "The ParameterDirectionKind " + newValue + " is not supported")
}

reaction UmlInterfaceMethodVisibilityChanged {
    after attribute replaced at uml::Operation[visibility]
    with (affectedEObject.eContainer instanceof org.eclipse.uml2.uml.Interface)
    && newValue != VisibilityKind.PUBLIC_LITERAL
    call showMessage(userInteracting, "Non-public operations in interface are not valid. Please set " + affectedEObject + " to public")
}

reaction UmlInterfaceMethodMadeFinal {
    after attribute replaced at uml::Operation[isLeaf]
    with affectedEObject.class_ instanceof org.eclipse.uml2.uml.Interface
    call showMessage(userInteracting, "Final Operations in Interfaces are not supported. Please undo it: " + affectedEObject)
}
