import org.eclipse.emf.ecore.util.EcoreUtil
import org.emftext.language.java.classifiers.Class
import org.emftext.language.java.classifiers.Interface
import org.emftext.language.java.members.Constructor
import org.emftext.language.java.modifiers.ModifiersFactory
import org.palladiosimulator.pcm.core.composition.AssemblyContext
import org.palladiosimulator.pcm.repository.BasicComponent
import org.palladiosimulator.pcm.system.System
import tools.vitruv.framework.userinteraction.UserInteractionOptions.WindowModality

import static tools.vitruv.applications.pcmjava.depinjecttransformations.pcm2java.PcmJamoppUtilsGuice.*
import static tools.vitruv.applications.pcmjava.util.pcm2java.Pcm2JavaHelper.*
import static tools.vitruv.domains.java.util.JavaModificationUtil.*
import static tools.vitruv.applications.util.temporary.java.JavaTypeUtil.hasSameTargetReference

import static extension edu.kit.ipd.sdq.commons.util.java.lang.IterableUtil.*
import static extension tools.vitruv.framework.^correspondence.CorrespondenceModelUtil.*

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: pcm2depInjectJava
in reaction to changes in pcm
execute actions in java

import pcm2javaCommon

// ################################################################################
// ############################# COMPOSED STRUCTURES ##############################

reaction pcm2javaCommon::AddedAssemblyContextToComposedStructure {
	after element pcm::AssemblyContext created and inserted in pcm::ComposedStructure[assemblyContexts__ComposedStructure]
		// depInject start
		with {
			// do not allow multiple assembly contexts for the same basic component
			val assemblyContexts = newValue.parentStructure__AssemblyContext.assemblyContexts__ComposedStructure

			val component = newValue.encapsulatedComponent__AssemblyContext
			for (AssemblyContext ac : assemblyContexts) {
				// TODO: sometimes assembly context seems to be in the list before calling its createEObject??
				if (ac != newValue && ac.encapsulatedComponent__AssemblyContext.equals(component))
					//&& correspondenceModel.hasCorrespondences(ac)) {
				{
					//until correspondenceModel is available, we assume that each ac has a corresponding element
					val msg = "Assembly context for " + component.entityName +
					"already exists. Only one assembly context per basic component is allowed."
					userInteractor.notificationDialogBuilder.message(msg).windowModality(WindowModality.MODAL)
					   .startInteraction();
					return false
				}
			}
			return true
		}
		// depInject end
	call addAssemblyContextToComposedStructure(affectedEObject, newValue)
}

routine addAssemblyContextToComposedStructure(pcm::ComposedStructure composedStructure, pcm::AssemblyContext assemblyContext) {
	match {
		val compositeComponentJavaClass = retrieve java::Class corresponding to composedStructure
		val encapsulatedComponentJavaClass = retrieve java::Class corresponding to assemblyContext.encapsulatedComponent__AssemblyContext
	}
	action {
		// depInject: start
		val assemblyContextField = create java::Field
		val newConstructorCall = create java::NewConstructorCall
		add correspondence between assemblyContextField and assemblyContext
		add correspondence between newConstructorCall and assemblyContext
		call {
			val component = assemblyContext.encapsulatedComponent__AssemblyContext;
			val configureMethod = createConfigureMethodForAssemblyContext(assemblyContext, component, correspondenceModel, userInteractor);
			createBindCall(assemblyContext, component, configureMethod, correspondenceModel, userInteractor);
		}
		// depInject: end
	}
}

// depInject: added
reaction AddedConnector {
	after element pcm::AssemblyConnector created and inserted in pcm::ComposedStructure[connectors__ComposedStructure]
	call addConnector(newValue)
}

// depInject: added
routine addConnector(pcm::AssemblyConnector assemblyConnector) {
	action {
		call {
			val assemblyContext = assemblyConnector.providingAssemblyContext_AssemblyConnector;
			if (assemblyContext.encapsulatedComponent__AssemblyContext !== null) {
				createBindCallForConnector(assemblyContext, assemblyConnector, correspondenceModel, userInteractor);
			} else {
				//logger.warn("Repository component for assembly context " + assemblyContext.entityName + " is missing.");
			}
		}
	}
}

// depInject: added
reaction AddedProvidedDelegationConnector {
	after element pcm::ProvidedDelegationConnector created and inserted in pcm::ComposedStructure[connectors__ComposedStructure]
	call addedProvidedDelegationConnector(newValue, affectedEObject)
}

// depInject: added
routine addedProvidedDelegationConnector(pcm::ProvidedDelegationConnector providedDelegationConnector, pcm::ComposedStructure pcmSystem) {
	match {
		val configureMethod = retrieve java::ClassMethod corresponding to {
			val assemblyContext = providedDelegationConnector.assemblyContext_ProvidedDelegationConnector;
			return assemblyContext	;
		}
	}
	action {
		call {
			val opInterface = providedDelegationConnector.innerProvidedRole_ProvidedDelegationConnector.providedInterface__OperationProvidedRole;
			val systemClass = configureMethod.containingConcreteClassifier as Class;
			val jaMoPPInterface = correspondenceModel.getCorrespondingEObjects(opInterface, Interface).claimOne;
			val namespaceClassifierRef = createNamespaceClassifierReference(jaMoPPInterface);
			for (impl : systemClass.implements) {
				if (hasSameTargetReference(namespaceClassifierRef, impl)) {
					return;
				}
			}
			systemClass.implements += namespaceClassifierRef;
			val classifierImport = addImportToCompilationUnitOfClassifier(systemClass, jaMoPPInterface);
			correspondenceModel.createAndAddCorrespondence(#[pcmSystem], #[namespaceClassifierRef, classifierImport]);
		}
	}
}

// ######################################################
// ################ JAVA CLASS ROUTINES ##################

routine pcm2javaCommon::createJavaClass(pcm::NamedElement sourceElementMappedToClass, java::Package containingPackage, String className) {
	action {
		val javaClass = create java::Class and initialize {
			javaClass.name = className;
			javaClass.addModifier(ModifiersFactory.eINSTANCE.createPublic());
		}
		add correspondence between javaClass and sourceElementMappedToClass
		// depInject: start
		call {
			createCompilationUnit(sourceElementMappedToClass, javaClass, containingPackage);
			if (sourceElementMappedToClass instanceof BasicComponent) {
				//add constructor with inject to class
				ensureConstructorWithInjectAnnotation(javaClass);
			} else if (sourceElementMappedToClass instanceof System) {
				addGuiceModuleInterfaceToClass(javaClass);
				val method = addConfigureMethodToModule(javaClass);
				correspondenceModel.createAndAddCorrespondence(#[sourceElementMappedToClass], #[method]);
			}
		}
		// depInject: end
	}
}

// ####################################################
// ################ REQUIRED ROLES ####################

reaction pcm2javaCommon::CreatedRequiredRole {
	// depInject: slightly different trigger
	after element pcm::OperationRequiredRole created and inserted in pcm::InterfaceRequiringEntity[requiredRoles_InterfaceRequiringEntity]
	call addRequiredRole(newValue)
}

routine pcm2javaCommon::addRequiredRole(pcm::OperationRequiredRole requiredRole) {
	match {
		val requiredInterface = retrieve java::Interface corresponding to requiredRole.requiredInterface__OperationRequiredRole
		val javaClass = retrieve java::Class corresponding to requiredRole.requiringEntity_RequiredRole
	}
	action {
		add correspondence between javaClass and requiredRole
		// depInject: start
		val requiredInterfaceImport = create java::ClassifierImport
		val requiredInterfaceField = create java::Field
		call {
			val typeRef = createNamespaceClassifierReference(requiredInterface);
			addImportToCompilationUnitOfClassifier(requiredInterfaceImport, javaClass, requiredInterface);
			val requiredRoleName = requiredRole.entityName;
			createPrivateField(requiredInterfaceField, EcoreUtil.copy(typeRef), requiredRoleName);
			javaClass.members += requiredInterfaceField;
			ensureConstructorWithInjectAnnotation(javaClass)
			for (ctor : javaClass.members.filter(typeof(Constructor))) {
				addParameterAndAssignmentToConstructor(requiredRole, ctor, typeRef, requiredInterfaceField, requiredRoleName);
			}
		}
		add correspondence between requiredInterfaceImport and requiredRole
		add correspondence between requiredInterfaceField and requiredRole
		// depInject: end
	}
}

reaction pcm2javaCommon::DeletedRequiredRole {
	// depInject: slightly different trigger
	after element pcm::OperationRequiredRole deleted and removed from pcm::InterfaceRequiringEntity[requiredRoles_InterfaceRequiringEntity]
	call {
		removeRequiredRole(oldValue);
	}
}

// depInject: added
reaction ChangeOperationRequiredRoleEntity {
	after element replaced at pcm::OperationRequiredRole[requiringEntity_RequiredRole]
	call {
		val requiredRole = affectedEObject;
		removeRequiredRole(requiredRole);
		addRequiredRole(requiredRole);
	}
}

// ################################################################################
// ################################## PARAMETERS ##################################

routine pcm2javaCommon::createParameter(pcm::Parameter parameter) {
	// depInject: removed 'require absence of java::OrdinaryParameter corresponding to parameter'
	match {
		val interfaceMethod = retrieve java::InterfaceMethod corresponding to parameter.operationSignature__Parameter
		val javaParameterTypeClass = retrieve optional java::Class corresponding to parameter.dataType__Parameter
	}
	action {
		val javaParameter = create java::OrdinaryParameter and initialize {
			javaParameter.name = parameter.parameterName;
			val parameterTypeReference = createTypeReference(parameter.dataType__Parameter, javaParameterTypeClass);
			javaParameter.typeReference = parameterTypeReference;
		}
		add correspondence between javaParameter and parameter
		update interfaceMethod {
			interfaceMethod.parameters += javaParameter;
		}
	}
}

// ################################################################################
// ##################### RESOURCE DEMANDING INTERNAL BEHAVIOR #####################

//reaction CreatedResourceDemandingInternalBehavior {
//	after element pcm::ResourceDemandingInternalBehaviour created and inserted in pcm::BasicComponent[resourceDemandingInternalBehaviours__BasicComponent]
//	call createMethodForResourceDemandingBehavior(newValue)
//}
//
//routine createMethodForResourceDemandingBehavior(pcm::ResourceDemandingInternalBehaviour behavior) {
//	match {
//		val componentClass = retrieve java::Class corresponding to behavior.basicComponent_ResourceDemandingInternalBehaviour
//	}
//	action {
//		val javaMethod = create java::ClassMethod and initialize {
//			javaMethod.name = behavior.entityName;
//			javaMethod.typeReference = TypesFactory.eINSTANCE.createVoid;
//		}
//		add correspondence between javaMethod and behavior // depInject
//		update componentClass {
//			componentClass.members += javaMethod;
//		}
//	}
//}
//
//reaction RenameResourceDemandingInternalBehavior {
//	after attribute replaced at pcm::ResourceDemandingInternalBehaviour[entityName]
//	call renameMethodForResourceDemandingBehavior(affectedEObject)
//}
//
//routine renameMethodForResourceDemandingBehavior(pcm::ResourceDemandingInternalBehaviour behavior) {
//	match {
//		val javaMethod = retrieve java::ClassMethod corresponding to behavior
//	}
//	action {
//		update javaMethod {
//			javaMethod.name = behavior.entityName;
//		}
//	}
//}
//
//reaction DeletedDemandingInternalBehavior {
//	after element pcm::ResourceDemandingInternalBehaviour deleted and removed from pcm::BasicComponent[resourceDemandingInternalBehaviours__BasicComponent]
//	call deleteMethodForResourceDemandingBehavior(oldValue)
//}
//
//routine deleteMethodForResourceDemandingBehavior(pcm::ResourceDemandingInternalBehaviour behavior) {
//	match {
//		val javaMethod = retrieve java::ClassMethod corresponding to behavior
//	}
//	action {
//		delete javaMethod
//	}
//}
