import tools.vitruv.applications.pcmjava.util.java2pcm.TypeReferenceCorrespondenceHelper
import org.emftext.language.java.commons.NamedElement
import org.emftext.language.java.members.Field
import org.emftext.language.java.members.InterfaceMethod
import org.palladiosimulator.pcm.repository.Repository
import java.util.Collections
import org.palladiosimulator.pcm.repository.OperationInterface
import org.palladiosimulator.pcm.repository.OperationSignature
import tools.vitruv.framework.^correspondence.CorrespondenceModelUtil

import static tools.vitruv.applications.pcmjava.ejbtransformations.java2pcm.EjbJava2PcmHelper.*
import static extension tools.vitruv.applications.pcmjava.ejbtransformations.java2pcm.EjbAnnotationHelper.*
import static tools.vitruv.applications.util.temporary.java.JavaTypeUtil.getNormalizedClassifierFromTypeReference
import static tools.vitruv.applications.util.temporary.pcm.PcmParameterUtil.setParameterName
import static tools.vitruv.applications.util.temporary.pcm.PcmRepositoryUtil.getFirstRepository

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: ejbjava2pcm 
in reaction to changes in Java
execute actions in PCM

// ###################################################
// ################ create Repository for first package################
reaction CreatedFirstPackage {
	after element java::Package inserted as root 
	call createRepositoryForFirstPackage(newValue)
}

routine createRepositoryForFirstPackage(java::Package javaPackage) {
	match {
		check getFirstRepository(correspondenceModel) === null
	}
	action {
		val repository = create pcm::Repository and initialize {
			repository.setEntityName(javaPackage.name)
			persistProjectRelative(javaPackage, repository, "model/" + repository.entityName + ".repository")
		}
		add correspondence between repository and javaPackage
	}
}

// ###################################################
// ################ create Component from EJB class################
 
reaction CreatedClass {
	after element inserted in java::CompilationUnit[classifiers]
		with newValue.isEjbClass 	
	call {
		val Repository repo = getFirstRepository(correspondenceModel)
		createBasicComponent(repo, newValue);
	} 
}

reaction CreateClassAnnotation {
	after element inserted in java::Class[annotationsAndModifiers]
		with affectedEObject.isEjbClass 
	call {
		val Repository repo = getFirstRepository(correspondenceModel) 
		createBasicComponent(repo, affectedEObject as NamedElement)
	} 
}

routine createBasicComponent(pcm::Repository repo, java::NamedElement namedElement) {
	action {
		val basicComponent = create pcm::BasicComponent and initialize {
			basicComponent.entityName = namedElement.name;
		}
		add correspondence between basicComponent and namedElement
		update repo {
			repo.components__Repository += basicComponent;		
		}
	}
}
	
// ###################################################
// ################ create Interface from EJB interface################

reaction CreatedInterface {
	after element inserted in java::CompilationUnit[classifiers]
		with newValue.isEjbBuisnessInterface 
	call {
		val Repository repo = getFirstRepository(correspondenceModel)
		createOperationInterface(repo, newValue)
	}
}

reaction CreateInterfaceAnnotation {
	after element inserted in java::Interface[annotationsAndModifiers]
		with affectedEObject.isEjbBuisnessInterface
	call {
		val Repository repo = getFirstRepository(correspondenceModel)
		createOperationInterface(repo, affectedEObject as NamedElement)
	}
}

routine createOperationInterface(pcm::Repository repo, java::NamedElement namedElement) {
	action { 
		val operationInterface = create pcm::OperationInterface and initialize {
			operationInterface.entityName = namedElement.name;
		}
		add correspondence between operationInterface and namedElement
		update operationInterface {
			repo.interfaces__Repository += operationInterface;		
		}
	}
}

// ###################################################
// ################ create OperationRequiredRole from field################
reaction CreateAnnotationForField {
	after element inserted in java::Field[annotationsAndModifiers]
		with affectedEObject.hasEjbAnnotation
	call createdAnnotationForField(affectedEObject)
}
		
routine createdAnnotationForField(java::Field annotatedField) {
	match {
		val basicComponent = retrieve pcm::BasicComponent corresponding to annotatedField.containingConcreteClassifier
		//retrieve: pcm::OperationInterface as opInterface corresponding to affectedEObject 
	}
	action {
		call {
			val interfaceName = getNormalizedClassifierFromTypeReference(annotatedField.typeReference).name
			val opInterface = basicComponent.repository__RepositoryComponent.interfaces__Repository.filter(typeof(OperationInterface)).findFirst[it.entityName.equals(interfaceName)]
			createOperationRequiredRole(basicComponent, opInterface, annotatedField)
		}
	}
}

reaction CreateField { 
	after element inserted in java::Class[members]
		with newValue.hasEjbAnnotation
	call createdField(newValue as Field)
}

routine createdField(java::Field field) {
	match {
		val basicComponent = retrieve pcm::BasicComponent corresponding to field
		//retrieve: pcm::OperationInterface as opInterface corresponding to newValue
	}
	action {
		call {
			val interfaceName = getNormalizedClassifierFromTypeReference(field.typeReference).name
			val opInterface = basicComponent.repository__RepositoryComponent.interfaces__Repository.filter(typeof(OperationInterface)).findFirst[it.entityName.equals(interfaceName)]
			createOperationRequiredRole(basicComponent, opInterface, field)
		}
	}
}


routine createOperationRequiredRole(pcm::BasicComponent basicComponent, pcm::OperationInterface opInterface, java::Field field) {
	action { 
		val orr = create pcm::OperationRequiredRole and initialize {
			orr.requiringEntity_RequiredRole = basicComponent
			orr.requiredInterface__OperationRequiredRole = opInterface
			orr.entityName = basicComponent.entityName + "_requires_" + opInterface.entityName
		}
		add correspondence between orr and field 
	}
}

// ###################################################
// ################ create OperationProvidedRole from implements################
reaction CreateImplements {
	after element inserted in java::Class[implements]
	call createdImplements(affectedEObject, newValue)
}

routine createdImplements(java::Class clazz, java::TypeReference implementz) {
	match {
		val basicComponent = retrieve pcm::BasicComponent corresponding to clazz
		//retrieve: pcm::OperationInterface as opInterface corresponding to getClassifier(newValue) 
	}
	action {
		val opr = create pcm::OperationProvidedRole
		//add correspondence: opr, newValue
		update opr {
	    	val opInterface = basicComponent.repository__RepositoryComponent.interfaces__Repository.filter(typeof(OperationInterface)).
	    			findFirst[it.entityName.equals(getNormalizedClassifierFromTypeReference(implementz).name)]
	    	if (null !== opInterface){
				opr.providedInterface__OperationProvidedRole = opInterface
				opr.providingEntity_ProvidedRole = basicComponent
				opr.entityName = basicComponent.entityName + "_provides_" + opInterface.entityName
				correspondenceModel.createAndAddCorrespondence(Collections.singletonList(opr), Collections.singletonList(implementz))
			}
		}
	}
}

// ###################################################
// ################ create Signatures for interface methods################

reaction CreateInterfaceMethod {
	after element inserted in java::Interface[members]
		with newValue instanceof InterfaceMethod && affectedEObject.isEjbBuisnessInterface
	call createdInterfaceMethod(affectedEObject, newValue as InterfaceMethod)
}

routine createdInterfaceMethod(java::Interface interf, java::InterfaceMethod method) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to interf
	}
	action {
		call createOperationSignature(method, opInterface)
	}
}

routine createOperationSignature(java::InterfaceMethod interfaceMethod, pcm::OperationInterface opInterface) {
	action {
		val opSignature = create pcm::OperationSignature
		add correspondence between opSignature and interfaceMethod
		call {
			opSignature.entityName = interfaceMethod.name
			opInterface.signatures__OperationInterface += opSignature
			interfaceMethod.parameters.forEach[createPCMParameter(opSignature)]
			interfaceMethod.typeReference.createPCMReturnType(opSignature, interfaceMethod)
		}
	}
}

// #######################################################################
// ################ create Parameter for  parameter################		
reaction CreateParameterInInterfaceMethod {
	after element inserted in java::InterfaceMethod[parameters]
	call createdParameterInInterfaceMethod(affectedEObject, newValue)
}

routine createdParameterInInterfaceMethod(java::InterfaceMethod method, java::Parameter parameter) {
	match {
		val opSignature = retrieve pcm::OperationSignature corresponding to method
	}
	action {
		call createPCMParameter(parameter, opSignature)
	}
}

routine createPCMParameter(java::Parameter jaMoPPParam, pcm::OperationSignature opSignature) {
	action {
		val pcmParameter = create pcm::Parameter and initialize {
			setParameterName(pcmParameter, jaMoPPParam.name)
			pcmParameter.dataType__Parameter = TypeReferenceCorrespondenceHelper.getCorrespondingPCMDataTypeForTypeReference(jaMoPPParam.typeReference, 
				correspondenceModel, userInteractor, opSignature.interface__OperationSignature.repository__Interface, jaMoPPParam.arrayDimension)
		}
		update opSignature {
			opSignature.parameters__OperationSignature += pcmParameter
		}
		add correspondence between pcmParameter and jaMoPPParam
	}
}
	
// #######################################################################
// ################ create ReturnType for return type ################
reaction ReturnTypeCreated {
	after element replaced at java::InterfaceMethod[typeReference]
	call createdReturnType(affectedEObject, newValue)
}

routine createdReturnType(java::InterfaceMethod method, java::TypeReference type) {
	match {
		val opSignature = retrieve pcm::OperationSignature corresponding to method
	}
	action {
		call createPCMReturnType(type, opSignature, method)
	}
}

routine createPCMReturnType(java::TypeReference returnType, pcm::OperationSignature opSignature, java::Method javaMethod) {
	action {
		update opSignature {
			val pcmDataType = TypeReferenceCorrespondenceHelper.getCorrespondingPCMDataTypeForTypeReference(returnType, correspondenceModel, userInteractor, 
					opSignature.interface__OperationSignature.repository__Interface, javaMethod.arrayDimension
			)
			opSignature.returnType__OperationSignature = pcmDataType
		}
	}
}

// #######################################################################
// ################ create InnerDeclaration for field in datatype class################
reaction CreateFieldInDatatypeClass {
	after element inserted in java::Class[members]
		with newValue instanceof Field
	call createdFieldInDatatypeClass(affectedEObject, newValue as Field)
}

routine createdFieldInDatatypeClass(java::Class clazz, java::Field field) {
	match { 
		val compositeDataType = retrieve pcm::CompositeDataType corresponding to clazz
	}
	action {
		val innerDec = create pcm::InnerDeclaration and initialize {
			innerDec.datatype_InnerDeclaration = TypeReferenceCorrespondenceHelper.
					getCorrespondingPCMDataTypeForTypeReference(field.typeReference, correspondenceModel,
						userInteractor, compositeDataType.repository__DataType, field.arrayDimension)
			innerDec.entityName = field.name
		}
		add correspondence between innerDec and field
		update compositeDataType {
			compositeDataType.innerDeclaration_CompositeDataType += innerDec
		}
	}
}

// #############################################################################################
// ################ create SEFF for class method that overrides interface method################

reaction CreateClassMethodInEjbClass {
	after element java::ClassMethod inserted in java::Class[members]
		with affectedEObject.isEjbClass &&
	   		overridesInterfaceMethod(newValue, affectedEObject)
	call createdClassMethodInEjbClass(affectedEObject, newValue)
}

routine createdClassMethodInEjbClass(java::Class clazz, java::ClassMethod classMethod) {
	match {
		val basicComponent = retrieve pcm::BasicComponent corresponding to clazz
	}
	action {  
		call {
			val method = getOverridenInterfaceMethod(classMethod, clazz)
			val correspondingEObjects = CorrespondenceModelUtil.getCorrespondingEObjectsByType(correspondenceModel, method, OperationSignature)
			var OperationSignature opSignature = null
			if(!correspondingEObjects.nullOrEmpty){
				opSignature = correspondingEObjects.get(0)			
			}
			createSEFFForClassMethod(basicComponent, opSignature, classMethod)
		}
	}
}

routine createSEFFForClassMethod(pcm::BasicComponent basicComponent, pcm::OperationSignature opSignature, java::ClassMethod classMethod) {
	action {
		val seff = create pcm::ResourceDemandingSEFF and initialize {
			seff.describedService__SEFF = opSignature
		}
		add correspondence between seff and classMethod
		update basicComponent {
			basicComponent.serviceEffectSpecifications__BasicComponent += seff
		}	
	}
}
