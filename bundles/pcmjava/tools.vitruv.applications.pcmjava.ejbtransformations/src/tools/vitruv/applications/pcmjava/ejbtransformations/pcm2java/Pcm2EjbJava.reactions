import org.eclipse.emf.ecore.util.EcoreUtil
import org.emftext.language.java.modifiers.ModifiersFactory
import org.palladiosimulator.pcm.repository.BasicComponent
import org.palladiosimulator.pcm.repository.OperationInterface

import static tools.vitruv.applications.pcmjava.util.pcm2java.Pcm2JavaHelper.*

import static extension tools.vitruv.domains.java.util.JavaModificationUtil.*

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: pcm2EjbJava
in reaction to changes in PCM
execute actions in Java

import pcm2javaCommon

// ################################################################################
// ############################# COMPOSED STRUCTURES ##############################

// ejb: not needed here, overrides to replace with empty implementations

// ejb: cleared
reaction pcm2javaCommon::CreatedSystem {
	after element pcm::System created and inserted as root
	call { 
	}
}

// ejb: cleared
reaction pcm2javaCommon::DeletedSystem {
	after element pcm::System deleted and removed as root
	call {
	}
}

// ejb: cleared
reaction pcm2javaCommon::ChangedSystemName {
	after attribute replaced at pcm::System[entityName]
	call {
	}
}

// ejb: cleared
reaction pcm2javaCommon::AddedAssemblyContextToComposedStructure {
	after element pcm::AssemblyContext created and inserted in pcm::ComposedStructure[assemblyContexts__ComposedStructure]
	call {
	}
}

// #####################################################
// ################ COMPONENT REACTIONS ################

reaction pcm2javaCommon::CreatedComponent {
	// ejb: slightly different trigger
	after element pcm::BasicComponent created and inserted in pcm::Repository[components__Repository]
	call createComponentImplementation(newValue)
}

// #####################################################
// ################ INTERFACE REACTIONS ################

reaction pcm2javaCommon::RenamedInterface {
	// ejb: slightly different trigger
	after attribute replaced at pcm::Interface[entityName]
	call renameInterface(affectedEObject as OperationInterface)
}

// ######################################################
// ################ JAVA CLASS ROUTINES ##################

routine pcm2javaCommon::createJavaClass(pcm::NamedElement sourceElementMappedToClass, java::Package containingPackage, String className) {
	action {
		val javaClass = create java::Class and initialize {
			javaClass.name = className;
			javaClass.addModifier(ModifiersFactory.eINSTANCE.createPublic());
			// ejb start
			if (sourceElementMappedToClass instanceof BasicComponent) {
				addImportToClassFromString(javaClass, #["javax", "ejb"], "Stateless");
				javaClass.addAnnotationToAnnotableAndModifiable("Stateless");
			}
			// ejb end
		}
		add correspondence between javaClass and sourceElementMappedToClass
		call createCompilationUnit(sourceElementMappedToClass, javaClass, containingPackage)
	}
}

routine pcm2javaCommon::createJavaInterface(pcm::Interface pcmInterface, java::Package containingPackage) {
	action {
		val javaInterface = create java::Interface and initialize {
			javaInterface.name = pcmInterface.entityName;
			javaInterface.addModifier(ModifiersFactory.eINSTANCE.createPublic());
			// ejb start
			javaInterface.addAnnotationToAnnotableAndModifiable("Remote");
			addImportToClassFromString(javaInterface, #["javax", "ejb"], "Remote");
			// ejb end
		}
		add correspondence between javaInterface and pcmInterface
		call createCompilationUnit(pcmInterface, javaInterface, containingPackage)
	}
}

// ####################################################
// ################ PROVIDED ROLES ####################

// ejb: cleared
reaction pcm2javaCommon::DeletedProvidedRoleFromSystem {
	after element pcm::ProvidedRole deleted and removed from pcm::System[providedRoles_InterfaceProvidingEntity]
	call {
	}
}

// ####################################################
// ################ REQUIRED ROLES ####################

reaction pcm2javaCommon::CreatedRequiredRole {
	// ejb: slightly different trigger
	after element pcm::OperationRequiredRole created and inserted in pcm::InterfaceRequiringEntity[requiredRoles_InterfaceRequiringEntity]
	call addRequiredRole(newValue)
}

routine pcm2javaCommon::addRequiredRole(pcm::OperationRequiredRole requiredRole) {
	match {
		val requiredInterface = retrieve java::Interface corresponding to requiredRole.requiredInterface__OperationRequiredRole
		val javaClass = retrieve java::Class corresponding to requiredRole.requiringEntity_RequiredRole
	}
	action {
		val requiredInterfaceImport = create java::ClassifierImport and initialize {
			addImportToCompilationUnitOfClassifier(requiredInterfaceImport, javaClass, requiredInterface);
		}
		add correspondence between requiredInterfaceImport and requiredRole
		val requiredInterfaceField = create java::Field and initialize {
			val typeRef = createNamespaceClassifierReference(requiredInterface);
			val requiredRoleName = requiredRole.entityName;
			createPrivateField(requiredInterfaceField, EcoreUtil.copy(typeRef), requiredRoleName);
		}
		add correspondence between requiredInterfaceField and requiredRole
		// ejb start
		call {
			addImportToClassFromString(javaClass, #["javax", "ejb"], "EJB");
			requiredInterfaceField.addAnnotationToAnnotableAndModifiable("EJB");
			javaClass.members += requiredInterfaceField;
		}
		// ejb end
	}
}

reaction pcm2javaCommon::DeletedRequiredRole {
	// ejb: slightly different trigger
	after element pcm::OperationRequiredRole deleted and removed from pcm::InterfaceRequiringEntity[requiredRoles_InterfaceRequiringEntity]
	call {
		removeRequiredRole(oldValue);
	}
}

routine pcm2javaCommon::removeRequiredRole(pcm::RequiredRole requiredRole) {
	match {
		val requiredInterfaceImport = retrieve java::ClassifierImport corresponding to requiredRole
		val requiredInterfaceField = retrieve java::Field corresponding to requiredRole
		val javaClass = retrieve java::Class corresponding to requiredRole
	}
	action {
		delete requiredInterfaceImport
		delete requiredInterfaceField
		remove correspondence between javaClass and requiredRole
		// ejb: removed 'remove-parameter' code
	}
}

// ejb: added reaction
reaction ChangeOperationRequiredRoleEntity {
	after element replaced at pcm::OperationRequiredRole[requiringEntity_RequiredRole]
	call {
		val requiredRole = affectedEObject;
		removeRequiredRole(requiredRole);
		addRequiredRole(requiredRole);
	}
}

// ##########################################################
// ################ OPERATION SIGNATURES ####################

// ejb: cleared
reaction pcm2javaCommon::RenameOperationSignature {
	after attribute replaced at pcm::OperationSignature[entityName]
	call {
	}
}

// ################################################################################
// ################################## PARAMETERS ##################################

routine pcm2javaCommon::createParameter(pcm::Parameter parameter) {
	// ejb: removed 'require absence of java::OrdinaryParameter corresponding to parameter'
	match {
		val interfaceMethod = retrieve java::InterfaceMethod corresponding to parameter.operationSignature__Parameter
		val javaParameterTypeClass = retrieve optional java::Class corresponding to parameter.dataType__Parameter
	}
	action {
		val javaParameter = create java::OrdinaryParameter and initialize {
			javaParameter.name = parameter.parameterName;
			val parameterTypeReference = createTypeReference(parameter.dataType__Parameter, javaParameterTypeClass);
			javaParameter.typeReference = parameterTypeReference;
		}
		add correspondence between javaParameter and parameter
		update interfaceMethod {
			interfaceMethod.parameters += javaParameter;
		}
	}
}

// ################################################################################
// ##################### RESOURCE DEMANDING INTERNAL BEHAVIOR #####################

//reaction CreatedResourceDemandingInternalBehavior {
//	after element pcm::ResourceDemandingInternalBehaviour created and inserted in pcm::BasicComponent[resourceDemandingInternalBehaviours__BasicComponent]
//	call createMethodForResourceDemandingBehavior(newValue)
//}
//
//routine createMethodForResourceDemandingBehavior(pcm::ResourceDemandingInternalBehaviour behavior) {
//	match {
//		val componentClass = retrieve java::Class corresponding to behavior.basicComponent_ResourceDemandingInternalBehaviour
//	}
//	action {
//		val javaMethod = create java::ClassMethod and initialize {
//			javaMethod.name = behavior.entityName;
//			javaMethod.typeReference = TypesFactory.eINSTANCE.createVoid;
//		}
//		add correspondence between javaMethod and behavior // ejb
//		update componentClass {
//			componentClass.members += javaMethod;
//		}
//	}
//}
//
//reaction RenameResourceDemandingInternalBehavior {
//	after attribute replaced at pcm::ResourceDemandingInternalBehaviour[entityName]
//	call renameMethodForResourceDemandingBehavior(affectedEObject)
//}
//
//routine renameMethodForResourceDemandingBehavior(pcm::ResourceDemandingInternalBehaviour behavior) {
//	match {
//		val javaMethod = retrieve java::ClassMethod corresponding to behavior
//	}
//	action {
//		update javaMethod {
//			javaMethod.name = behavior.entityName;
//		}
//	}
//}
//
//reaction DeletedDemandingInternalBehavior {
//	after element pcm::ResourceDemandingInternalBehaviour deleted and removed from pcm::BasicComponent[resourceDemandingInternalBehaviours__BasicComponent]
//	call deleteMethodForResourceDemandingBehavior(oldValue)
//}
//
//routine deleteMethodForResourceDemandingBehavior(pcm::ResourceDemandingInternalBehaviour behavior) {
//	match {
//		val javaMethod = retrieve java::ClassMethod corresponding to behavior
//	}
//	action {
//		delete javaMethod
//	}
//}
