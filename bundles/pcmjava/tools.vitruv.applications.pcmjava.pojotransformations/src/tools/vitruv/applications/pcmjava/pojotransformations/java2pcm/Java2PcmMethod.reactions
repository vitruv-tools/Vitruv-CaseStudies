import org.palladiosimulator.pcm.repository.OperationProvidedRole
import org.emftext.language.java.classifiers.ConcreteClassifier

import static tools.vitruv.applications.util.temporary.java.JavaTypeUtil.*

import static extension edu.kit.ipd.sdq.commons.util.org.palladiosimulator.pcm.repository.ParameterUtil.*
import static extension tools.vitruv.applications.util.temporary.java.JavaMemberAndParameterUtil.hasSameSignature
import static extension tools.vitruv.applications.pcmjava.util.java2pcm.TypeReferenceCorrespondenceHelper.getDataTypeFromTypeReference
import static extension tools.vitruv.applications.pcmjava.util.java2pcm.TypeReferenceCorrespondenceHelper.getCorrespondingPCMDataTypeForTypeReference

import "http://www.emftext.org/java" as java 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: java2PcmMethod
in reaction to changes in Java
execute actions in PCM


// General:
reaction MemberRenamed {
	after attribute replaced at java::Member[name]
	with !(affectedEObject instanceof ConcreteClassifier) // avoid classes etc.
	call renameMember(affectedEObject)
}

routine renameMember(java::Member javaMember) {
	match {
		val pcmElement = retrieve pcm::NamedElement corresponding to javaMember}
	action {
		update pcmElement {
			pcmElement.entityName = javaMember.name
		}
	}
}

// Parameter:
reaction ParameterCreated {
	after element java::OrdinaryParameter inserted in java::Parametrizable[parameters]
	call {
		createParameter(newValue, affectedEObject)
	}
}

routine createParameter(java::OrdinaryParameter javaParameter, java::Parametrizable javaMethod) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to javaMethod
	}
	action {
		val pcmParameter = create pcm::Parameter
		call changeParameterName(javaParameter.name, javaParameter)
		call changeParameterType(javaParameter.typeReference, javaParameter)
		add correspondence between javaParameter and pcmParameter
		update operationSignature {
			operationSignature.parameters__OperationSignature += pcmParameter
		}
	}
}

//TODO changed Parameter doesn't work yet
reaction ParameterDeleted {
	after element java::OrdinaryParameter removed from java::Parametrizable[parameters]
	call {
		//oldValue has no correspondence element, but it should
		//this seems to be a bug. If fixed it should have a correspondence and work.
		deleteParameter(oldValue)
	}
}

routine deleteParameter(java::OrdinaryParameter javaParameter) {
	match {
		val pcmParameter = retrieve pcm::Parameter corresponding to javaParameter
	}
	action{
		delete pcmParameter
	}
}

/**
 * Need a special reaction, because Parameter is not a NamedElement.
 */
reaction ParameterNameChanged {
	after attribute replaced at java::Parameter[name]
	call changeParameterName(newValue, affectedEObject)
}

routine changeParameterName(String newName, java::Parameter javaParameter) {
	match {
		val pcmParameter = retrieve pcm::Parameter corresponding to javaParameter
	}
	action {
		update pcmParameter {
			pcmParameter.name = newName
		}
	}
}

reaction ParameterTypeChanged {
	after element replaced at java::Parameter[typeReference]
	call changeParameterType(newValue, affectedEObject)
}

routine changeParameterType(java::TypeReference newType, java::Parameter javaParameter) {
	match {
		val pcmParameter = retrieve pcm::Parameter corresponding to javaParameter
	}
	action {
		update pcmParameter {
			pcmParameter.dataType__Parameter = if (javaParameter.typeReference !== null) {
					javaParameter.typeReference.getDataTypeFromTypeReference(correspondenceModel, userInteractor, null)
				} else {
					null
				}
		}
	}
}

// Field:
/**
 * Check if Field has correspondence to CompositeDataType, ComposedProvidingRequiringEntity, 
 * OperationInterface or RepositoryComponent and react accordingly.
 */
reaction FieldCreated {
	after element java::Field inserted in java::Class[members]
	call {
		createInnerDeclaration(newValue.containingConcreteClassifier, newValue)
		val type = getNormalizedClassifierFromTypeReference(newValue.typeReference)
		fieldCreatedCorrespondingToOperationInterface(type, newValue)
		fieldCreatedCorrespondingToRepositoryComponent(type, newValue)
		createOrFindAssemblyContext(newValue.containingConcreteClassifier, newValue)
	}
}

routine createInnerDeclaration(java::ConcreteClassifier classifier, java::Field javaField) {
	match {
		val compositeDataType = retrieve pcm::CompositeDataType corresponding to classifier
	}
	action {
		val innerDeclaration = create pcm::InnerDeclaration and initialize {
			innerDeclaration.entityName = javaField.name
			innerDeclaration.datatype_InnerDeclaration = if (javaField.typeReference !== null) {
					javaField.typeReference.getDataTypeFromTypeReference(correspondenceModel, userInteractor, null)
				} else {
					null
				}
			innerDeclaration.compositeDataType_InnerDeclaration = compositeDataType
		}
		add correspondence between innerDeclaration and javaField
	}
}

routine createOrFindAssemblyContext(java::ConcreteClassifier classifier, java::Field javaField) {
    match {
        val composedProvidingRequiringEntity = retrieve pcm::ComposedProvidingRequiringEntity corresponding to classifier
        val repositoryComponent = retrieve pcm::RepositoryComponent corresponding to getClassifierFromTypeReference(javaField.typeReference)
        require absence of pcm::AssemblyContext corresponding to javaField
    }
    action {
        call {
            val pcmAssemblyContextCandidate = composedProvidingRequiringEntity.assemblyContexts__ComposedStructure.findFirst[entityName === javaField.name]
            if (pcmAssemblyContextCandidate === null) {
                createAssemblyContext(classifier, javaField)
            } else {
                addAssemblyContextCorrespondence(pcmAssemblyContextCandidate, javaField)
            }
        }
    }
}

routine createAssemblyContext(java::ConcreteClassifier classifier, java::Field javaField) {
	match {
		val composedProvidingRequiringEntity = retrieve pcm::ComposedProvidingRequiringEntity corresponding to classifier
		val repositoryComponent = retrieve pcm::RepositoryComponent corresponding to getClassifierFromTypeReference(javaField.typeReference)
	}
	action {
		val assemblyContext = create pcm::AssemblyContext and initialize {
			assemblyContext.entityName = javaField.name
			assemblyContext.encapsulatedComponent__AssemblyContext = repositoryComponent
			assemblyContext.parentStructure__AssemblyContext = composedProvidingRequiringEntity	
		}
		add correspondence between assemblyContext and javaField
	}
}

routine addAssemblyContextCorrespondence(pcm::AssemblyContext assemblyContext, java::Field javaField) {
    action {
        add correspondence between assemblyContext and javaField
    }
}

routine fieldCreatedCorrespondingToOperationInterface(java::Classifier classifier, java::Field javaField) {
	match {
		val correspondingInterface = retrieve pcm::OperationInterface corresponding to classifier
		val repositoryComponent = retrieve pcm::RepositoryComponent corresponding to javaField.containingConcreteClassifier
	}
	action {
		call {
			createOperationRequiredRoleCorrespondingToField(javaField, correspondingInterface, repositoryComponent)
		}
	}
}
routine fieldCreatedCorrespondingToRepositoryComponent(java::Classifier classifier, java::Field javaField) {
	match {
		val repositoryComponent = retrieve pcm::RepositoryComponent corresponding to classifier
		val concreteRepositoryComponent = retrieve pcm::RepositoryComponent corresponding to javaField.containingConcreteClassifier
	}
	action {
		call {
			var operationProvidedRoles = repositoryComponent.providedRoles_InterfaceProvidingEntity.filter(OperationProvidedRole)
			for (providedRole : operationProvidedRoles) {
				createOperationRequiredRoleCorrespondingToField(javaField, providedRole.providedInterface__OperationProvidedRole, concreteRepositoryComponent)
			}
		}
	}
}

routine createOperationRequiredRoleCorrespondingToField(java::Field javaField, pcm::OperationInterface operationInterface, pcm::RepositoryComponent repoComponent) {
	action {
		val operationRequiredRole = create pcm::OperationRequiredRole and initialize {
			operationRequiredRole.requiredInterface__OperationRequiredRole = operationInterface
			operationRequiredRole.requiringEntity_RequiredRole = repoComponent
			operationRequiredRole.entityName = "Component_" + repoComponent.entityName + "_requires_" +
				operationInterface.entityName
		}
		add correspondence between operationRequiredRole and javaField
	}
}

reaction FieldTypeChange {
	after element replaced at java::Field[typeReference]
	call changeInnerDeclarationType(newValue, affectedEObject)
}

routine changeInnerDeclarationType(java::TypeReference typeReference, java::Field javaField) {
	match {
		val innerDeclaration = retrieve pcm::InnerDeclaration corresponding to javaField
	}
	action {
		update innerDeclaration {
			innerDeclaration.datatype_InnerDeclaration = if (typeReference !== null) {
					typeReference.getDataTypeFromTypeReference(correspondenceModel, userInteractor, null)
				} else {
					null
				}
		}
	}
}

// Class Method:
reaction ClassMethodCreated {
	after element java::ClassMethod inserted in java::Class[members]
	call createSeffFromImplementingInterfaces(newValue, affectedEObject)
}

routine createSeffFromImplementingInterfaces(java::ClassMethod classMethod, java::Class javaClass) {
	action {
		call {
			val implementingInterfaces = findImplementingInterfacesFromTypeRefs(javaClass.implements)
			for (implementingInterface : implementingInterfaces) {
				createSeffFromImplementingInterface(classMethod, javaClass, implementingInterface)
			}
		}
	}
}

routine createSeffFromImplementingInterface(java::ClassMethod classMethod, java::Class javaClass, java::Interface javaInterface) {
	match {
		val operationInterface = retrieve pcm::OperationInterface corresponding to javaInterface
	} 
	action {
		call {
			val methods = javaInterface.methods.filter[hasSameSignature(classMethod)]
			for (method : methods) {
				createSEFF(method, javaClass, classMethod)
			}
		}
	}
}

routine createSEFF(java::Method javaMethod, java::Class javaClass, java::ClassMethod classMethod) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to javaMethod
		val basicComponent = retrieve pcm::BasicComponent corresponding to javaClass
	}
	action {
		val rdseff = create pcm::ResourceDemandingSEFF and initialize {
			rdseff.describedService__SEFF = operationSignature
			rdseff.basicComponent_ServiceEffectSpecification = basicComponent
		}
		add correspondence between classMethod and rdseff
		
		update basicComponent {
			basicComponent.serviceEffectSpecifications__BasicComponent += rdseff
		}
	}
}

// Interface Method:
reaction InterfaceMethodCreated {
	after element java::InterfaceMethod inserted in java::Interface[members] 
	call createPCMSignature(newValue)
}

routine createPCMSignature(java::InterfaceMethod interfaceMethod) {
	match {
		val pcmInterface = retrieve pcm::OperationInterface corresponding to interfaceMethod.containingConcreteClassifier
	}
	action {
		val operationSignature = create pcm::OperationSignature and initialize {
			operationSignature.entityName = interfaceMethod.name
			operationSignature.interface__OperationSignature = pcmInterface
		}
		
		update pcmInterface {
			pcmInterface.signatures__OperationInterface += operationSignature
		}
		
		add correspondence between operationSignature and interfaceMethod
	}
}

reaction JavaReturnTypeChanged {
	after element java::TypeReference replaced at java::Method[typeReference]
	call changeReturnType(affectedEObject, newValue)
}

routine changeReturnType(java::Method javaMethod, java::TypeReference typeReference) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to javaMethod
	}
	 action {
		 update operationSignature {
			val repository = operationSignature.interface__OperationSignature.repository__Interface
			operationSignature.returnType__OperationSignature = if (typeReference !== null) {
					typeReference.getCorrespondingPCMDataTypeForTypeReference(correspondenceModel, userInteractor, repository, javaMethod.arrayDimension)
				} else {
					null
				}
		 }
	 }
}
