import tools.vitruv.framework.userinteraction.UserInteractionOptions.WindowModality

import org.emftext.language.java.classifiers.Class
import org.emftext.language.java.types.NamespaceClassifierReference
import org.emftext.language.java.types.ClassifierReference
import tools.vitruv.applications.pcmjava.pojotransformations.java2pcm.Java2PcmUserSelection
import org.emftext.language.java.containers.ContainersPackage
import edu.kit.ipd.sdq.commons.util.org.eclipse.emf.common.util.URIUtil
import org.palladiosimulator.pcm.repository.RepositoryPackage
import org.palladiosimulator.pcm.repository.OperationInterface
import org.palladiosimulator.pcm.system.SystemPackage

import static extension tools.vitruv.domains.java.util.JavaPersistenceHelper.*
import static extension tools.vitruv.applications.util.temporary.java.JavaTypeUtil.getNormalizedClassifierFromTypeReference
import static extension tools.vitruv.applications.util.temporary.java.JavaContainerAndClassifierUtil.*

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: java2PcmClassifier
in reaction to changes in Java
execute actions in PCM

///Repository
reaction PackageCreated {
	after element java::Package inserted as root
	//This condition prevents another execution after automatically creating contracts and datatypes package.
	//The reaction is called because every package insert is a root insert. 
	with newValue.name === null || (!newValue.name.contains("contracts") && !newValue.name.contains("datatypes"))
		
	call {
	    createPackageEClassCorrespondence(newValue)
		createArchitecturalElement(newValue, getLastPackageName(newValue.name), getRootPackageName(newValue.name))
		createOrFindRepository(newValue, newValue.name, "package_root")
	}
}

/**
 * Required to enable locating existing packages with missing correspondences when keeping more than two models consistent.
 */
routine createPackageEClassCorrespondence(java::Package jPackage) {
	match {
		val allPackages = retrieve many java::Package corresponding to jPackage.eClass
		check !allPackages.contains(jPackage)
	}
    action {
        add correspondence between jPackage and jPackage.eClass
    }
}

/**
 * User can select if he wants to create BasicComponent, CompositeComponent, System or do nothing.
 */
routine createArchitecturalElement(java::Package javaPackage, String name, String rootPackageName) {
	match {
		retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
	}
	action {
		call {
			val String userMsg = "A package has been created. Please decide whether and which corresponding architectural element should be created"
			val String[] selections = #[Java2PcmUserSelection.SELECT_BASIC_COMPONENT.message,
				Java2PcmUserSelection.SELECT_COMPOSITE_COMPONENT.message,
				Java2PcmUserSelection.SELECT_SYSTEM.message,
				Java2PcmUserSelection.SELECT_NOTHING_DECIDE_LATER.message
			]
			val selected = userInteractor.singleSelectionDialogBuilder.message(userMsg).choices(selections)
			   .windowModality(WindowModality.MODAL).startInteraction()
			switch(selected) {
				case Java2PcmUserSelection.SELECT_BASIC_COMPONENT.selection: 
					createBasicComponent(javaPackage, name, rootPackageName) 
				case Java2PcmUserSelection.SELECT_COMPOSITE_COMPONENT.selection: 
					createCompositeComponent(javaPackage, name, rootPackageName)
				case Java2PcmUserSelection.SELECT_SYSTEM.selection: 
					createOrFindSystem(javaPackage, name)
			}
		}
	}
}

routine createOrFindRepository(java::Package javaPackage, String packageName, String newTag) {
    match {
        require absence of pcm::Repository corresponding to javaPackage tagged with newTag
        require absence of pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
        val foundRepository = retrieve optional pcm::Repository corresponding to RepositoryPackage.Literals.REPOSITORY
            with foundRepository.entityName.toFirstLower == packageName // PCM repositories can be both upper and lower case
    }
    action {
        call {
            if (foundRepository.isPresent) {
                ensureFirstCaseUpperCaseRepositoryNaming(foundRepository.get, javaPackage)
                addRepositoryCorrespondence(foundRepository.get, javaPackage, newTag)
            } else {
                createRepository(javaPackage, packageName, newTag)
            }
        }
    }
}

routine ensureFirstCaseUpperCaseRepositoryNaming(pcm::Repository pcmRepository, java::Package javaPackage) {
    match {
       check pcmRepository.entityName == javaPackage.name
    }
    action {
        update pcmRepository {
            pcmRepository.entityName = javaPackage.name.toFirstUpper
        }
    }
}

routine addRepositoryCorrespondence(pcm::Repository pcmRepository, java::Package javaPackage, String newTag) {
    action {
        add correspondence between pcmRepository and ContainersPackage.Literals.PACKAGE
        add correspondence between pcmRepository and javaPackage tagged with newTag
    }
}

routine createRepository(java::Package javaPackage, String packageName, String newTag) {
	action {
		update javaPackage {
			// If the package-info.java is not persisted, do it
			val packageUri = javaPackage.eResource.URI;
			if (!URIUtil.existsResourceAtUri(packageUri)) {
				val projectRelativeResourcePath = packageUri.segmentsList.tail.fold("", [a, b | a + "/" + b])
				persistProjectRelative(javaPackage, javaPackage, projectRelativeResourcePath)
			}
		}
		val pcmRepository = create pcm::Repository and initialize {
			pcmRepository.entityName = packageName.toFirstUpper
			persistProjectRelative(javaPackage, pcmRepository, "model/" + pcmRepository.entityName + ".repository")
		}
		
		add correspondence between pcmRepository and javaPackage 
			tagged with newTag
			
		call createJavaSubPackages(javaPackage)
		add correspondence between pcmRepository and ContainersPackage.Literals.PACKAGE
		add correspondence between pcmRepository and RepositoryPackage.Literals.REPOSITORY
	}
}

routine createOrFindSystem(java::Package javaPackage, String name) {
     match {
        require absence of pcm::System corresponding to javaPackage
        val foundSystem = retrieve optional pcm::System corresponding to SystemPackage.Literals.SYSTEM
            with foundSystem.entityName.toFirstLower == javaPackage.name // PCM systems can be both upper and lower case
    }
    action {
        call {
            if (foundSystem.isPresent) {
               addSystemCorrespondence(foundSystem.get, javaPackage)
            } else {
               createSystem(javaPackage, javaPackage.name)
            }
        }
    }
}

routine addSystemCorrespondence(pcm::System pcmSystem, java::Package javaPackage) {
    action {
        add correspondence between pcmSystem and javaPackage tagged with "root_system"
    }
}

routine createSystem(java::Package javaPackage, String name) {
	action {
		val pcmSystem = create pcm::System and initialize {
			pcmSystem.entityName = name
			persistProjectRelative(javaPackage, pcmSystem, "model/" + pcmSystem.entityName + ".system")
		}
		add correspondence between pcmSystem and javaPackage
		add correspondence between pcmSystem and SystemPackage.Literals.SYSTEM tagged with "root_system"
	}
}

routine createBasicComponent(java::Package javaPackage, String name, String rootPackageName) {
	action {
		val pcmBasicComponent = create pcm::BasicComponent and initialize {
			pcmBasicComponent.entityName = name
		}
		call addcorrespondenceAndUpdateRepository(pcmBasicComponent, javaPackage)
	}
}

routine createCompositeComponent(java::Package javaPackage, String name, String rootPackageName) {
	action {
		val pcmCompositeComponent = create pcm::CompositeComponent and initialize {
			pcmCompositeComponent.entityName = name
		}		
		call addcorrespondenceAndUpdateRepository(pcmCompositeComponent, javaPackage)
	}
}

/**
 * Adds correspondence between component and package and add component into repository.
 */
routine addcorrespondenceAndUpdateRepository(pcm::ImplementationComponentType pcmComponent, java::Package javaPackage) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
		
	}
	action {
		add correspondence between pcmComponent and javaPackage
		
		update pcmRepository {
			pcmRepository.components__Repository += pcmComponent
		}
	}
}

//Interface
reaction InterfaceCreated {
	after element java::Interface inserted in java::CompilationUnit[classifiers]
	call createOrFindPCMInterface(newValue, affectedEObject)
}

routine createOrFindPCMInterface(java::Interface javaInterface, java::CompilationUnit compilationUnit) {
	match {
		val containingPackage = retrieve java::Package corresponding to ContainersPackage.Literals.PACKAGE
			with containingPackage.compilationUnits.map[namespacesAsString + '.' + name].contains(compilationUnit.namespacesAsString + '.' + compilationUnit.name)
		val pcmRepository = retrieve optional pcm::Repository corresponding to containingPackage tagged with "contracts"
		require absence of pcm::OperationInterface corresponding to javaInterface
	}
	action {
		call {
			if(pcmRepository.isPresent) {
				createOrFindContractsInterface(javaInterface, compilationUnit, containingPackage, pcmRepository.get)
			} else {
				createNonContractsInterface(javaInterface, compilationUnit, containingPackage)
			}
		}
	}
}

routine createOrFindContractsInterface(java::Interface javaInterface, java::CompilationUnit compilationUnit, java::Package contractsPackage, pcm::Repository pcmRepository) {
	action {
		call {
			val pcmInterface = pcmRepository.interfaces__Repository.filter(OperationInterface).findFirst[entityName == javaInterface.name]
			if (pcmInterface === null) {
				createInterface(javaInterface, compilationUnit, contractsPackage)
			} else {
				addInterfaceCorrespondence(pcmInterface, javaInterface, compilationUnit)
			}
		}
	}
}

/**
 * User selects if interface should be created if interface was not created into contract package.
 */
routine createNonContractsInterface(java::Interface javaInterface, java::CompilationUnit compilationUnit, java::Package javaPackage) {
	action {
		call {
			val String userMsg = "The created interface is not in the contracts packages. Should an architectural interface be created for the interface " +
					javaInterface.name + " ?"
			val String[] selections = #[Java2PcmUserSelection.SELECT_CREATE_INTERFACE_NOT_IN_CONTRACTS.message,
				Java2PcmUserSelection.SELECT_DONT_CREATE_INTERFACE_NOT_IN_CONTRACTS.message
			]
			val selected = userInteractor.singleSelectionDialogBuilder.message(userMsg).choices(selections)
				.windowModality(WindowModality.MODAL).startInteraction()
			if (selected == Java2PcmUserSelection.SELECT_CREATE_INTERFACE_NOT_IN_CONTRACTS.selection) {
				createInterface(javaInterface, compilationUnit, javaPackage)
			}
		}
	}
}

routine createInterface(java::Interface javaInterface, java::CompilationUnit compilationUnit, java::Package javaPackage) {
	action {
		val pcmInterface = create pcm::OperationInterface and initialize {
			pcmInterface.entityName = javaInterface.name
		}
		call {
			addInterfaceCorrespondence(pcmInterface, javaInterface, compilationUnit)
			updateRepositoryInterfaces(pcmInterface)
		}
	}
}

routine addInterfaceCorrespondence(pcm::OperationInterface pcmInterface, java::Interface javaInterface, java::CompilationUnit compilationUnit) {
	match {
		require absence of pcm::Interface corresponding to javaInterface
	}
	action {
		add correspondence between pcmInterface and javaInterface
		add correspondence between pcmInterface and compilationUnit 
	}
}

routine updateRepositoryInterfaces(pcm::OperationInterface pcmInterface) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
	}
	action {
		update pcmRepository {
			pcmRepository.interfaces__Repository += pcmInterface
		}
	}
}

//Class
reaction ClassCreated {
	after element java::Class inserted in java::CompilationUnit[classifiers]
	call {
		val javaPackage = getContainingPackageFromCorrespondenceModel(newValue,
			correspondenceModel)
		classMapping(newValue, affectedEObject, javaPackage)
	}
}

/**
 * Creates Datatype if class was in datatypes package created or checks if there can be a correspondence and if 
 * not create a new pcm element.
 */
routine classMapping(java::Class javaClass, java::CompilationUnit compilationUnit, java::Package javaPackage) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
		val datatypesPackage = retrieve java::Package corresponding to pcmRepository tagged with "datatypes" 
	}
	action {
		call {
			if (javaPackage?.name?.equals(datatypesPackage.name)) {
				createDataType(javaClass, compilationUnit)
				
			} else {
				checkSystemAndComponent(javaPackage, javaClass)
				createElement(javaClass, javaPackage, compilationUnit)
			}
			
		}
	}
}

/**
 * User can choose if a composite or collection data type should be created.
 */
routine createDataType(java::Class javaClass, java::CompilationUnit compilationUnit) {
	action {
		call {
			val String userMsg = "Class " + javaClass.name +
						"has been created in the datatypes pacakage. Please decide which kind of data type should be created."
			val String[] selections = #[Java2PcmUserSelection.SELECT_COMPOSITE_DATA_TYPE.message,
				Java2PcmUserSelection.SELECT_COLLECTION_DATA_TYPE.message,
				Java2PcmUserSelection.SELECT_NOTHING_DECIDE_LATER.message
			]
			val selected = userInteractor.singleSelectionDialogBuilder.message(userMsg).choices(selections)
			    .windowModality(WindowModality.MODAL).startInteraction()
			switch(selected) {
				case Java2PcmUserSelection.SELECT_COMPOSITE_DATA_TYPE.selection: 
					createCompositeDataType(javaClass, compilationUnit)
				case Java2PcmUserSelection.SELECT_COLLECTION_DATA_TYPE.selection: 
					createCollectionDataType(javaClass, compilationUnit)
			}
		}
	}
}

/**
 * Creates a new architectural element and add correspondence.
 */
routine createElement(java::Class javaClass, java::Package javaPackage, java::CompilationUnit compilationUnit) {
	match {
		require absence of pcm::DataType corresponding to javaClass
		require absence of pcm::InterfaceProvidingRequiringEntity corresponding to javaClass 
		val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
		val javaRootPackage = retrieve java::Package corresponding to pcmRepository tagged with "package_root" 
	}
	action {
		call {
			createArchitecturalElement(javaRootPackage, javaClass.name, compilationUnit.namespaces.head)			
			checkSystemAndComponent(javaRootPackage, javaClass)
		}
	}
}

/**
 * Check if package has a correspondence with a component or system. 
 * If there is one create correspondence between component or system and the given class.
 */
routine checkSystemAndComponent(java::Package javaPackage, java::Class javaClass) {
	match {
		val componentOrSystem = retrieve pcm::InterfaceProvidingRequiringEntity corresponding to javaPackage 
	}
	action {
		add correspondence between javaClass and componentOrSystem
	}
}

routine createCompositeDataType(java::Class javaClass, java::CompilationUnit compilationUnit) {
	action {
		val pcmCompositeDataType = create pcm::CompositeDataType and initialize {
			pcmCompositeDataType.entityName = javaClass.name
		}
		
		add correspondence between pcmCompositeDataType and javaClass
		add correspondence between compilationUnit and javaClass
		
		call {
			addDataTypeInRepository(pcmCompositeDataType)
		}
	}
}
routine createCollectionDataType(java::Class javaClass, java::CompilationUnit compilationUnit) {
	action {
		val pcmCollectionDataType = create pcm::CollectionDataType and initialize {
			pcmCollectionDataType.entityName = javaClass.name
		}
		
		add correspondence between pcmCollectionDataType and javaClass
		add correspondence between compilationUnit and javaClass
		
		call {
			addDataTypeInRepository(pcmCollectionDataType)
		}
	}
}

routine addDataTypeInRepository(pcm::DataType pcmDataType) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to ContainersPackage.Literals.PACKAGE
	}
	action {
		update pcmDataType {
			pcmDataType.repository__DataType = pcmRepository
		}
		update pcmRepository {
			pcmRepository.dataTypes__Repository += pcmDataType
		}
	}
}

//TypeReference
reaction TypeReferenceCreated {
	after element java::TypeReference inserted in java::Class[implements]
	with newValue instanceof NamespaceClassifierReference || newValue instanceof ClassifierReference
	call {
		createOperationProvidedRole(newValue)
	}
}

routine createOperationProvidedRole(java::TypeReference typeReference) {
	action {
		call {
			val javaClass = typeReference.eContainer as Class
			var javaInterfaceClassifier = getNormalizedClassifierFromTypeReference(typeReference)
			createOperationProvidedRoleFromTypeReference(javaInterfaceClassifier, javaClass, typeReference)
		}
	}
}

routine createOperationProvidedRoleFromTypeReference(java::Classifier classifierInterface, java::Class javaClass, java::TypeReference reference) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to classifierInterface
		val basicComponent = retrieve pcm::BasicComponent corresponding to javaClass
	}
	action {
		val operationProvidedRole = create pcm::OperationProvidedRole and initialize {
			operationProvidedRole.providedInterface__OperationProvidedRole = opInterface
			operationProvidedRole.providingEntity_ProvidedRole = basicComponent
			operationProvidedRole.entityName = basicComponent.entityName + "_provides_" + opInterface.entityName
		}
		add correspondence between operationProvidedRole and reference
	}
}

//Other
/**
 * Creates datatypes and contracts package into given javaPackage after it was created.
 */
routine createJavaSubPackages(java::Package javaPackage) {
	match {
		val repository = retrieve pcm::Repository corresponding to javaPackage
	}
	action {
		call {
			createJavaPackage(repository, javaPackage, "datatypes", "datatypes");
			createJavaPackage(repository, javaPackage, "contracts", "contracts");
		}
	}
}	

/**
 * Create java package and tag it.
 */
routine createJavaPackage(EObject sourceElementMappedToPackage, java::Package parentPackage, String packageName, String newTag)	 { 
	match {
		require absence of java::Package corresponding to sourceElementMappedToPackage tagged with newTag
	} 
	action { // TODO FIXME find or create pattern
		val javaPackage = create java::Package and initialize {
			if (parentPackage !== null) {
				javaPackage.namespaces += parentPackage.namespaces;
				javaPackage.namespaces += parentPackage.name; 
			}
			javaPackage.name = packageName;
			persistProjectRelative(parentPackage, javaPackage, buildJavaFilePath(javaPackage));
		}
		add correspondence between javaPackage and ContainersPackage.Literals.PACKAGE
		add correspondence between javaPackage and sourceElementMappedToPackage
			tagged with newTag
		add correspondence between javaPackage and ContainersPackage.Literals.PACKAGE
	}
}
