import java.util.List
import org.palladiosimulator.pcm.repository.Repository
import org.eclipse.uml2.uml.Package
import org.eclipse.xtext.xbase.lib.ObjectExtensions
import org.eclipse.uml2.uml.Class
import org.eclipse.xtext.xbase.lib.BooleanExtensions
import org.eclipse.uml2.uml.Operation
import org.palladiosimulator.pcm.repository.RepositoryComponent
import java.util.Optional

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/Repository/5.2" as repository
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

reactions: umlXpcmComponent_L2R in reaction to changes in UML
execute actions in PCM
import routines umlXpcmRoutines

reaction OnRepositoryComponentPackageInsertedInPackage {
	after element uml::Package inserted in uml::Package[packagedElement]
	call repositoryComponent_ElementCreatedCheck(affectedEObject)
}

reaction OnRepositoryComponentPackageRemovedFromPackage {
	after element uml::Package removed from uml::Package[packagedElement]
	call repositoryComponent_ElementDeletedCheck(affectedEObject)
}

reaction OnRepositoryComponentPackageDeleted {
	after element uml::Package deleted
	call repositoryComponent_ElementDeletedCheck(affectedEObject)
}

reaction OnRepositoryComponentClassInsertedInPackage {
	after element uml::Class inserted in uml::Package[packagedElement]
	call repositoryComponent_ElementCreatedCheck(affectedEObject)
}

reaction OnRepositoryComponentClassRemovedFromPackage {
	after element uml::Class removed from uml::Package[packagedElement]
	call repositoryComponent_ElementDeletedCheck(affectedEObject)
}

reaction OnRepositoryComponentClassDeleted {
	after element uml::Class deleted
	call repositoryComponent_ElementDeletedCheck(affectedEObject)
}

reaction OnRepositoryComponentOperationInsertedInClass {
	after element uml::Operation inserted in uml::Class[ownedOperation]
	call repositoryComponent_ElementCreatedCheck(affectedEObject)
}

reaction OnRepositoryComponentOperationRemovedFromClass {
	after element uml::Operation removed from uml::Class[ownedOperation]
	call repositoryComponent_ElementDeletedCheck(affectedEObject)
}

reaction OnRepositoryComponentOperationDeleted {
	after element uml::Operation deleted
	call repositoryComponent_ElementDeletedCheck(affectedEObject)
}

reaction OnRepositoryComponentNameReplacedAtOperation_nameBidirectional {
	after attribute replaced at uml::Operation[name]
	call onRepositoryComponentNameReplacedAtOperation_nameBidirectionalRepair(affectedEObject)
}

reaction OnRepositoryComponentNameReplacedAtClass_nameBidirectional {
	after attribute replaced at uml::Class[name]
	call onRepositoryComponentNameReplacedAtClass_nameBidirectionalRepair(affectedEObject)
}

reaction OnRepositoryComponentNameReplacedAtPackage_nameBidirectional {
	after attribute replaced at uml::Package[name]
	call onRepositoryComponentNameReplacedAtPackage_nameBidirectionalRepair(affectedEObject)
}

routine repositoryComponent_BidirectionalUpdate(uml::Package componentPackage_, uml::Package repositoryPackage_ , uml::Class implementation_ , uml::Operation constructor_) {
	action {
		call updateComponentName(componentPackage_, repositoryPackage_ , implementation_ , constructor_)
	}
}

routine repositoryComponent_CreateMapping(uml::Package componentPackage_, uml::Package repositoryPackage_ , uml::Class implementation_ , uml::Operation constructor_) {
	match {
		require absence of repository::RepositoryComponent corresponding to componentPackage_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:componentPackage_with_RepositoryComponent:component"
		require absence of repository::Repository corresponding to componentPackage_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:componentPackage_with_Repository:repository"
		val repository_ = retrieve repository::Repository corresponding to repositoryPackage_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:repositoryPkg_with_Repository:repository"
	}
	action {
		val component_ = create repository::BasicComponent
		add correspondence between component_ and componentPackage_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:componentPackage_with_RepositoryComponent:component"
		add correspondence between repository_ and componentPackage_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:componentPackage_with_Repository:repository"
		add correspondence between component_ and repositoryPackage_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:repositoryPackage_with_RepositoryComponent:component"
		add correspondence between repository_ and repositoryPackage_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:repositoryPackage_with_Repository:repository"
		add correspondence between component_ and implementation_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Class:implementation_with_RepositoryComponent:component"
		add correspondence between repository_ and implementation_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Class:implementation_with_Repository:repository"
		add correspondence between component_ and constructor_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Operation:constructor_with_RepositoryComponent:component"
		add correspondence between repository_ and constructor_ tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Operation:constructor_with_Repository:repository"
		execute {
			repository_.getComponents__Repository().^add(component_)
		}
		call repositoryComponent_BidirectionalUpdate(componentPackage_, repositoryPackage_ , implementation_ , constructor_)
	}
}

routine repositoryComponent_DeleteMapping(repository::RepositoryComponent component_, repository::Repository repository_) {
	action {
		delete component_
	}
}

routine repositoryComponent_BidirectionalCheck(ecore::EObject affectedEObject, plain String as routineName) {
	action {
		call {
			if ( affectedEObject instanceof Package ) { var Package componentPackage_ = affectedEObject for ( implementation__candidate : componentPackage_ . packagedElements ) { if ( implementation__candidate !== null && implementation__candidate instanceof Class ) { var Class implementation_ = implementation__candidate as Class { var repositoryPackage__candidate = componentPackage_ . eContainer { if ( repositoryPackage__candidate !== null && repositoryPackage__candidate instanceof Package ) { var Package repositoryPackage_ = repositoryPackage__candidate as Package for ( constructor__candidate : implementation_ . ownedOperations ) { if ( constructor__candidate !== null && constructor__candidate instanceof Operation ) { var Operation constructor_ = constructor__candidate as Operation { { if ( routineName === "updateComponentName" ) updateComponentName ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) } return } } } } } } } } }
			if ( affectedEObject instanceof Package ) { var Package repositoryPackage_ = affectedEObject for ( componentPackage__candidate : repositoryPackage_ . packagedElements ) { if ( componentPackage__candidate !== null && componentPackage__candidate instanceof Package ) { var Package componentPackage_ = componentPackage__candidate as Package for ( implementation__candidate : componentPackage_ . packagedElements ) { if ( implementation__candidate !== null && implementation__candidate instanceof Class ) { var Class implementation_ = implementation__candidate as Class for ( constructor__candidate : implementation_ . ownedOperations ) { if ( constructor__candidate !== null && constructor__candidate instanceof Operation ) { var Operation constructor_ = constructor__candidate as Operation { { if ( routineName === "updateComponentName" ) updateComponentName ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) } return } } } } } } } }
			if ( affectedEObject instanceof Class ) { var Class implementation_ = affectedEObject { var componentPackage__candidate = implementation_ . eContainer { if ( componentPackage__candidate !== null && componentPackage__candidate instanceof Package ) { var Package componentPackage_ = componentPackage__candidate as Package { var repositoryPackage__candidate = componentPackage_ . eContainer { if ( repositoryPackage__candidate !== null && repositoryPackage__candidate instanceof Package ) { var Package repositoryPackage_ = repositoryPackage__candidate as Package for ( constructor__candidate : implementation_ . ownedOperations ) { if ( constructor__candidate !== null && constructor__candidate instanceof Operation ) { var Operation constructor_ = constructor__candidate as Operation { { if ( routineName === "updateComponentName" ) updateComponentName ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) } return } } } } } } } } } }
			if ( affectedEObject instanceof Operation ) { var Operation constructor_ = affectedEObject { var implementation__candidate = constructor_ . eContainer { if ( implementation__candidate !== null && implementation__candidate instanceof Class ) { var Class implementation_ = implementation__candidate as Class { var componentPackage__candidate = implementation_ . eContainer { if ( componentPackage__candidate !== null && componentPackage__candidate instanceof Package ) { var Package componentPackage_ = componentPackage__candidate as Package { var repositoryPackage__candidate = componentPackage_ . eContainer { if ( repositoryPackage__candidate !== null && repositoryPackage__candidate instanceof Package ) { var Package repositoryPackage_ = repositoryPackage__candidate as Package { { if ( routineName === "updateComponentName" ) updateComponentName ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) } return } } } } } } } } } } }
		}
	}
}

routine repositoryComponent_ElementCreatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Package ) { var Package componentPackage_ = affectedEObject for ( implementation__candidate : componentPackage_ . packagedElements ) { if ( implementation__candidate !== null && implementation__candidate instanceof Class ) { var Class implementation_ = implementation__candidate as Class { var repositoryPackage__candidate = componentPackage_ . eContainer { if ( repositoryPackage__candidate !== null && repositoryPackage__candidate instanceof Package ) { var Package repositoryPackage_ = repositoryPackage__candidate as Package for ( constructor__candidate : implementation_ . ownedOperations ) { if ( constructor__candidate !== null && constructor__candidate instanceof Operation ) { var Operation constructor_ = constructor__candidate as Operation { repositoryComponent_CreateMapping ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) return } } } } } } } } }
			if ( affectedEObject instanceof Package ) { var Package repositoryPackage_ = affectedEObject for ( componentPackage__candidate : repositoryPackage_ . packagedElements ) { if ( componentPackage__candidate !== null && componentPackage__candidate instanceof Package ) { var Package componentPackage_ = componentPackage__candidate as Package for ( implementation__candidate : componentPackage_ . packagedElements ) { if ( implementation__candidate !== null && implementation__candidate instanceof Class ) { var Class implementation_ = implementation__candidate as Class for ( constructor__candidate : implementation_ . ownedOperations ) { if ( constructor__candidate !== null && constructor__candidate instanceof Operation ) { var Operation constructor_ = constructor__candidate as Operation { repositoryComponent_CreateMapping ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) return } } } } } } } }
			if ( affectedEObject instanceof Class ) { var Class implementation_ = affectedEObject { var componentPackage__candidate = implementation_ . eContainer { if ( componentPackage__candidate !== null && componentPackage__candidate instanceof Package ) { var Package componentPackage_ = componentPackage__candidate as Package { var repositoryPackage__candidate = componentPackage_ . eContainer { if ( repositoryPackage__candidate !== null && repositoryPackage__candidate instanceof Package ) { var Package repositoryPackage_ = repositoryPackage__candidate as Package for ( constructor__candidate : implementation_ . ownedOperations ) { if ( constructor__candidate !== null && constructor__candidate instanceof Operation ) { var Operation constructor_ = constructor__candidate as Operation { repositoryComponent_CreateMapping ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) return } } } } } } } } } }
			if ( affectedEObject instanceof Operation ) { var Operation constructor_ = affectedEObject { var implementation__candidate = constructor_ . eContainer { if ( implementation__candidate !== null && implementation__candidate instanceof Class ) { var Class implementation_ = implementation__candidate as Class { var componentPackage__candidate = implementation_ . eContainer { if ( componentPackage__candidate !== null && componentPackage__candidate instanceof Package ) { var Package componentPackage_ = componentPackage__candidate as Package { var repositoryPackage__candidate = componentPackage_ . eContainer { if ( repositoryPackage__candidate !== null && repositoryPackage__candidate instanceof Package ) { var Package repositoryPackage_ = repositoryPackage__candidate as Package { repositoryComponent_CreateMapping ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) return } } } } } } } } } } }
		}
	}
}

routine repositoryComponent_ElementDeletedCheck(ecore::EObject affectedEObject) {
	match {
		val component_correspondingTo_componentPackage = retrieve optional repository::RepositoryComponent corresponding to affectedEObject tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:componentPackage_with_RepositoryComponent:component"
		val repository_correspondingTo_componentPackage = retrieve optional repository::Repository corresponding to affectedEObject tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:componentPackage_with_Repository:repository"
		val component_correspondingTo_repositoryPackage = retrieve optional repository::RepositoryComponent corresponding to affectedEObject tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:repositoryPackage_with_RepositoryComponent:component"
		val repository_correspondingTo_repositoryPackage = retrieve optional repository::Repository corresponding to affectedEObject tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Package:repositoryPackage_with_Repository:repository"
		val component_correspondingTo_implementation = retrieve optional repository::RepositoryComponent corresponding to affectedEObject tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Class:implementation_with_RepositoryComponent:component"
		val repository_correspondingTo_implementation = retrieve optional repository::Repository corresponding to affectedEObject tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Class:implementation_with_Repository:repository"
		val component_correspondingTo_constructor = retrieve optional repository::RepositoryComponent corresponding to affectedEObject tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Operation:constructor_with_RepositoryComponent:component"
		val repository_correspondingTo_constructor = retrieve optional repository::Repository corresponding to affectedEObject tagged with "umlXpcmComponent_map_UML_and_PCM_correspondence_Operation:constructor_with_Repository:repository"
	}
	action {
		call {
			var RepositoryComponent component_
			var Repository repository_
			if ( component_correspondingTo_componentPackage . isPresent ( ) ) component_ = component_correspondingTo_componentPackage . get ( )
			if ( repository_correspondingTo_componentPackage . isPresent ( ) ) repository_ = repository_correspondingTo_componentPackage . get ( )
			if ( component_correspondingTo_repositoryPackage . isPresent ( ) ) component_ = component_correspondingTo_repositoryPackage . get ( )
			if ( repository_correspondingTo_repositoryPackage . isPresent ( ) ) repository_ = repository_correspondingTo_repositoryPackage . get ( )
			if ( component_correspondingTo_implementation . isPresent ( ) ) component_ = component_correspondingTo_implementation . get ( )
			if ( repository_correspondingTo_implementation . isPresent ( ) ) repository_ = repository_correspondingTo_implementation . get ( )
			if ( component_correspondingTo_constructor . isPresent ( ) ) component_ = component_correspondingTo_constructor . get ( )
			if ( repository_correspondingTo_constructor . isPresent ( ) ) repository_ = repository_correspondingTo_constructor . get ( )
			if ( component_ !== null && repository_ !== null ) repositoryComponent_DeleteMapping ( component_ , repository_ )
		}
	}
}

routine repositoryComponent_ElementUpdatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Package ) { var Package componentPackage_ = affectedEObject for ( implementation__candidate : componentPackage_ . packagedElements ) { if ( implementation__candidate !== null && implementation__candidate instanceof Class ) { var Class implementation_ = implementation__candidate as Class { var repositoryPackage__candidate = componentPackage_ . eContainer { if ( repositoryPackage__candidate !== null && repositoryPackage__candidate instanceof Package ) { var Package repositoryPackage_ = repositoryPackage__candidate as Package for ( constructor__candidate : implementation_ . ownedOperations ) { if ( constructor__candidate !== null && constructor__candidate instanceof Operation ) { var Operation constructor_ = constructor__candidate as Operation { repositoryComponent_CreateMapping ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) return } } } } } } } } }
			if ( affectedEObject instanceof Package ) { var Package repositoryPackage_ = affectedEObject for ( componentPackage__candidate : repositoryPackage_ . packagedElements ) { if ( componentPackage__candidate !== null && componentPackage__candidate instanceof Package ) { var Package componentPackage_ = componentPackage__candidate as Package for ( implementation__candidate : componentPackage_ . packagedElements ) { if ( implementation__candidate !== null && implementation__candidate instanceof Class ) { var Class implementation_ = implementation__candidate as Class for ( constructor__candidate : implementation_ . ownedOperations ) { if ( constructor__candidate !== null && constructor__candidate instanceof Operation ) { var Operation constructor_ = constructor__candidate as Operation { repositoryComponent_CreateMapping ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) return } } } } } } } }
			if ( affectedEObject instanceof Class ) { var Class implementation_ = affectedEObject { var componentPackage__candidate = implementation_ . eContainer { if ( componentPackage__candidate !== null && componentPackage__candidate instanceof Package ) { var Package componentPackage_ = componentPackage__candidate as Package { var repositoryPackage__candidate = componentPackage_ . eContainer { if ( repositoryPackage__candidate !== null && repositoryPackage__candidate instanceof Package ) { var Package repositoryPackage_ = repositoryPackage__candidate as Package for ( constructor__candidate : implementation_ . ownedOperations ) { if ( constructor__candidate !== null && constructor__candidate instanceof Operation ) { var Operation constructor_ = constructor__candidate as Operation { repositoryComponent_CreateMapping ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) return } } } } } } } } } }
			if ( affectedEObject instanceof Operation ) { var Operation constructor_ = affectedEObject { var implementation__candidate = constructor_ . eContainer { if ( implementation__candidate !== null && implementation__candidate instanceof Class ) { var Class implementation_ = implementation__candidate as Class { var componentPackage__candidate = implementation_ . eContainer { if ( componentPackage__candidate !== null && componentPackage__candidate instanceof Package ) { var Package componentPackage_ = componentPackage__candidate as Package { var repositoryPackage__candidate = componentPackage_ . eContainer { if ( repositoryPackage__candidate !== null && repositoryPackage__candidate instanceof Package ) { var Package repositoryPackage_ = repositoryPackage__candidate as Package { repositoryComponent_CreateMapping ( componentPackage_ , repositoryPackage_ , implementation_ , constructor_ ) return } } } } } } } } } } }
			repositoryComponent_ElementDeletedCheck(affectedEObject)
		}
	}
}

routine onRepositoryComponentNameReplacedAtOperation_nameBidirectionalRepair(uml::Operation affectedEObject) {
	action {
		call repositoryComponent_BidirectionalCheck(affectedEObject, "updateComponentName")
	}
}

routine onRepositoryComponentNameReplacedAtClass_nameBidirectionalRepair(uml::Class affectedEObject) {
	action {
		call repositoryComponent_BidirectionalCheck(affectedEObject, "updateComponentName")
	}
}

routine onRepositoryComponentNameReplacedAtPackage_nameBidirectionalRepair(uml::Package affectedEObject) {
	action {
		call repositoryComponent_BidirectionalCheck(affectedEObject, "updateComponentName")
	}
}