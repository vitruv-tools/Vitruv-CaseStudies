import org.eclipse.uml2.uml.UMLPackage
import tools.vitruv.applications.pcmumlclass.DefaultLiterals
import tools.vitruv.framework.userinteraction.UserInteractionOptions.WindowModality

import static tools.vitruv.applications.util.temporary.uml.UmlModelUtil.*

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: sharedRoutines
in reaction to changes in PCM
execute actions in UML

routine ensureUmlModelExists(EObject source) {
    match {
        require absence of uml::Model corresponding to UMLPackage.Literals.MODEL
    }
    action {
        call {
            var relativeModelPath = userInteractor.textInputDialogBuilder.message(DefaultLiterals.INPUT_REQUEST_MODEL_PATH).windowModality(WindowModality.MODAL).startInteraction
            if (relativeModelPath.nullOrEmpty) {
                relativeModelPath = DefaultLiterals.MODEL_DIRECTORY + "/" + DefaultLiterals.UML_MODEL_FILE_NAME + DefaultLiterals.UML_EXTENSION
            } else if (!relativeModelPath.endsWith(DefaultLiterals.UML_EXTENSION)) {
                relativeModelPath += DefaultLiterals.UML_EXTENSION
            }
            var umlRootModel = loadPersistedModelFromSource(relativeModelPath, source)
            umlRootModel.ifPresent[ensureUmlModelCorrespondenceExists]
            if(umlRootModel.isEmpty) {
                createUmlModel(source, relativeModelPath)
            }
        }
    }
}

routine createUmlModel(EObject source, String relativeModelPath) { 
    action {
        val umlRootModel = create uml::Model and initialize {
            umlRootModel.name = DefaultLiterals.ROOT_MODEL_NAME;
        }
        call {
            persistProjectRelative(source, umlRootModel, relativeModelPath)
            ensureUmlModelCorrespondenceExists(umlRootModel)
        }
    }
}

routine ensureUmlModelCorrespondenceExists(uml::Model newModel) {
    match {
        val alreadyCorrespondingModels = retrieve many uml::Model corresponding to UMLPackage.Literals.MODEL
        check !alreadyCorrespondingModels.contains(newModel)
    }
    action {
        add correspondence between UMLPackage.Literals.MODEL and newModel
    }
}
