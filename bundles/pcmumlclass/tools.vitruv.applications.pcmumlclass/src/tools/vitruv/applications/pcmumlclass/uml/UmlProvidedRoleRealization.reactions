import org.palladiosimulator.pcm.repository.OperationProvidedRole
import tools.vitruv.applications.pcmumlclass.TagLiterals

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::OperationProvidedRole in an pcm::InterfaceProvidingRequiringEntity (IPRE)
//	with an uml::InterfaceRealization in the uml::Class (implementation) corresponding to the IPRE.
//
//	Because a pcm::OperationProvidedRole defines which Interface are provided/implemented by the IPRE, 
//	only architecturally relevant uml::Interfaces (uml::Interfaces that are defined in the contracts package of a pcm::Repository)
//	should be set for uml::InterfaceRealization[contract] of the IPRE implementation class.
//
//	Related files: 
//		PcmProvidedRole.reactions,
//		ProvidedRoleTest

reactions: umlProvidedRoleRealizationReactions
in reaction to changes in UML
execute actions in PCM

reaction ProvidedRoleRealizationAdded {
	after element uml::InterfaceRealization inserted in uml::Class[interfaceRealization]
	with affectedEObject.interfaceRealizations.contains(newValue) //validity check
	call insertCorrespondingProvidedRole(newValue, affectedEObject)
}

routine insertCorrespondingProvidedRole(uml::InterfaceRealization umlRealization, uml::Class umlComponent) {
	match{
		// context check
		val pcmComponent = retrieve optional pcm::InterfaceProvidingRequiringEntity corresponding to umlComponent tagged with TagLiterals.IPRE__IMPLEMENTATION
		val pcmInterface = retrieve optional pcm::OperationInterface corresponding to umlRealization.contract tagged with TagLiterals.INTERFACE_TO_INTERFACE
	}
	action {
		call {
			if (pcmComponent.isPresent 
				&& (pcmInterface.isPresent || umlRealization.contract === null) // allow 'null' for uninitialized InterfaceRealization
			) {
				detectOrCreateCorrespondingProvidedRole(umlRealization, umlComponent)
				moveCorrespondingProvidedRole(umlRealization, umlComponent)
			} else {
				// not a matching context -> delete correspondence, if it exists
				deleteCorrespondingProvidedRole(umlRealization)
			}
		}
	}
}

routine detectOrCreateCorrespondingProvidedRole(uml::InterfaceRealization umlRealization, uml::Class umlComponent) {
	match {
		val pcmComponent = retrieve pcm::InterfaceProvidingRequiringEntity corresponding to umlComponent tagged with TagLiterals.IPRE__IMPLEMENTATION
		val pcmInterface = retrieve pcm::OperationInterface corresponding to umlRealization.contract tagged with TagLiterals.INTERFACE_TO_INTERFACE
		require absence of pcm::OperationProvidedRole corresponding to umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
	}
	action {
		call {
			val pcmProvidedCandidate = pcmComponent.providedRoles_InterfaceProvidingEntity
				.filter(OperationProvidedRole).findFirst[it.providedInterface__OperationProvidedRole === pcmInterface]
			if (pcmProvidedCandidate !== null) {
				addCorrespondenceForExistingProvidedRole(umlRealization, pcmProvidedCandidate)
			} else {
				createCorrespondingProvidedRole(umlRealization, umlComponent)
			}
		}
	}
}

routine addCorrespondenceForExistingProvidedRole(uml::InterfaceRealization umlRealization, pcm::OperationProvidedRole pcmProvided) {
	match {
		require absence of uml::InterfaceRealization corresponding to pcmProvided tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
		require absence of pcm::OperationProvidedRole corresponding to umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
	}
	action {
		add correspondence between pcmProvided and umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
	}
}

routine createCorrespondingProvidedRole(uml::InterfaceRealization umlRealization, uml::Class umlComponent) {
	match {
		val pcmComponent = retrieve pcm::InterfaceProvidingRequiringEntity corresponding to umlComponent tagged with TagLiterals.IPRE__IMPLEMENTATION
		val pcmInterface = retrieve pcm::OperationInterface corresponding to umlRealization.contract tagged with TagLiterals.INTERFACE_TO_INTERFACE
		require absence of pcm::OperationProvidedRole corresponding to umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
	}
	action {
		val pcmProvided = create pcm::OperationProvidedRole and initialize {
			pcmProvided.providedInterface__OperationProvidedRole = pcmInterface
			pcmComponent.providedRoles_InterfaceProvidingEntity += pcmProvided
		}
		add correspondence between pcmProvided and umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
		call changeNameOfCorrespondingProvidedRole(umlRealization, umlRealization.name)
	}
}

routine moveCorrespondingProvidedRole(uml::InterfaceRealization umlRealization, uml::Class umlComponent) {
	match {
		val pcmComponent = retrieve pcm::InterfaceProvidingRequiringEntity corresponding to umlComponent tagged with TagLiterals.IPRE__IMPLEMENTATION
		val pcmProvided = retrieve pcm::OperationProvidedRole corresponding to umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
	}
	action {
		update pcmComponent {
			pcmComponent.providedRoles_InterfaceProvidingEntity += pcmProvided
		}
	}
}

reaction ProvidedRoleRealizationRemoved {
	after element uml::InterfaceRealization removed from uml::Class[interfaceRealization]
	with !affectedEObject.interfaceRealizations.contains(oldValue) //validity check
	call removeCorrespondingProvidedRole(oldValue, affectedEObject)
}

routine removeCorrespondingProvidedRole(uml::InterfaceRealization umlRealization, uml::Class umlComponent) {
	match {
		val pcmComponent = retrieve pcm::InterfaceProvidingRequiringEntity corresponding to umlComponent tagged with TagLiterals.IPRE__IMPLEMENTATION
		val pcmProvided = retrieve pcm::OperationProvidedRole corresponding to umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
	}
	action {
		update umlRealization {
			umlRealization.clients -= umlComponent // isn't automatically done, when the InterfaceRealization is removed
		}
		update pcmComponent {
			pcmComponent.providedRoles_InterfaceProvidingEntity -= pcmProvided
		}
	}
}

reaction ProvidedRoleRealizationDeleted {
	after element uml::InterfaceRealization deleted
	call deleteCorrespondingProvidedRole(affectedEObject)
}

routine deleteCorrespondingProvidedRole(uml::InterfaceRealization umlRealization) {
	match {
		val pcmProvided = retrieve pcm::OperationProvidedRole corresponding to umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
	}
	action {
		remove correspondence between pcmProvided and umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
		delete pcmProvided
	}
}

reaction ProvidedRoleRealizationNameChanged {
	after attribute replaced at uml::InterfaceRealization[name]
	with affectedEObject.name === newValue
	call changeNameOfCorrespondingProvidedRole(affectedEObject, newValue)
}

routine changeNameOfCorrespondingProvidedRole(uml::InterfaceRealization umlRealization, String newName) {
	match{
		val pcmProvided = retrieve pcm::OperationProvidedRole corresponding to umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
	}
	action {
		update pcmProvided {
			pcmProvided.entityName = newName
		}
	}
}

reaction ProvidedRoleRealizationTypeChanged {
	after element uml::Interface replaced at uml::InterfaceRealization[contract]
	with affectedEObject.contract === newValue
	call changeTypeOfCorrespondingProvidedRole(affectedEObject, newValue)
}

routine changeTypeOfCorrespondingProvidedRole(uml::InterfaceRealization umlRealization, uml::Interface umlNewInterface) {
	match{
		val pcmComponent = retrieve pcm::InterfaceProvidingRequiringEntity corresponding to umlRealization.implementingClassifier tagged with TagLiterals.IPRE__IMPLEMENTATION
		val pcmProvided = retrieve optional pcm::OperationProvidedRole corresponding to umlRealization tagged with TagLiterals.PROVIDED_ROLE__INTERFACE_REALIZATION
		val pcmNewInterface = retrieve optional pcm::OperationInterface corresponding to umlNewInterface tagged with TagLiterals.INTERFACE_TO_INTERFACE
	}
	action {
		execute {
			if (!pcmProvided.isPresent && pcmNewInterface.isPresent) {
				createCorrespondingProvidedRole(umlRealization, umlRealization.implementingClassifier as org.eclipse.uml2.uml.Class)
			} else if (pcmProvided.isPresent && pcmNewInterface.isPresent) {
				pcmProvided.get.providedInterface__OperationProvidedRole = pcmNewInterface.get
			} else if(pcmProvided.isPresent && umlNewInterface === null) {
				//might be a transitional state -> keep correspondence, but synchronize 'null'
				pcmProvided.get.providedInterface__OperationProvidedRole = null
			} else {
				logger.warn("The general-type of a uml::InterfaceRealization in a pcm::OperationProvidedRole ~ uml::InterfaceRealization correspondence"
							+ "has been set to a non-OperationInterface type. This is against convention and the corresponding OperationProvidedRole will be deleted.")
				deleteCorrespondingProvidedRole(umlRealization)
			}
		}
	}
}

