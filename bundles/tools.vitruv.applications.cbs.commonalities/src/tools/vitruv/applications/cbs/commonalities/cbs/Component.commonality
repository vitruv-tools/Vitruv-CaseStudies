import tools.vitruv.applications.cbs.commonalities.domaincommon.operators._
import tools.vitruv.applications.cbs.commonalities.oo.operators._
import tools.vitruv.applications.cbs.commonalities.pcm.operators._

concept ComponentBasedSystems

// Externally contained by ComponentBasedSystems:Repository.components
referenced commonality Component {

	// Externally contained by PCM:Repository.components__Repository
	with PCM:BasicComponent

	// Contained by ObjectOrientedDesign:RepositoryPackage.subPackages
	with ObjectOrientedDesign:(
		(Package as ComponentPackage),
		(Class as ComponentClass)
	)
	whereat {
		ComponentClass in ComponentPackage.classes,
		ComponentClass.visibility = "PUBLIC",
		// Note: This condition cannot be enforced because it depends on the component's name. Instead an attribute
		// mapping takes care of setting the class name accordingly during participation instantiation.
		<- ComponentClass.name hasSuffix "Impl"
	}

	has name {
		= PCM:BasicComponent.entityName

		= prefix(ObjectOrientedDesign:ComponentClass.name, "Impl")
		-> firstUpper(ObjectOrientedDesign:ComponentPackage.name)
	}

	has providedRoles {
		// TODO We do not react to changes of the interfaces provided by these ProvidedRoles currently.
		= pcmProvidedRoles(PCM:BasicComponent.providedRoles_InterfaceProvidingEntity, "ComponentBasedSystems")

		= ooTypeReferences(ObjectOrientedDesign:ComponentClass.implementedInterfaces, "ComponentBasedSystems")
	}

	// TODO requiredRoles
}
