import tools.vitruv.applications.cbs.commonalities.java.operators._

import "http://www.eclipse.org/uml2/5.0.0/UML" as UML
import "http://www.emftext.org/java" as Java

concept ObjectOrientedDesign

// Optionally externally contained by ObjectOrientedDesign:Package.subPackages
commonality Package {

	// Optionally externally contained by UML:Package.packagedElement
	with UML:(Package, single Model, Resource)
	whereat {
		Package in Model,
		Model in Resource,
		// TODO Use a condition operator to ask the user for the model name and path
		-> Model.name = "model",
		-> Resource.path = "model/",
		-> Resource.name = "model",
		Resource.fileExtension = "uml"
	}

	// Optionally externally contained by Java:Package.javaSubPackages
	with Java:(Package in Resource)
	whereat {
		-> Resource.path = "src/",
		Resource.name = "package-info",
		Resource.fileExtension = "java"
	}

	has name {
		= UML:Package.name

		= Java:Package.name
		-> javaPackageResourcePathFromName(Java:Resource.path, "src/", Java:Package)
	}

	// Note: Uml package hierarchy is mapped to containment hierarchy of OO:Package, which is then mapped to
	// Java:Package.namespaces.
	// Note: When the Java:Package.namespaces changes for an existing Java package, we assume that this change happens
	// consistently with an update to the resource in which the Java package is contained. We therefore do not have to
	// update the Resource.path in this situation.
	has subPackages referencing ObjectOrientedDesign:Package {
		// Note: Any elements that are not of type UML:Package are implicitly ignored.
		= UML:Package.packagedElement

		// Note: When inserting a package, the operator also updates the path of the corresponding resource.
		// TODO Explicitly pass the referenced Java:Resource? Currently the operator retrieves it from the correspondence model.
		// TODO Allow the operator to update the resource path after the name or namespaces have changed, but the attribute reference still holds?
		// -> might better fit an attribute mapping
		= Java:Package.javaSubPackages(ref Package.namespaces, Package.namespaces, Package.name) 
	}

	has classes referencing ObjectOrientedDesign:Class {
		// Note: Any elements that are not of type UML:Class are implicitly ignored.
		= UML:Package.packagedElement
		// Note: Any compilation units that don't correspond to an ObjectOrientedDesign:Class are implicitly ignored.
		= Java:Package.javaPackageCompilationUnits(ref CompilationUnit.namespaces, Package.namespaces, Package.name)
	}

	has interfaces referencing ObjectOrientedDesign:Interface {
		// Note: Any elements that are not of type UML:Interface are implicitly ignored.
		= UML:Package.packagedElement
		// Note: Any compilation units that don't correspond to an ObjectOrientedDesign:Interface are implicitly ignored.
		= Java:Package.javaPackageCompilationUnits(ref CompilationUnit.namespaces, Package.namespaces, Package.name) 
	}
}
