import tools.vitruv.applications.cbs.commonalities.java.operators._
import tools.vitruv.applications.cbs.commonalities.uml.operators._

import "http://www.eclipse.org/uml2/5.0.0/UML" as UML
import "http://www.emftext.org/java" as Java

concept ObjectOrientedDesign

// Externally contained by ObjectOrientedDesign:Class.methods
referenced commonality ClassMethod {

	// Externally contained by UML:Class.ownedOperation
	with UML:Operation

	// Externally contained by Java:Class.members
	with Java:ClassMethod

	has name {
		= UML:Operation.name

		= Java:ClassMethod.name
	}

	has visibility {
		= umlVisibility(UML:Operation.visibility)

		= javaVisibility(Java:ClassMethod.annotationsAndModifiers, Java:ClassMethod)
	}

	has ^static {
		= UML:Operation.isStatic

		= javaStaticModifier(Java:ClassMethod.annotationsAndModifiers, Java:ClassMethod)
	}

	has final {
		= UML:Operation.isLeaf

		= javaFinalModifier(Java:ClassMethod.annotationsAndModifiers, Java:ClassMethod)
	}

	has abstract {
		= UML:Operation.isAbstract

		= javaAbstractModifier(Java:ClassMethod.annotationsAndModifiers, Java:ClassMethod)
	}

	has returnType {
		= umlReturnType(UML:Operation.ownedParameter, "ObjectOrientedDesign", UML:Operation)

		= javaTypeReference(Java:ClassMethod.typeReference, "ObjectOrientedDesign")
	}

	has parameters referencing ObjectOrientedDesign:MethodParameter {
		// Note: The referenced participation only accepts input parameters.
		= UML:Operation.ownedParameter

		= Java:ClassMethod.parameters
	}
}
