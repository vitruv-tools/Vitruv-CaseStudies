import tools.vitruv.applications.cbs.commonalities.java.operators._
import tools.vitruv.applications.cbs.commonalities.uml.operators._

import "http://www.eclipse.org/uml2/5.0.0/UML" as UML
import "http://www.emftext.org/java" as Java

concept ObjectOrientedDesign

// Optionally externally contained by ObjectOrientedDesign:Package.classes
commonality Class {

	// Optionally externally contained by UML:Package.packagedElement
	with UML:(Class, single Model, Resource)
	whereat {
		Class in Model,
		Model in Resource,
		// TODO Use a condition operator to ask the user for the model name and path
		// TODO Duplication with specification in ObjectOrientedDesign:Package
		-> Model.name = "model",
		-> Resource.path = "model/",
		-> Resource.name = "model",
		Resource.fileExtension = "uml"
	}

	// Optionally externally contained by Java:Package.javaPackageCompilationUnits
	// Note: We only support one classifier per compilation unit currently. Supporting multiple classifiers would
	// require use to have a separate commonality to represent the CompilationUnit.
	with Java:(Class, CompilationUnit, Resource)
	whereat {
		Class in CompilationUnit.classifiers,
		CompilationUnit in Resource,
		-> Resource.path = "src/",
		Resource.fileExtension = "java"
	}

	has name {
		= UML:Class.name

		= Java:Class.name
		// CompilationUnit name schema: '<dot-separated-namespaces>.<name>.java'
		-> javaCompilationUnitName(Java:CompilationUnit.name, Java:CompilationUnit)
		-> Java:Resource.name
	}

	has visibility {
		= umlVisibility(UML:Class.visibility)

		= javaVisibility(Java:Class.annotationsAndModifiers, Java:Class)
	}

	has final {
		= UML:Class.isFinalSpecialization

		= javaFinalModifier(Java:Class.annotationsAndModifiers, Java:Class)
	}

	has abstract {
		= UML:Class.isAbstract

		= javaAbstractModifier(Java:Class.annotationsAndModifiers, Java:Class)
	}

	// Note: No 'static' attribute, since UML has no equivalent to represent this.

	has superClass {
		// TODO We do no react to changes of the 'general' reference currently.
		= umlSingleGeneralization(UML:Class.generalization, "ObjectOrientedDesign")

		= javaTypeReferenceOrNull(Java:Class.^extends, "ObjectOrientedDesign")
	}

	has implementedInterfaces {
		// TODO We do no react to changes of the 'contract' reference currently.
		= umlInterfaceRealizations(UML:Class.interfaceRealization, "ObjectOrientedDesign")

		= javaTypeReferences(Java:Class.implements, "ObjectOrientedDesign")
	}

	has properties referencing ObjectOrientedDesign:Property {
		= UML:Class.ownedAttribute

		// Note: Any elements that are not of type Java:Field are implicitly ignored.
		= Java:Class.members
	}

	has constructors referencing ObjectOrientedDesign:Constructor {
		// Note: The participation conditions ensure that we only match constructor operations.
		= UML:Class.ownedOperation

		// Note: Any elements that are not of type Java:Constructor are implicitly ignored.
		= Java:Class.members
	}

	has methods referencing ObjectOrientedDesign:ClassMethod {
		= UML:Class.ownedOperation

		// Note: Any elements that are not of type Java:ClassMethod are implicitly ignored.
		= Java:Class.members
	}
}
