import org.eclipse.uml2.uml.Property
import org.emftext.language.java.members.ClassMethod
import org.emftext.language.java.members.Field
import tools.vitruv.applications.umljava.util.UmlJavaCorrespondenceTag

import static tools.vitruv.applications.umljava.util.CommonUtil.showMessage
import static tools.vitruv.applications.util.temporary.java.JavaMemberAndParameterUtil.*

import static extension edu.kit.ipd.sdq.commons.util.java.lang.IterableUtil.claimNotMany
import static extension tools.vitruv.applications.util.temporary.java.JavaModifierUtil.*

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: umlToJavaAttribute
in reaction to changes in UML
execute actions in Java

import routines umlToJavaTypePropagation using qualified names

//We can not define one single reaction for attribute creation in enums and classes because
//they don't share a common superclass for "having ownedAttributes"
reaction UmlPropertyInsertedInClass {
    after element uml::Property inserted in uml::Class[ownedAttribute]
    call {
        createOrFindJavaField(newValue, affectedEObject)
        insertJavaField(newValue, affectedEObject)
    }
}

reaction UmlPropertyInsertedInDataType {
    after element uml::Property inserted in uml::DataType[ownedAttribute]
    call {
        createOrFindJavaField(newValue, affectedEObject)
        insertJavaField(newValue, affectedEObject)
    }
}

routine createOrFindJavaField(uml::Property umlProperty, uml::Classifier umlClassifier) {
    match {
        val jClassifier = retrieve java::ConcreteClassifier corresponding to umlClassifier
        require absence of java::Field corresponding to umlProperty
    }
    action {
        call {
            val foundField = jClassifier.members.filter(Field).filter[name == umlProperty.name].claimNotMany
            if (foundField === null) {
                createJavaField(umlProperty) 
            } else {
                addAttributeCorrespondence(umlProperty, foundField)
                val getter = jClassifier.methods.filter(ClassMethod).filter [ name == buildGetterName(umlProperty.name) ].claimNotMany
                val setter = jClassifier.methods.filter(ClassMethod).filter [ name == buildSetterName(umlProperty.name) ].claimNotMany
                if (getter !== null) {
                	createAccessorCorrespondence(umlProperty, getter, UmlJavaCorrespondenceTag.GETTER)
                }
                if (setter !== null) {
                	createAccessorCorrespondence(umlProperty, setter, UmlJavaCorrespondenceTag.SETTER)
                }
            }
            changeJavaAttributeType(umlProperty)
        }
    }    
}

routine createJavaField(uml::Property umlProperty) {
    match {
        require absence of java::Field corresponding to umlProperty
    }
    action {
        val javaField = create java::Field and initialize {
            javaField.name = umlProperty.name
            javaField.makePublic
        }
        add correspondence between umlProperty and javaField
        call {
            createOrFindJavaGetter(umlProperty, javaField)
            createOrFindJavaSetter(umlProperty, javaField)
        }
    }
}

routine addAttributeCorrespondence(uml::Property umlAttribute, java::Field javaField) {
     action {
         add correspondence between umlAttribute and javaField
     }
}

routine insertJavaField(uml::Property umlProperty, uml::Classifier umlClassifier) {
    match {
        val javaField = retrieve java::Field corresponding to umlProperty
        val javaClassifier = retrieve java::ConcreteClassifier corresponding to umlClassifier
        val javaGetter = retrieve optional java::ClassMethod corresponding to umlProperty tagged with UmlJavaCorrespondenceTag.GETTER
        val javaSetter = retrieve optional java::ClassMethod corresponding to umlProperty tagged with UmlJavaCorrespondenceTag.SETTER
    }
    action {
        update javaClassifier {
            javaClassifier.members += javaField
            javaGetter.ifPresent [ javaClassifier.members += it ]
            javaSetter.ifPresent [ javaClassifier.members += it ]
        }
    }
}

reaction UmlAttributeDeleted {
    after element uml::Property deleted
    call deleteJavaField(affectedEObject)
}

routine deleteJavaField(uml::Property umlProperty) {
    match {
        val javaField = retrieve java::Field corresponding to umlProperty
        val javaGetter = retrieve optional java::ClassMethod corresponding to umlProperty tagged with UmlJavaCorrespondenceTag.GETTER
        val javaSetter = retrieve optional java::ClassMethod corresponding to umlProperty tagged with UmlJavaCorrespondenceTag.SETTER

    }
    action {
        delete javaField
        call {
        	deleteJavaAccessor(umlProperty, UmlJavaCorrespondenceTag.GETTER)
        	deleteJavaAccessor(umlProperty, UmlJavaCorrespondenceTag.SETTER)
        }
    }
}

routine deleteJavaAccessor(uml::Property umlProperty, String tag) {
	match {
		val javaAccessor = retrieve java::ClassMethod corresponding to umlProperty tagged with tag
	}
	action {
		delete javaAccessor
	}
}

reaction UmlAttributeMadeFinal {
    after attribute replaced at uml::Property[isReadOnly]
    call setJavaAttributeFinal(affectedEObject)
}

routine setJavaAttributeFinal(uml::Property umlAttr) {
    match {
        val jAttr = retrieve java::Field corresponding to umlAttr
    }
    action {
        update jAttr {
            jAttr.final = umlAttr.readOnly
        }
    }
}

reaction UmlAttributeMadeStatic {
    after attribute replaced at uml::Property[isStatic]
    call setStatic(affectedEObject)
}

routine setStatic(uml::Property umlAttr) {
    match {
        val jAttr = retrieve java::Field corresponding to umlAttr tagged with ""
    }
    action {
        update jAttr {
            jAttr.static = umlAttr.isStatic
        }
        //TODO: updating the static property of a java field requires an update of its corresponding accessors
    }
}

reaction UmlAttributeTypeChanged {
    after element uml::Type replaced at uml::Property[type]
    call changeJavaAttributeType(affectedEObject)
}

reaction UmlLowerMultiplicityChanged {
    after attribute replaced at uml::LiteralInteger[value]
    with affectedEObject.owner instanceof Property
    call changeJavaAttributeType(affectedEObject.owner as Property)
}

reaction UmlUpperMultiplicityChanged {
    after attribute replaced at uml::LiteralUnlimitedNatural[value]
    with affectedEObject.owner instanceof Property
    call changeJavaAttributeType(affectedEObject.owner as Property)
}

routine changeJavaAttributeType(uml::Property uAttribute) {
    match {
        val jAttribute = retrieve java::Field corresponding to uAttribute
        val jCustomType = retrieve optional java::ConcreteClassifier corresponding to uAttribute.type
        val jGetter = retrieve optional java::ClassMethod corresponding to uAttribute tagged with UmlJavaCorrespondenceTag.GETTER
        val jSetter = retrieve optional java::ClassMethod corresponding to uAttribute tagged with UmlJavaCorrespondenceTag.SETTER
    }
    action {
        call {
            umlToJavaTypePropagation.propagatePropertyTypeChanged(uAttribute, jAttribute, jCustomType.orElse(null))
            jGetter.ifPresent [ updateAttributeTypeInGetter(it, jAttribute) ]
            jSetter.ifPresent [ updateAttributeTypeInSetter(it, jAttribute) ]
        }
    }
}


routine createOrFindJavaGetter(uml::Property uAttribute, java::Field jAttribute) {
    action {
        call {
            var javaGetter = getJavaGettersOfAttribute(jAttribute).head
            if (javaGetter === null) {
                javaGetter = createGetterForAttribute(jAttribute)
            }
            createAccessorCorrespondence(uAttribute, javaGetter, UmlJavaCorrespondenceTag.GETTER)
        }
    }
}

routine createOrFindJavaSetter(uml::Property uAttribute, java::Field jAttribute) {
    action {
        call {
            var javaSetter = getJavaSettersOfAttribute(jAttribute).head
            if (javaSetter === null) {
                javaSetter = createSetterForAttribute(jAttribute)
            }
            createAccessorCorrespondence(uAttribute, javaSetter, UmlJavaCorrespondenceTag.SETTER)
        }
    }
}

routine createAccessorCorrespondence(uml::Property uAttribute, java::ClassMethod jMethod, String tag) {
    action {
        add correspondence between uAttribute and jMethod tagged with tag
    }
}

reaction UmlAttributeRenamed {
    after attribute replaced at uml::Property[name]
    call renameJavaAttribute(newValue, oldValue, affectedEObject)
}

routine renameJavaAttribute(String newName, String oldName, uml::Property uAttribute) {
    match {
        val jAttribute = retrieve java::Field corresponding to uAttribute
        val jGetter = retrieve optional java::ClassMethod corresponding to uAttribute tagged with UmlJavaCorrespondenceTag.GETTER
        val jSetter = retrieve optional java::ClassMethod corresponding to uAttribute tagged with UmlJavaCorrespondenceTag.SETTER
    }
    action {
        call {
            jAttribute.name = uAttribute.name
            jGetter.ifPresent [ renameGetterOfAttribute(it, jAttribute) ]
            jSetter.ifPresent [ renameSetter(it, jAttribute, oldName) ]
        }
    }
}

reaction UmlAttributeCreatedInInterface {
    after element uml::Property inserted in uml::Interface[ownedAttribute]
    call showMessage(userInteractor, "We do not support adding attributes to interfaces. Please delete " + newValue + " from " + affectedEObject)
}

reaction UmlInterfaceMadeFinal {
    after attribute replaced at uml::Interface[isFinalSpecialization]
    with newValue == true
    call showMessage(userInteractor, "We do not support making final interfaces. Please change " + affectedEObject + " to non-final. ")
}

