import org.eclipse.uml2.uml.Property
import org.emftext.language.java.members.Field
import tools.vitruv.applications.umljava.uml2java.UmlToJavaTag

import static tools.vitruv.applications.umljava.util.CommonUtil.showMessage
import static tools.vitruv.applications.util.temporary.java.JavaMemberAndParameterUtil.*

import static extension edu.kit.ipd.sdq.commons.util.java.lang.IterableUtil.claimNotMany
import static extension tools.vitruv.applications.util.temporary.java.JavaModifierUtil.*

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: umlToJavaAttribute
in reaction to changes in UML
execute actions in Java

import routines umlToJavaTypePropagation using qualified names

reaction UmlAttributeCreatedInClass {
    after element uml::Property created and inserted in uml::Class[ownedAttribute]
    call {
        createOrFindJavaAttribute(affectedEObject, newValue)
    }
}

//We can not define one single reaction for attribute creation in enums and classes because
//They don't have a common superclass for "having ownedAttributes"
reaction UmlAttributeCreatedInDataType {//Enum is a DataType
    after element uml::Property created and inserted in uml::DataType[ownedAttribute]
    call {
        createOrFindJavaAttribute(affectedEObject, newValue)
    }
}

routine createOrFindJavaAttribute(uml::Classifier uClassifier, uml::Property umlAttribute) {
    match {
        val jClassifier = retrieve java::ConcreteClassifier corresponding to uClassifier
        require absence of java::Field corresponding to umlAttribute
    }
    action {
        call {
            val foundField = jClassifier.members.filter(Field).filter[name == umlAttribute.name].claimNotMany
            if (foundField === null) {
                createJavaAttribute(uClassifier, umlAttribute) 
            } else {
                addAttributeCorrespondence(umlAttribute, foundField)
                createOrFindJavaGetter(umlAttribute, foundField)
                createOrFindJavaSetter(umlAttribute, foundField)
            }
        }
    }
}

routine addAttributeCorrespondence(uml::Property umlAttribute, java::Field javaField) {
     action {
         add correspondence between umlAttribute and javaField
     }
}

routine createJavaAttribute(uml::Classifier uClassifier, uml::Property umlAttribute) {
    match {
        val jClassifier = retrieve java::ConcreteClassifier corresponding to uClassifier
        require absence of java::Field corresponding to umlAttribute
        require absence of java::Method corresponding to umlAttribute tagged with UmlToJavaTag.GETTER
        require absence of java::Method corresponding to umlAttribute tagged with UmlToJavaTag.SETTER
    }
    action {
        val javaAttribute = create java::Field and initialize {
            javaAttribute.name = umlAttribute.name
            javaAttribute.makePublic
        }
        update jClassifier {
            jClassifier.members += javaAttribute
        }
        add correspondence between umlAttribute and javaAttribute
        call {
			createOrFindJavaGetter(umlAttribute, javaAttribute)
        	createOrFindJavaSetter(umlAttribute, javaAttribute)
			changeJavaAttributeType(umlAttribute)
        }
    }
}

reaction UmlAttributeDeletedFromClass {
    after element uml::Property deleted and removed from uml::Class[ownedAttribute]
    call deleteJavaAttribute(oldValue, affectedEObject)
}

reaction UmlAttributeDeletedFromDataType {
    after element uml::Property deleted and removed from uml::DataType[ownedAttribute]
    call deleteJavaAttribute(oldValue, affectedEObject)
}

routine deleteJavaAttribute(uml::Property umlAttr, uml::Classifier umlClassifier) {
    match {
        val jAttr = retrieve java::Field corresponding to umlAttr
        val jGetter = retrieve optional java::ClassMethod corresponding to umlAttr tagged with UmlToJavaTag.GETTER
        val jSetter = retrieve optional java::ClassMethod corresponding to umlAttr tagged with UmlToJavaTag.SETTER

    }
    action {
        delete jAttr
        delete jGetter?.get
        delete jSetter?.get
    }
}

reaction UmlAttributeMadeFinal {
    after attribute replaced at uml::Property[isReadOnly]
    call setJavaAttributeFinal(affectedEObject)
}

routine setJavaAttributeFinal(uml::Property umlAttr) {
    match {
        val jAttr = retrieve java::Field corresponding to umlAttr
    }
    action {
        update jAttr {
            jAttr.final = umlAttr.readOnly
        }
    }
}

reaction UmlAttributeMadeStatic {
    after attribute replaced at uml::Property[isStatic]
    call setStatic(affectedEObject)
}

routine setStatic(uml::Property umlAttr) {
    match {
        val jAttr = retrieve java::Field corresponding to umlAttr tagged with ""
    }
    action {
        update jAttr {
            jAttr.static = umlAttr.isStatic
        }
        //TODO: updating the static property of a java field requires an update of its corresponding accessors
    }
}

reaction UmlAttributeTypeChanged {
    after element uml::Type replaced at uml::Property[type]
    call changeJavaAttributeType(affectedEObject)
}

reaction UmlLowerMultiplicityChanged {
    after attribute replaced at uml::LiteralInteger[value]
    with affectedEObject.owner instanceof Property
    call changeJavaAttributeType(affectedEObject.owner as Property)
}

reaction UmlUpperMultiplicityChanged {
    after attribute replaced at uml::LiteralUnlimitedNatural[value]
    with affectedEObject.owner instanceof Property
    call changeJavaAttributeType(affectedEObject.owner as Property)
}

routine changeJavaAttributeType(uml::Property uAttribute) {
    match {
        val jAttribute = retrieve java::Field corresponding to uAttribute
        val jCustomType = retrieve optional java::ConcreteClassifier corresponding to uAttribute.type
        val jGetter = retrieve optional java::ClassMethod corresponding to uAttribute tagged with UmlToJavaTag.GETTER
        val jSetter = retrieve optional java::ClassMethod corresponding to uAttribute tagged with UmlToJavaTag.SETTER
    }
    action {
        call {
        	umlToJavaTypePropagation.propagatePropertyTypeChanged(uAttribute, jAttribute, jCustomType.orElse(null))
		    jGetter.ifPresent [ updateAttributeTypeInGetter(it, jAttribute) ]
		    jSetter.ifPresent [ updateAttributeTypeInSetter(it, jAttribute) ]
        }
    }
}


routine createOrFindJavaGetter(uml::Property uAttribute, java::Field jAttribute) {
    action {
        call {
            var javaGetter = getJavaGettersOfAttribute(jAttribute).head
            if (javaGetter === null) {
            	javaGetter = createGetterForAttribute(jAttribute)
            }
            createAccessorCorrespondence(uAttribute, javaGetter, UmlToJavaTag.GETTER)
        }
    }
}

routine createOrFindJavaSetter(uml::Property uAttribute, java::Field jAttribute) {
    action {
        call {
            var javaSetter = getJavaSettersOfAttribute(jAttribute).head
            if (javaSetter === null) {
            	javaSetter = createSetterForAttribute(jAttribute)
            }
            createAccessorCorrespondence(uAttribute, javaSetter, UmlToJavaTag.SETTER)
        }
    }
}

routine createAccessorCorrespondence(uml::Property uAttribute, java::ClassMethod jMethod, String tag) {
	action {
		add correspondence between uAttribute and jMethod tagged with tag
	}
}

reaction UmlAttributeRenamed {
    after attribute replaced at uml::Property[name]
    call renameJavaAttribute(newValue, oldValue, affectedEObject)
}

routine renameJavaAttribute(String newName, String oldName, uml::Property uAttribute) {
    match {
        val jAttribute = retrieve java::Field corresponding to uAttribute
        val jGetter = retrieve optional java::ClassMethod corresponding to uAttribute tagged with UmlToJavaTag.GETTER
        val jSetter = retrieve optional java::ClassMethod corresponding to uAttribute tagged with UmlToJavaTag.SETTER
    }
    action {
        call {
            jAttribute.name = uAttribute.name
            jGetter.ifPresent [ renameGetterOfAttribute(it, jAttribute) ]
            jSetter.ifPresent [ renameSetter(it, jAttribute, oldName) ]
        }
    }
}

reaction UmlAttributeCreatedInInterface {
    after element uml::Property created and inserted in uml::Interface[ownedAttribute]
    call showMessage(userInteractor, "We do not support adding attributes to interfaces. Please delete " + newValue + " from " + affectedEObject)
}

reaction UmlInterfaceMadeFinal {
    after attribute replaced at uml::Interface[isFinalSpecialization]
    with newValue == true
    call showMessage(userInteractor, "We do not support making final interfaces. Please change " + affectedEObject + " to non-final. ")
}

