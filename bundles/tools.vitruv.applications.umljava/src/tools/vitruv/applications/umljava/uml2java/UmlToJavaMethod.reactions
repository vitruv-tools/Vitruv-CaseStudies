import org.eclipse.uml2.uml.Class
import org.eclipse.uml2.uml.Classifier
import org.eclipse.uml2.uml.DataType
import org.eclipse.uml2.uml.Interface
import org.eclipse.uml2.uml.Package
import org.eclipse.uml2.uml.Parameter
import org.eclipse.uml2.uml.ParameterDirectionKind
import org.eclipse.uml2.uml.Property
import org.eclipse.uml2.uml.VisibilityKind
import org.emftext.language.java.members.ClassMethod
import org.emftext.language.java.members.Constructor
import org.emftext.language.java.members.InterfaceMethod
import org.emftext.language.java.types.TypesFactory

import static tools.vitruv.applications.umljava.util.CommonUtil.showMessage

import static extension tools.vitruv.applications.util.temporary.java.JavaModifierUtil.*

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: umlToJavaMethod
in reaction to changes in UML
execute actions in Java

import routines umlToJavaTypePropagation using qualified names

//===========================================
//=========================================== Method
//===========================================


reaction UmlMethodCreated {
    after element uml::Operation created and inserted in uml::Class[ownedOperation]
    call {
        createJavaMethod(affectedEObject, newValue)       
    }
}

//We need separate Reactions for Class and Enums, because they don't have a common
//superClass for "having ownedOperation"
reaction UmlMethodCreatedInDataType {
    after element uml::Operation created and inserted in uml::DataType[ownedOperation]
    call {
        createJavaMethod(affectedEObject, newValue)       
    }
}
routine createJavaMethod(uml::Classifier uClassifier, uml::Operation uOperation) {
    action {
        call {
            if (uClassifier.name.toFirstUpper == uOperation.name.toFirstUpper) {
                createOrFindJavaConstructor(uClassifier, uOperation)
            } else if (uClassifier instanceof Class
                || uClassifier instanceof DataType) {
                createOrFindJavaClassMethod(uClassifier, uOperation)
            } else if (uClassifier instanceof Interface) {
                createOrFindJavaInterfaceMethod(uClassifier, uOperation)
            } else {
                logger.warn("Invalid creation of " + uOperation + ", containing UML-Classifier is neither a Class, nor an Interface nor a DataType")
            }
        }
    }
}

// Shared between interface methods, class methods and constructors:
routine addMethodCorrespondence(java::Member javaMethodOrConstructor, uml::Operation uOperation) {
     action {
         add correspondence between uOperation and javaMethodOrConstructor
     }
}

routine createOrFindJavaClassMethod(uml::Classifier uClassifier, uml::Operation uOperation) {
    match {
        val jClassifier = retrieve java::ConcreteClassifier corresponding to uClassifier
        require absence of java::ClassMethod corresponding to uOperation
    }
    action {
        call {
            val foundMethod = jClassifier.members.filter(ClassMethod).findFirst[name == uOperation.name]
            if (foundMethod === null) {
                createJavaClassMethod(jClassifier, uOperation)
            } else {
                addMethodCorrespondence(foundMethod, uOperation)
            }
        }
    }
}

routine createJavaClassMethod(java::ConcreteClassifier jClassifier, uml::Operation uOperation) {
    action {
        val javaMethod = create java::ClassMethod and initialize {
            javaMethod.name = uOperation.name;
            setJavaVisibility(javaMethod, uOperation.visibility)
        }
        update jClassifier {
            jClassifier.members += javaMethod;
        }
        add correspondence between uOperation and javaMethod
        call setJavaMethodReturnType(uOperation, uOperation.getReturnResult) // if uOperation.getReturnResult is null, setReturnType should set void
    }
}

routine createOrFindJavaConstructor(uml::Classifier uClassifier, uml::Operation uOperation) {
    match {
        val jClassifier = retrieve java::ConcreteClassifier corresponding to uClassifier
        require absence of java::Constructor corresponding to uOperation
    }
    action {
        call {
            val foundConstructor = jClassifier.members.filter(Constructor).findFirst[name == uOperation.name]
            if (foundConstructor === null) {
                createJavaConstructor(jClassifier, uOperation)
            } else {
                addMethodCorrespondence(foundConstructor, uOperation)
            }
        }
    }
}

routine createJavaConstructor(java::ConcreteClassifier jClassifier, uml::Operation uOperation) {
    action {
        val jConstructor = create java::Constructor and initialize {
            jConstructor.name = uOperation.name;
            setJavaVisibility(jConstructor, uOperation.visibility)
        }
        update jClassifier {
            jClassifier.members += jConstructor;
        }
        add correspondence between uOperation and jConstructor
    }
}

reaction UmlClassMethodDeleted {
    after element uml::Operation deleted and removed from uml::Class[ownedOperation]
    call deleteJavaMethod(oldValue)
}
//uml::Interface and uml::Class and uml::DataType don't have a common superClass for "having ownedOperation",
//so we need separate reactions
reaction UmlInterfaceMethodDeleted {
    after element uml::Operation deleted and removed from uml::Interface[ownedOperation]
    call deleteJavaMethod(oldValue)
}
//uml::Enumeration is a uml::DataType
reaction UmlDataTypeMethodDeleted {
    after element uml::Operation deleted and removed from uml::DataType[ownedOperation]
    call deleteJavaMethod(oldValue)
}

routine deleteJavaMethod(uml::Operation uOperation) {
    match {
        val jMeth = retrieve java::Method corresponding to uOperation
    }
    action {
        delete jMeth
    }
}

reaction UmlMethodReturnTypeChanged {
    after element uml::Type replaced at uml::Parameter[type]
    with affectedEObject.direction == ParameterDirectionKind.RETURN_LITERAL
    call setJavaMethodReturnType(affectedEObject.operation, affectedEObject)
}

// if uParam is null, then the return type will be set to 'void'
routine setJavaMethodReturnType(uml::Operation uOperation, uml::Parameter uParam) {
    match {
        val jMethod = retrieve java::Method corresponding to uOperation
        val jCustomType = retrieve optional java::ConcreteClassifier corresponding to uParam?.type
    }
    action {
        execute {
            if (uParam !== null){
                umlToJavaTypePropagation.propagateReturnParameterTypeChanged(uParam, jMethod, jCustomType.orElse(null))
            }
            else {
                jMethod.typeReference = TypesFactory.eINSTANCE.createVoid
            }
        }
    }
}

reaction UmlOperationMadeStatic {
    after attribute replaced at uml::Operation[isStatic]
    call setStatic(affectedEObject)
}

routine setStatic(uml::Operation uFeat) {
    match {
        val jMethod = retrieve java::Method corresponding to uFeat tagged with ""
    }
    action {
        update jMethod {
            jMethod.static = uFeat.isStatic
        }
    }
}

reaction UmlMethodMadeAbstract {
    after attribute replaced at uml::Operation[isAbstract] 
    call setJavaMethodAbstract(affectedEObject)
}

routine setJavaMethodAbstract(uml::Operation uOperation) {
    match {
        val javaClass = retrieve java::Class corresponding to uOperation.class_
        val javaMethod = retrieve java::ClassMethod corresponding to uOperation
    }
    action {
        update javaMethod {
            javaMethod.abstract =  uOperation.abstract
        }
    }    
}

reaction UmlInterfaceMethodCreated {
    after element uml::Operation created and inserted in uml::Interface[ownedOperation]
    call createJavaMethod(affectedEObject, newValue)
}

routine createOrFindJavaInterfaceMethod(uml::Interface uInterface, uml::Operation uOperation) {
    match {
        val jInterface = retrieve java::Interface corresponding to uInterface
        require absence of java::InterfaceMethod corresponding to uOperation
    }
    action {
        call {
            val foundMethod = uInterface.members.filter(InterfaceMethod).findFirst[name == uOperation.name]
            if (foundMethod === null) {
                createJavaInterfaceMethod(jInterface, uOperation)
            } else {
                addMethodCorrespondence(foundMethod, uOperation)
            }
        }
    }
}

routine createJavaInterfaceMethod(java::Interface jInterface, uml::Operation uOperation) {
    action {
        val javaMethod = create java::InterfaceMethod and initialize {
            javaMethod.name = uOperation.name;
            javaMethod.makePublic
        }
        update jInterface {
            jInterface.members += javaMethod;
        }
        add correspondence between uOperation and javaMethod
        call setJavaMethodReturnType(uOperation, uOperation.getReturnResult) // returnResult may be null
    }
}

reaction UmlMethodMadeFinal {
    after attribute replaced at uml::Operation[isLeaf]
    with !(affectedEObject.class_ instanceof Interface)
    call setJavaMethodFinal(affectedEObject, newValue)
}

routine setJavaMethodFinal(uml::Operation uOperation, Boolean isFinal) {
    match {
        val jMethod = retrieve java::ClassMethod corresponding to uOperation
    }
    action {
        update jMethod {
            jMethod.final = isFinal
        }
    }
}


//===========================================
//=========================================== NamedElement
//===========================================


reaction UmlElementVisibilityChanged {
    after attribute replaced at uml::NamedElement[visibility]
    with !(affectedEObject.eContainer instanceof Interface)
    call changeJavaElementVisibility(affectedEObject)
}

routine changeJavaElementVisibility(uml::NamedElement uElem) {
    match {
        val jElem = retrieve java::AnnotableAndModifiable corresponding to uElem tagged with ""
    }
    action {
        update jElem {
            setJavaVisibility(jElem, uElem.visibility);
        }
    }
}

reaction UmlNamedElementRenamed{
    after attribute replaced at uml::NamedElement[name] 
    with !(affectedEObject instanceof Classifier)
        && !(affectedEObject instanceof Property)
        && !(affectedEObject instanceof Package)
    call renameJavaNamedElement(affectedEObject, newValue)
}

routine renameJavaNamedElement(uml::NamedElement uElem, String name) {
    match {
        val jElem = retrieve java::NamedElement corresponding to uElem
    }
    action {
        update jElem {
            jElem.name = name
        }
    }
}


//===========================================
//=========================================== Parameter
//===========================================


reaction UmlParameterRenamed{
    after attribute replaced at uml::Parameter[name]
    with affectedEObject.direction == ParameterDirectionKind.IN_LITERAL
    call createMissingJavaParameter(affectedEObject)
}

routine createMissingJavaParameter(uml::Parameter uParameter) {
    match {
        require absence of java::OrdinaryParameter corresponding to uParameter
    }
    action {
        call createJavaParameter(uParameter.operation, uParameter)
    }
}

reaction UmlParameterCreated {
    after element uml::Parameter created and inserted in uml::Operation[ownedParameter]
    with newValue.direction == ParameterDirectionKind.IN_LITERAL && newValue.name !== null
    call createJavaParameter(affectedEObject, newValue)

}

routine createJavaParameter(uml::Operation uMeth, uml::Parameter umlParam) {
    match {
        val javaMethod = retrieve java::Parametrizable corresponding to uMeth
        val customType = retrieve optional java::ConcreteClassifier corresponding to umlParam.type
        require absence of java::OrdinaryParameter corresponding to umlParam
    }
    action {
        val javaParam = create java::OrdinaryParameter and initialize {
            javaParam.name = umlParam.name;
        }
        update javaMethod {
            javaMethod.parameters += javaParam;
        }
        add correspondence between javaParam and umlParam
        call changeJavaParameterType(umlParam, umlParam.type)
        // TODO On initialization the Interfaces or DataTypes may not yet be synchronized, 
        // because uml changes may have already been applied and Components are synchronized before Interfaces.
        // But the typeChanged-Change will still occur after the containment hierarchy is established and correctly propagate the type information.
    }
}

reaction UmlReturnParameterDeleted {
    after element uml::Parameter deleted and removed from uml::Operation[ownedParameter]
    with oldValue.direction == ParameterDirectionKind.RETURN_LITERAL
    call setJavaMethodReturnType(affectedEObject, affectedEObject.getReturnResult)
}

reaction UmlParameterDeleted {
    after element uml::Parameter deleted and removed from uml::Operation[ownedParameter]
    with oldValue.direction == ParameterDirectionKind.IN_LITERAL
    call deleteJavaParameter(oldValue)
}

routine deleteJavaParameter(uml::Parameter uParam) {
    match {
        val jParam = retrieve java::OrdinaryParameter corresponding to uParam
    }
    action {
        delete jParam
    }
}

reaction UmlParameterTypeChanged {
    after element uml::Type replaced at uml::Parameter[type]
    with affectedEObject.direction == ParameterDirectionKind.IN_LITERAL
    call  changeJavaParameterType(affectedEObject, newValue)
}

routine changeJavaParameterType(uml::Parameter uParam, uml::Type uType) {
    match {
        val jParam = retrieve java::OrdinaryParameter corresponding to uParam
        val jCustomType = retrieve optional java::ConcreteClassifier corresponding to uType
    }
    action {
        call {
            umlToJavaTypePropagation.propagateOrdinaryParameterTypeChanged(uParam, jParam, jCustomType.orElse(null))
        }
    }
}

reaction RegularOrReturnParameterLowerChanged {
    after element replaced at uml::Parameter[lowerValue]
    call adaptParameterBoundChanged(affectedEObject.operation, affectedEObject)
}

reaction RegularOrReturnParameterUpperChanged {
    after element replaced at uml::Parameter[upperValue]
    call adaptParameterBoundChanged(affectedEObject.operation, affectedEObject)
}

reaction RegularOrReturnParameterIntegerBoundChanged {
    after attribute replaced at uml::LiteralInteger[value]
    with affectedEObject.owner instanceof Parameter 
        && affectedEObject.value == newValue
    call adaptParameterBoundChanged((affectedEObject.owner as Parameter).operation, affectedEObject.owner as Parameter)
}

reaction RegularOrReturnParameterUnlimitedBoundChanged {
    after attribute replaced at uml::LiteralUnlimitedNatural[value]
    with affectedEObject.owner instanceof Parameter 
        && affectedEObject.value == newValue
    call adaptParameterBoundChanged((affectedEObject.owner as Parameter).operation, affectedEObject.owner as Parameter)
}

routine adaptParameterBoundChanged(uml::Operation uOperation, uml::Parameter uParam) {
    action {
        execute {
            if(uParam.direction == ParameterDirectionKind.RETURN_LITERAL) {
                setJavaMethodReturnType(uOperation, uParam)
            } else if (uParam.direction == ParameterDirectionKind.IN_LITERAL) {
                changeJavaParameterType(uParam, uParam.type)
            }
        }
    }
}

reaction UmlParameterDirectionChangedFromIn {
    after attribute replaced at uml::Parameter[direction]
    with oldValue == ParameterDirectionKind.IN_LITERAL
    call deleteJavaParameter(affectedEObject)
}

reaction UmlParameterDirectionChangedFromReturn {
    after attribute replaced at uml::Parameter[direction]
    with oldValue == ParameterDirectionKind.RETURN_LITERAL
    call adaptParameterDirectionChangedFromReturn(affectedEObject.operation)
}

routine adaptParameterDirectionChangedFromReturn(uml::Operation uOperation) {
    match {
        val jMethod = retrieve java::Method corresponding to uOperation
    }
    action {
        update jMethod {
            jMethod.typeReference = TypesFactory.eINSTANCE.createVoid
        }
    }
}

reaction UmlParameterDirectionChangedToIn {
    after attribute replaced at uml::Parameter[direction]
    with newValue == ParameterDirectionKind.IN_LITERAL
    call createJavaParameter(affectedEObject.operation, affectedEObject)
}

reaction UmlParameterDirectionChangedToReturn {
    after attribute replaced at uml::Parameter[direction]
    with newValue == ParameterDirectionKind.RETURN_LITERAL
    call adaptParameterDirectionChangedToReturn(affectedEObject.operation, affectedEObject)
}

routine adaptParameterDirectionChangedToReturn(uml::Operation uOperation, uml::Parameter uParam) {
    match {
        val jMethod = retrieve java::Method corresponding to uOperation
        val jParam = retrieve optional java::OrdinaryParameter corresponding to uParam
        val jCustomType = retrieve optional java::ConcreteClassifier corresponding to uParam.type
    }
    action {
        execute umlToJavaTypePropagation.propagateReturnParameterTypeChanged(uParam, jMethod, jCustomType.orElse(null))
    }
}

//===========================================
//=========================================== Unsupported
//===========================================

reaction UmlParameterDirectionKindChangedInvalid {
    after attribute replaced at uml::Parameter[direction]
    with (newValue !== ParameterDirectionKind.RETURN_LITERAL)
        && (newValue !== ParameterDirectionKind.IN_LITERAL)
    call showMessage(userInteractor, "The ParameterDirectionKind " + newValue + " is not supported")
}

reaction UmlInterfaceMethodVisibilityChanged {
    after attribute replaced at uml::Operation[visibility]
    with (affectedEObject.eContainer instanceof Interface)
        && newValue != VisibilityKind.PUBLIC_LITERAL
    call showMessage(userInteractor, "Non-public operations in interface are not valid. Please set " + affectedEObject + " to public")
}

reaction UmlInterfaceMethodMadeFinal {
    after attribute replaced at uml::Operation[isLeaf]
    with affectedEObject.class_ instanceof Interface
    call showMessage(userInteractor, "Final Operations in Interfaces are not supported. Please undo it: " + affectedEObject)
}
