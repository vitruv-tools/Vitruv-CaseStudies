import edu.kit.ipd.sdq.commons.util.org.eclipse.emf.common.util.URIUtil
import org.eclipse.uml2.uml.Model
import org.eclipse.uml2.uml.UMLFactory
import org.eclipse.uml2.uml.UMLPackage
import org.emftext.language.java.classifiers.Class
import org.emftext.language.java.classifiers.Interface
import tools.vitruv.extensions.dslsruntime.reactions.helper.PersistenceHelper

import static tools.vitruv.applications.util.temporary.uml.UmlClassifierAndPackageUtil.findUmlPackage
import static tools.vitruv.applications.util.temporary.uml.UmlClassifierAndPackageUtil.findUmlClass
import static tools.vitruv.applications.util.temporary.uml.UmlClassifierAndPackageUtil.findUmlInterface
import static tools.vitruv.applications.umljava.util.CommonUtil.showMessage
import static tools.vitruv.applications.util.temporary.uml.UmlTypeUtil.*
import static tools.vitruv.applications.util.temporary.java.JavaTypeUtil.*
import static com.google.common.base.Preconditions.checkState

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: javaToUmlClassifier
in reaction to changes in Java
execute actions in UML

//===========================================
//=========================================== All Types
//===========================================

routine addTypeCorrespondence(java::ConcreteClassifier jClassifier, uml::Type uType, java::CompilationUnit jCompUnit) {
	action {
		add correspondence between uType and jClassifier
        add correspondence between uType and jCompUnit
	}
}

//===========================================
//=========================================== Class
//===========================================

routine detectOrCreateUmlModel(EObject alreadyPersistedEObject) { // TODO TS This routine needs to be broken up!
	match {
		require absence of uml::Model corresponding to UMLPackage.Literals.MODEL
	}
	action {
		execute {
    		val MODELNAME_INPUTMESSAGE = "Please enter a name for the UML root model (no file ending)"
    		val MODELPATH_INPUTMESSAGE = "Please enter a path for the UML root model (project relative)"
			var userModelName = userInteractor.textInputDialogBuilder.message(MODELNAME_INPUTMESSAGE).startInteraction()
			var userModelPath = userInteractor.textInputDialogBuilder.message(MODELPATH_INPUTMESSAGE).startInteraction()
			if (userModelName.nullOrEmpty) {
				userModelName = "model"
			}
			if (userModelPath.nullOrEmpty) {
                userModelPath = "model"
            }
            val rootModelFile = userModelPath + "/" + userModelName + ".uml"
            //check if a model at the specified path already exists; create one if necessary
			var Model umlRootModel = null
			if(alreadyPersistedEObject === null) {
				// no objects persisted jet -> can't automatically retrieve projectPath
				throw new UnsupportedOperationException(
					"Cannot persist/load a uml::Model from JavaToUml-reactions without any previously persisted elements."
				);
			}
			val uri = PersistenceHelper.getURIFromSourceProjectFolder(alreadyPersistedEObject, rootModelFile)
			if (URIUtil.existsResourceAtUri(uri)) {
				// The resource is only found if it was previously persisted, which only happens after the change propagation terminates.
				// This should not be a problem, as long as any created model is registered on creation, to prevent creating a second one.
				val resource = alreadyPersistedEObject.eResource.resourceSet.getResource(uri,true)
				umlRootModel = resource.allContents.filter(Model).head
			}
			if (umlRootModel === null) {
				//the resource didn't exist, or did not contain a uml::Model object
				umlRootModel = UMLFactory.eINSTANCE.createModel
				umlRootModel.name = userModelName;
				persistProjectRelative(alreadyPersistedEObject, umlRootModel, rootModelFile)
			}
			if (umlRootModel !== null ) {
				registerUmlModelInCorrespondenceModel(umlRootModel)
			}
		}
	}
}

routine registerUmlModelInCorrespondenceModel(uml::Model uModel) {
	match {
		require absence of uml::Model corresponding to UMLPackage.Literals.MODEL
	}
	action {
		add correspondence between uModel and UMLPackage.Literals.MODEL
	}
}

reaction JavaClassCreated {
    after element java::Class created and inserted in java::CompilationUnit[classifiers]
    call {
    	detectOrCreateUmlModel(affectedEObject)
		registerPredefinedUmlPrimitiveTypes(correspondenceModel, affectedEObject.eResource.resourceSet)
	    createOrFindUmlClass(newValue, affectedEObject)
    }
}

routine createOrFindUmlClass(java::Class jClass, java::CompilationUnit jCompUnit) {
	match {
		val uModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		require absence of uml::Class corresponding to jClass
		require absence of uml::DataType corresponding to jClass
	}
    action {
		call {
			val uClass = findUmlClass(uModel, jClass.name, jCompUnit.namespaces.last)
			if(uClass === null) {
				createUmlClass(jClass, jCompUnit)
			} else {
				addTypeCorrespondence(jClass, uClass, jCompUnit)
			}
		}
	}
}

routine createUmlClass(java::Class jClass, java::CompilationUnit jCompUnit) {
    action {
        val uClass = create uml::Class and initialize {
            uClass.name = jClass.name;
        }
        call {
        	addTypeCorrespondence(jClass, uClass, jCompUnit)
            addUmlElementToModelOrPackage(jCompUnit, uClass)
        }
    }
}

routine addUmlElementToPackage(uml::PackageableElement uPackageable, uml::Package uPackage) {
    action {
        update uPackage {
            uPackage.packagedElements += uPackageable
        }
    }
}

reaction JavaCompUnitCreated {
	after element java::CompilationUnit inserted as root
	call potentiallyMoveClass(newValue)
}

// If there is a corresponding class, move it
routine potentiallyMoveClass(java::CompilationUnit compUnit) {
	match {
		val umlClass = retrieve uml::Class corresponding to compUnit
	}
	action {
		call {
			addUmlElementToModelOrPackage(compUnit, umlClass)
		}
	}
}

reaction JavaCompUnitDeleted {
    after element java::CompilationUnit deleted and removed as root
    call deleteUmlClassifier(oldValue.classifiers.head, oldValue)
}

reaction JavaClassifierDeleted {
    after element java::ConcreteClassifier deleted and removed from java::CompilationUnit[classifiers]
    call deleteUmlClassifier(oldValue, affectedEObject)
}

routine deleteUmlClassifier(java::ConcreteClassifier jClassifier, java::CompilationUnit jCompUnit) {
    match {
        val uClassfier = retrieve uml::Classifier corresponding to jClassifier
    }
    action {
        delete uClassfier
        delete jCompUnit
    }
}

reaction JavaClassMadeAbstract {
    after element java::Abstract created and inserted in java::Class[annotationsAndModifiers]
    call setUmlClassAbstract(affectedEObject, true)
}

reaction JavaClassMadeNonAbstract {
    after element java::Abstract deleted and removed from java::Class[annotationsAndModifiers]
    call setUmlClassAbstract(affectedEObject, false)
}

routine setUmlClassAbstract(java::Class jClass, Boolean isAbstract) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
    }
    action {
        update uClass {
            uClass.isAbstract = isAbstract
        }
    }
}

reaction JavaClassMadeFinal {
    after element java::Final created and inserted in java::Class[annotationsAndModifiers]
    call setUmlClassFinal(affectedEObject, true)
}

reaction JavaClassMadeNonFinal {
    after element java::Final deleted and removed from java::Class[annotationsAndModifiers]
    call setUmlClassFinal(affectedEObject, false)
}

routine setUmlClassFinal(java::Class jClass, Boolean isFinal) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
    }
    action {
        update uClass {
            uClass.isFinalSpecialization = isFinal
        }
    }
}

reaction JavaSuperClassChanged {
    after element java::TypeReference replaced at java::Class[^extends]
    call {
    	if (oldValue !== null)
    		deleteUmlSuperClassGeneralization(oldValue)
    	if (newValue !== null && getNormalizedClassifierFromTypeReference(newValue) instanceof Class){
    		val jSuperClass = getNormalizedClassifierFromTypeReference(newValue) as Class
    		addUmlSuperClassGeneralization(affectedEObject, newValue, jSuperClass)
    	}
    }
}

routine addUmlSuperClassGeneralization(java::Class jClass, java::TypeReference jReference, java::Class jSuperClass){
	match {
		val uClass = retrieve uml::Class corresponding to jClass
		val uSuperClass = retrieve uml::Class corresponding to jSuperClass
		require absence of uml::Generalization corresponding to jReference
	}
	action {
		execute {
            if (uSuperClass !== null) {
                val uGeneralization = uClass.createGeneralization(uSuperClass)
                addGeneralizationCorrespondence(uGeneralization, jReference)
            } else {
                logger.warn("Could not add " + jSuperClass.name + " as super class for " + uClass + " because the corresponding UML-SuperClass is null")
            }
        }
	}
}

routine deleteUmlSuperClassGeneralization(java::TypeReference jReference){
	match {
		val uGeneralization = retrieve uml::Generalization corresponding to jReference
	}
	action {
		delete uGeneralization
	}
}

reaction JavaClassImplementAdded {
    after element java::TypeReference created and inserted in java::Class[implements]
    call{
        val jInterface = getNormalizedClassifierFromTypeReference(newValue) as Interface
        addUmlClassImplement(affectedEObject, newValue, jInterface)
    }
}

routine addUmlClassImplement(java::Class jClass, java::TypeReference jReference, java::Interface jInterface) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
        val uInterface = retrieve uml::Interface corresponding to jInterface
        require absence of uml::InterfaceRealization corresponding to jReference
    }
    action {
        execute {
            val matchingInterfaceRealization = uClass.interfaceRealizations.filter[contract == uInterface]
            checkState(matchingInterfaceRealization.size <= 1, "There was more than one realization of interface %s in class %s", uInterface, uClass)	
            if (matchingInterfaceRealization.size == 1) {
                 addImplementsCorrespondence(jReference, matchingInterfaceRealization.get(0))
            } else if (uInterface !== null) {
                val uRealization = uClass.createInterfaceRealization(uInterface.name, uInterface)
                addImplementsCorrespondence(jReference, uRealization)
            } else {
                logger.warn("Could not add " + jInterface.name + " as implemented interface for " + uClass
                    + " because the corresponding UML-Interface is null")
            }
        }
    }
}

routine addImplementsCorrespondence(java::TypeReference jReference, uml::InterfaceRealization uRealization){
	match {
		require absence of uml::InterfaceRealization corresponding to jReference
	}
	action {
		add correspondence between uRealization and jReference
	}
}

reaction JavaClassImplementRemoved {
    after element java::TypeReference removed from java::Class[implements]
    call removeUmlClassImplement(affectedEObject, oldValue)
}

routine removeUmlClassImplement(java::Class jClass, java::TypeReference jReference) {
    match {
        val uClass = retrieve uml::Class corresponding to jClass
        val uRealization = retrieve uml::InterfaceRealization corresponding to jReference
    }
    action {
        update uClass {
            uClass.interfaceRealizations -= uRealization
        }
        delete uRealization
    }
}

//===========================================
//=========================================== Interface
//===========================================

reaction JavaInterfaceCreated {
    after element java::Interface created and inserted in java::CompilationUnit[classifiers]
    call {
		detectOrCreateUmlModel(affectedEObject)
		registerPredefinedUmlPrimitiveTypes(correspondenceModel, affectedEObject.eResource.resourceSet)
		createOrFindUmlInterface(newValue, affectedEObject)
	}
}

routine createOrFindUmlInterface(java::Interface jInterface, java::CompilationUnit jCompUnit) {
	match {
        val uModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		require absence of uml::Interface corresponding to jInterface
	}
	action {
		call {
			val uInterface = findUmlInterface(uModel, jInterface.name, jCompUnit.namespaces.last)
			if(uInterface === null) {
				createUmlInterface(jInterface, jCompUnit)
			} else {
				addTypeCorrespondence(jInterface, uInterface, jCompUnit)
			}
		}
	}
}

routine createUmlInterface(java::Interface jInterface, java::CompilationUnit jCompUnit) {
    action {
        val uInterface = create uml::Interface and initialize {
            uInterface.name = jInterface.name;
        }
		call {
			addTypeCorrespondence(jInterface, uInterface, jCompUnit)
			addUmlElementToModelOrPackage(jCompUnit, uInterface)
		}
	}
}

reaction JavaSuperInterfaceAdded {
    after element java::TypeReference inserted in java::Interface[^extends]
    call {
    	val jSuperInterface = getNormalizedClassifierFromTypeReference(newValue) as Interface
    	addUmlSuperinterfaces(affectedEObject, newValue, jSuperInterface)
    }
}

routine addUmlSuperinterfaces(java::Interface jInterface, java::TypeReference jReference, java::Interface jSuperInterface) {
    match {
        val uInterface = retrieve uml::Interface corresponding to jInterface
        val uSuperInterface = retrieve uml::Interface corresponding to jSuperInterface
        require absence of uml::Generalization corresponding to jReference
    }
    action {
        execute {
            if (uSuperInterface !== null) {
            	val uGeneralization = uInterface.createGeneralization(uSuperInterface)
            	addGeneralizationCorrespondence(uGeneralization, jReference)
            } else {
                logger.warn("Could not add " + jSuperInterface.name + " as super interface for " + uInterface
                	+ " because the corresponding UML-Superinterface is null")
            }
        }
    }
}

routine addGeneralizationCorrespondence(uml::Generalization uGeneralization, java::TypeReference jReference){
	match {
		require absence of uml::Generalization corresponding to jReference
		require absence of java::TypeReference corresponding to uGeneralization
	}
	action {
		add correspondence between uGeneralization and jReference
	}
}

reaction JavaSuperInterfaceRemoved {
    after element java::TypeReference removed from java::Interface[^extends]
    call removeUmlSuperInterface(affectedEObject, oldValue)
}

routine removeUmlSuperInterface(java::Interface jInterface, java::TypeReference jReference) {
    match {
        val uInterface = retrieve uml::Interface corresponding to jInterface
        val uGeneralization = retrieve uml::Generalization corresponding to jReference
    }
    action {
        delete uGeneralization
    }
}

//===========================================
//=========================================== Package
//===========================================

reaction JavaPackageCreated {
    after element java::Package inserted as root
    call {
    	createPackageEClassCorrespondence(newValue)
    	detectOrCreateUmlModel(newValue)
		registerPredefinedUmlPrimitiveTypes(correspondenceModel, newValue.eResource.resourceSet)
	    createOrFindUmlPackage(newValue)
    }
}

/**
 * Required to enable locating existing packages with missing correspondences when keeping more than two models consistent.
 */
routine createPackageEClassCorrespondence(java::Package jPackage) {
	match {
		val allPackages = retrieve many java::Package corresponding to jPackage.eClass
		check !allPackages.contains(jPackage)
	}
    action {
        add correspondence between jPackage and jPackage.eClass
    }
}

routine createOrFindUmlPackage(java::Package jPackage) {
	match {
        val uModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		require absence of uml::Package corresponding to jPackage
	}
	action {
		call {
			val uPackage = findUmlPackage(uModel, jPackage.name)
			if(uPackage === null) {
				createUmlPackage(jPackage, uModel)
			} else {
				addPackageCorrespondence(jPackage, uPackage)
			}
		}
	}
}

routine addPackageCorrespondence(java::Package jPackage, uml::Package uPackage) {
	action {
		 add correspondence between uPackage and jPackage
	}
}

routine createUmlPackage(java::Package jPackage, uml::Model uModel) {
	action {
		val uPackage = create uml::Package and initialize {
			uPackage.name = jPackage.name
		}
		add correspondence between uPackage and jPackage
		call {
		    if (jPackage.namespaces.nullOrEmpty) {
		        addUmlElementToPackage(uPackage, uModel)
		    } else {
		    	// find package by name is necessary, since jPackage does not explicitly model parent-child package relations
		        addUmlElementToPackage(uPackage, findUmlPackage(uModel, jPackage.namespaces.last))
		    }
		}
	}
}

reaction JavaPackageDeleted {
    after element java::Package deleted and removed as root
    call deleteUmlPackage(oldValue)
}

routine deleteUmlPackage(java::Package jPackage) {
    match {
        val uPackage = retrieve uml::Package corresponding to jPackage
    }
    action {
        delete uPackage
    }
}

reaction JavaCompilationUnitInsertedInPackage {
    after element java::CompilationUnit inserted in java::Package[compilationUnits]
    call addUmlPackageOfClass(affectedEObject, newValue.classifiers.head)
}

reaction JavaCompilationUnitRemovedFromPackage {
    after element java::CompilationUnit removed from java::Package[compilationUnits]
    call removeUmlPackageOfClass(affectedEObject, oldValue.classifiers.head)
}

routine addUmlPackageOfClass(java::Package jPackage, java::ConcreteClassifier jClassifier) {
    match {
        val uClassifier = retrieve uml::Classifier corresponding to jClassifier
        val uPackage = retrieve uml::Package corresponding to jPackage
    }
    action {
        update uPackage {
            uPackage.packagedElements += uClassifier
        }
    }
}

routine removeUmlPackageOfClass(java::Package jPackage, java::ConcreteClassifier jClassifier) {
    match {
        val uClassifier = retrieve uml::Classifier corresponding to jClassifier
        val uPackage = retrieve uml::Package corresponding to jPackage
    }
    action {
        update uPackage {
            uPackage.packagedElements -= uClassifier
        }
    }
}

routine addUmlElementToModelOrPackage(java::CompilationUnit jCompUnit, uml::Classifier uClassifier) {
	match {
        val uModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
	}
    action {
       call {
            val uPackage = if (jCompUnit.namespaces.nullOrEmpty) {
                uModel
            } else {
                findUmlPackage(uModel, jCompUnit.namespaces.last)
            }
            
            if (uPackage !== uClassifier.package) {
                addUmlElementToPackage(uClassifier, uPackage)
            }
        }
    }
}

//===========================================
//=========================================== Enum
//===========================================

reaction JavaEnumCreated {
    after element java::Enumeration created and inserted in java::CompilationUnit[classifiers]
    call {
    	detectOrCreateUmlModel(affectedEObject)
		registerPredefinedUmlPrimitiveTypes(correspondenceModel, affectedEObject.eResource.resourceSet)
	    createUmlEnum(newValue, affectedEObject)
    }
}

routine createUmlEnum(java::Enumeration jEnum, java::CompilationUnit jCompUnit) {
	match {
		require absence of uml::Enumeration corresponding to jEnum
	}
    action {
        val uEnum = create uml::Enumeration and initialize {
            uEnum.name = jEnum.name;
        }
        call addUmlElementToModelOrPackage(jCompUnit, uEnum)
        add correspondence between uEnum and jEnum
        add correspondence between uEnum and jCompUnit
    }
}

reaction JavaEnumConstantCreated {
    after element java::EnumConstant created and inserted in java::Enumeration[constants]
    call createUmlEnumLiteral(affectedEObject, newValue)
}

routine createUmlEnumLiteral(java::Enumeration jEnum, java::EnumConstant jConstant) {
    match {
        val uEnum = retrieve uml::Enumeration corresponding to jEnum
		require absence of uml::EnumerationLiteral corresponding to jConstant
    }
    action {
        val uLiteral = create uml::EnumerationLiteral and initialize {
            uLiteral.name = jConstant.name
        }
        add correspondence between uLiteral and jConstant
        update uEnum {
            uEnum.ownedLiterals += uLiteral
        }
    }
}

reaction JavaEnumConstantDeleted {
    after element java::EnumConstant deleted and removed from java::Enumeration[constants]
    call deleteUmlEnumLiteral(oldValue)
}

routine deleteUmlEnumLiteral(java::EnumConstant jConstant) {
    match {
        val uLiteral = retrieve uml::EnumerationLiteral corresponding to jConstant
    }
    action {
        delete uLiteral
    }
}

//===========================================
//=========================================== Unsupported
//===========================================

reaction JavaEnumerationImplementAdded {
    after element java::TypeReference created and inserted in java::Enumeration[implements]
    call showMessage(userInteractor, "Implement relations from enums are not supported. Please remove it from " + affectedEObject)
}

reaction JavaClassifierMadeStatic {
    after element java::Static created and inserted in java::ConcreteClassifier[annotationsAndModifiers]
    call showMessage(userInteractor, "Static classifiers are not supported. Please undo the change at " + affectedEObject)
}
