import org.eclipse.uml2.uml.LiteralUnlimitedNatural
import org.eclipse.uml2.uml.OperationOwner
import org.eclipse.uml2.uml.ParameterDirectionKind
import org.emftext.language.java.classifiers.Class
import org.emftext.language.java.classifiers.Enumeration
import org.emftext.language.java.containers.CompilationUnit
import org.emftext.language.java.modifiers.Private
import org.emftext.language.java.modifiers.Protected
import org.emftext.language.java.modifiers.Public
import tools.vitruv.applications.umljava.util.UmlJavaCorrespondenceTag

import static tools.vitruv.applications.umljava.util.CommonUtil.showMessage
import static tools.vitruv.applications.util.temporary.java.JavaModifierUtil.*

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: javaToUmlMethod
in reaction to changes in java
execute actions in uml

import routines javaToUmlTypePropagation using qualified names

//===========================================
//=========================================== Method
//===========================================

reaction JavaClassMethodCreated {
    after element java::ClassMethod inserted in java::ConcreteClassifier[members]
    with (affectedEObject instanceof Class)
        || (affectedEObject instanceof Enumeration)
    call {
        createOrFindUmlClassMethod(newValue, affectedEObject)
        insertUmlMethod(newValue, affectedEObject)
    }
}

routine createOrFindUmlClassMethod(java::ClassMethod jMethod, java::ConcreteClassifier jClassifier) {
     match {
        val uClassifier = retrieve uml::Classifier corresponding to jClassifier
            with uClassifier instanceof OperationOwner
        require absence of uml::Operation corresponding to jMethod
        require absence of uml::Property corresponding to jMethod tagged with UmlJavaCorrespondenceTag.GETTER
        require absence of uml::Property corresponding to jMethod tagged with UmlJavaCorrespondenceTag.SETTER
    }
    action {
        call {
            val foundMethod = (uClassifier as OperationOwner).ownedOperations.findFirst[
                name == jMethod.name && 
                ownedParameters.filter[direction != ParameterDirectionKind.RETURN_LITERAL].size == jMethod.parameters.size &&
                jMethod.parameters.forall[jParameter | ownedParameters.exists[name == jParameter.name]]
            ]
            if (foundMethod === null) {
                createUmlClassMethod(jMethod, uClassifier)
            } else {
                addUmlMethodCorrespondence(foundMethod, jMethod)
            }
        }
    }
}

routine createUmlClassMethod(java::ClassMethod jMethod, uml::Classifier uClassifier) {
    action {
        val uOperation = create uml::Operation and initialize {
            uOperation.name = jMethod.name
            uOperation.visibility = getUmlVisibilityKindFromJavaElement(jMethod)
        }
        add correspondence between uOperation and jMethod
    }
}

reaction JavaInterfaceMethodCreated {
    after element java::InterfaceMethod inserted in java::Interface[members]
    call {
        createOrFindUmlInterfaceMethod(newValue, affectedEObject)
        insertUmlMethod(newValue, affectedEObject)
    }
}

routine createOrFindUmlInterfaceMethod(java::InterfaceMethod jMethod, java::Interface jInterface) {
     match {
        val uInterface = retrieve uml::Interface corresponding to jInterface
        require absence of uml::Operation corresponding to jMethod
    }
    action {
        call {
            val foundMethod = uInterface.ownedOperations.findFirst[
                name == jMethod.name && 
                ownedParameters.filter[direction != ParameterDirectionKind.RETURN_LITERAL].size == jMethod.parameters.size &&
                jMethod.parameters.forall[jParameter | ownedParameters.exists[name == jParameter.name]]
            ]
            if (foundMethod === null) {
                createUmlInterfaceMethod(jMethod, uInterface)
            } else {
                addUmlMethodCorrespondence(foundMethod, jMethod)
            }
        }
    }
}

routine createUmlInterfaceMethod(java::InterfaceMethod jMeth, uml::Interface uInterface) {
    action {
        val uOperation = create uml::Operation and initialize {
            uOperation.name = jMeth.name
            uOperation.isAbstract = true
        }
        add correspondence between uOperation and jMeth
    }
}

// Shared between interface methods, class methods and constructors:
routine addUmlMethodCorrespondence(uml::Operation uOperation, java::Member jMethodOrConstructor) {
    action {
        add correspondence between uOperation and jMethodOrConstructor
    }
}

reaction JavaConstructorCreated {
    after element java::Constructor inserted in java::ConcreteClassifier[members]
    call {
        createOrFindUmlConstructor(newValue, affectedEObject)
        insertUmlMethod(newValue, affectedEObject)
    }
}

routine createOrFindUmlConstructor(java::Constructor jConstructor, java::ConcreteClassifier jClassifier) {
     match {
        val uClassifier = retrieve uml::Class corresponding to jClassifier
        require absence of uml::Operation corresponding to jConstructor
    }
    action {
        call {
            val foundConstructor = uClassifier.ownedOperations.findFirst[name == jConstructor.name]
            if (foundConstructor === null) {
                createUmlConstructor(jConstructor, uClassifier)
            } else {
                addUmlMethodCorrespondence(foundConstructor, jConstructor)
            }
        }
    }
}

routine createUmlConstructor(java::Constructor jConstructor, uml::Class uClassifier) {
    action {
        val uConstructor = create uml::Operation and initialize {
            uConstructor.name = jConstructor.name
            uConstructor.visibility = getUmlVisibilityKindFromJavaElement(jConstructor)
        }
        add correspondence between uConstructor and jConstructor
    }
}

routine insertUmlMethod(java::Member javaMethod, java::ConcreteClassifier javaClassifier) {
    match {
        val umlMethod = retrieve uml::Operation corresponding to javaMethod 
        val umlClassifier = retrieve uml::Classifier corresponding to javaClassifier
    }
    action {
        update umlClassifier {
            (umlClassifier as OperationOwner).ownedOperations += umlMethod
        }
    }
}

reaction JavaMemberDeleted {
    after element java::Member deleted and removed from java::ConcreteClassifier[members]
    call {
        deleteUmlMethod(oldValue)
        deleteAccessorCorrespondence(oldValue, UmlJavaCorrespondenceTag.GETTER)
        deleteAccessorCorrespondence(oldValue, UmlJavaCorrespondenceTag.SETTER)
    }
}

routine deleteUmlMethod(java::Member jMem) {
    match {
        val uMem = retrieve uml::NamedElement corresponding to jMem tagged with ""
    }
    action {
        delete uMem
    }
}

routine deleteAccessorCorrespondence(java::Member jMember, String tag) {
    match {
        val uProperty = retrieve uml::Property corresponding to jMember tagged with tag
    }
    action {
        remove correspondence between uProperty and jMember tagged with tag
    }
}

reaction JavaMethodMadeAbstract {
    after element java::Abstract inserted in java::ClassMethod[annotationsAndModifiers]
    call  {
        setUmlMethodAbstract(affectedEObject, true)
    }
}

reaction JavaMethodMadeNonAbstract {
    after element java::Abstract removed from java::ClassMethod[annotationsAndModifiers]
    call setUmlMethodAbstract(affectedEObject, false)
}

routine setUmlMethodAbstract(java::ClassMethod jMeth, Boolean isAbstract) {
    match {
        val uOperation = retrieve uml::Operation corresponding to jMeth
    }
    action {
        update uOperation {
            uOperation.isAbstract = isAbstract
        }
    }
}

reaction JavaMethodMadeFinal {
    after element java::Final inserted in java::ClassMethod[annotationsAndModifiers]
    call setUmlMethodFinal(affectedEObject, true)
}

reaction JavaMethodMadeNonFinal {
    after element java::Final removed from java::ClassMethod[annotationsAndModifiers]
    call setUmlMethodFinal(affectedEObject, false)
}

routine setUmlMethodFinal(java::Method jMethod, Boolean isFinal) {
    match {
        val uOperation = retrieve uml::Operation corresponding to jMethod
    }
    action {
        update uOperation {
            uOperation.isLeaf = isFinal
        }
    }
}

reaction JavaElementMadeStatic {
    after element java::Static inserted in java::AnnotableAndModifiable[annotationsAndModifiers]
    call setUmlFeatureStatic(affectedEObject, true)
}

reaction JavaMethodMadeNonStatic {
    after element java::Static removed from java::AnnotableAndModifiable[annotationsAndModifiers]
    call setUmlFeatureStatic(affectedEObject, false)
}
//UML-Feature =  {Property, Operation}
routine setUmlFeatureStatic(java::AnnotableAndModifiable jElem, Boolean isStatic) {
    match {
        val uFeature = retrieve uml::Feature corresponding to jElem
    }
    action {
        update uFeature {
            uFeature.isStatic = isStatic
        }
    }
}

//===========================================
//=========================================== Parameter
//===========================================

reaction JavaVariableLengthParameterCreated {
    after element java::VariableLengthParameter created and inserted in java::Parametrizable[parameters]
    call {
        createUmlParameter(affectedEObject, newValue)
        setMultiplicityOfCorrespondingParameterToUnlimited(newValue)
    }
}

reaction JavaOrdinaryParameterCreated {
    after element java::OrdinaryParameter created and inserted in java::Parametrizable[parameters]
    call createUmlParameter(affectedEObject, newValue)
}

routine createUmlParameter(java::Parametrizable jMeth, java::Parameter jParam) {
    match {
        val uOperation = retrieve uml::Operation corresponding to jMeth
        require absence of uml::Parameter corresponding to jParam
    }
    action {
        val uParam = create uml::Parameter and initialize {
            uParam.name = jParam.name
        }
        add correspondence between uParam and jParam
        update uOperation {
            uOperation.ownedParameters += uParam
        }
    }
}

routine setMultiplicityOfCorrespondingParameterToUnlimited(java::Parameter parameter) {
    match {
        val umlParameter = retrieve uml::Parameter corresponding to parameter
    }
    action {
        update umlParameter {
            umlParameter => [
                lower = 0
                upper = LiteralUnlimitedNatural.UNLIMITED
            ]
        }
    }
}

reaction JavaParameterDeleted {
    after element java::Parameter deleted and removed from java::Parametrizable[parameters]
    call deleteJavaParameter(oldValue)
}

routine deleteJavaParameter(java::Parameter jParam) {
    match {
        val uParam = retrieve uml::Parameter corresponding to jParam
    }
    action{
        delete uParam
    }
}

reaction JavaParameterTypeChanged {
    after element java::TypeReference replaced at java::Parameter[typeReference]
    call changeUmlParameterType(affectedEObject, newValue)
}

routine changeUmlParameterType(java::Parameter jParam, java::TypeReference jType) {
    match {
        val uParam = retrieve uml::Parameter corresponding to jParam
    }
    action {
        call javaToUmlTypePropagation.propagateParameterTypeChange(jParam, uParam)
    }
}

reaction JavaReturnTypeChanged {
    after element java::TypeReference replaced at java::Method[typeReference]
    call changeUmlReturnType(affectedEObject, newValue)
}

routine changeUmlReturnType(java::Method jMeth, java::TypeReference jType) {
    match {
        val uOperation = retrieve uml::Operation corresponding to jMeth
    }
    action {
        execute {
            var uParam = uOperation.getReturnResult
            if (uParam === null){
                // create a new return parameter
                uParam = uOperation.createOwnedParameter("returnParameter", null)
                uParam.direction = ParameterDirectionKind.RETURN_LITERAL
            }
            javaToUmlTypePropagation.propagateMethodReturnTypeChange(jMeth, uParam)
        }
    }
}

//===========================================
//=========================================== General
//=========================================== 

reaction JavaVisibilityModifierInserted {
    after element java::Modifier inserted in java::AnnotableAndModifiable[annotationsAndModifiers]
    with newValue instanceof Public || newValue instanceof Private || newValue instanceof Protected
    call changeUmlNamedElementVisibility(affectedEObject)
}

reaction JavaVisibilityModifierRemoved {
    after element java::Modifier removed from java::AnnotableAndModifiable[annotationsAndModifiers]
    with oldValue instanceof Private
    || oldValue instanceof Public
    || oldValue instanceof Protected
    call changeUmlNamedElementVisibility(affectedEObject)
}

routine changeUmlNamedElementVisibility(java::AnnotableAndModifiable jElem) {
    match {
        val uElem = retrieve uml::NamedElement corresponding to jElem tagged with ""
    }
    action {
        update uElem {
            uElem.visibility = getUmlVisibilityKindFromJavaElement(jElem)
        }
    }
}

reaction JavaNamedElementRenamed {
    after attribute replaced at java::NamedElement[name]
    with !(affectedEObject instanceof CompilationUnit)
    call renameUmlNamedElement(affectedEObject)
}

routine renameUmlNamedElement(java::NamedElement jElement) {
    match {
        val uElement = retrieve uml::NamedElement corresponding to jElement tagged with ""
    }
    action {
        update uElement {
            uElement.name = jElement.name
        }
    }
}

//===========================================
//=========================================== Unsupported
//===========================================

//An interface can theoretically have static, non-abstract methods
reaction JavaClassMethodCreatedInInterface {
    after element java::ClassMethod created and inserted in java::Interface[members]
    call showMessage(userInteractor, "ClassMethods are currently not supported in Interfaces. Please delete " + newValue)
}

reaction JavaParameterMadeFinal {
    after element java::Final created and inserted in java::Parameter[annotationsAndModifiers]
    call showMessage(userInteractor, "Final parameters are not supported. Please remove the modifier from " + affectedEObject)
}