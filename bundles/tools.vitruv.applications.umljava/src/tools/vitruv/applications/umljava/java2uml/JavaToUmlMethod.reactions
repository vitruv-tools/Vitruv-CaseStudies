import org.eclipse.uml2.uml.ParameterDirectionKind
import org.emftext.language.java.classifiers.Class
import org.emftext.language.java.classifiers.Enumeration
import org.emftext.language.java.containers.CompilationUnit
import org.emftext.language.java.modifiers.Private
import org.emftext.language.java.modifiers.Protected
import org.emftext.language.java.modifiers.Public
import org.eclipse.uml2.uml.OperationOwner

import static tools.vitruv.applications.umljava.util.CommonUtil.showMessage
import static tools.vitruv.applications.util.temporary.java.JavaModifierUtil.*

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

reactions: javaToUmlMethod
in reaction to changes in Java
execute actions in UML

import routines javaToUmlTypePropagation using qualified names

//===========================================
//=========================================== Method
//===========================================

reaction JavaClassMethodCreated {
    after element java::ClassMethod created and inserted in java::ConcreteClassifier[members]
    with (affectedEObject instanceof Class)
        || (affectedEObject instanceof Enumeration)
    call createOrFindUmlClassMethod(newValue, affectedEObject)
}

routine createOrFindUmlClassMethod(java::ClassMethod jMethod, java::ConcreteClassifier jClassifier) {
     match {
        val uClassifier = retrieve uml::Classifier corresponding to jClassifier
            with uClassifier instanceof OperationOwner
        require absence of uml::Operation corresponding to jMethod
    }
    action {
        call {
            val foundMethod = (uClassifier as OperationOwner).ownedOperations.findFirst[name == jMethod.name]
            if (foundMethod === null) {
                createUmlClassMethod(jMethod, uClassifier)
            } else {
                addUmlMethodCorrespondence(foundMethod, jMethod)
            }
        }
    }
}

routine createUmlClassMethod(java::ClassMethod jMethod, uml::Classifier uClassifier) {
    action {
        val uOperation = create uml::Operation and initialize {
            uOperation.name = jMethod.name;
        }
        add correspondence between uOperation and jMethod
        update uClassifier {
            (uClassifier as OperationOwner).ownedOperations += uOperation
        }
    }
}

reaction JavaInterfaceMethodCreated {
    after element java::InterfaceMethod created and inserted in java::Interface[members]
    call createOrFindUmlInterfaceMethod(newValue, affectedEObject)
}

routine createOrFindUmlInterfaceMethod(java::InterfaceMethod jMethod, java::Interface jInterface) {
     match {
        val uInterface = retrieve uml::Interface corresponding to jInterface
        require absence of uml::Operation corresponding to jMethod
    }
    action {
        call {
            val foundMethod = uInterface.ownedOperations.findFirst[name == jMethod.name]
            if (foundMethod === null) {
                createUmlInterfaceMethod(jMethod, uInterface)
            } else {
                addUmlMethodCorrespondence(foundMethod, jMethod)
            }
        }
    }
}

routine createUmlInterfaceMethod(java::InterfaceMethod jMeth, uml::Interface uInterface) {
    action {
        val uOperation = create uml::Operation and initialize {
            uOperation.name = jMeth.name;
            uOperation.isAbstract = true;
        }
        add correspondence between uOperation and jMeth
        update uInterface {
            uInterface.ownedOperations += uOperation;
        }
    }
}

// Shared between interface methods, class methods and constructors:
routine addUmlMethodCorrespondence(uml::Operation uOperation, java::Member jMethodOrConstructor) {
    action {
        add correspondence between uOperation and jMethodOrConstructor
    }
}

reaction JavaConstructorCreated {
    after element java::Constructor created and inserted in java::ConcreteClassifier[members]
    call createOrFindUmlConstructor(newValue, affectedEObject)
}

routine createOrFindUmlConstructor(java::Constructor jConstructor, java::ConcreteClassifier jClassifier) {
     match {
        val uClassifier = retrieve uml::Class corresponding to jClassifier
        require absence of uml::Operation corresponding to jConstructor
    }
    action {
        call {
            val foundConstructor = uClassifier.ownedOperations.findFirst[name == jConstructor.name]
            if (foundConstructor === null) {
                createUmlConstructor(jConstructor, uClassifier)
            } else {
                addUmlMethodCorrespondence(foundConstructor, jConstructor)
            }
        }
    }
}

routine createUmlConstructor(java::Constructor jConstructor, uml::Class uClassifier) {
    action {
        val uConstructor = create uml::Operation and initialize {
            uConstructor.name = jConstructor.name
        }
        add correspondence between uConstructor and jConstructor
        update uClassifier {
            uClassifier.ownedOperations += uConstructor;
        }
    }
}

reaction JavaMemberDeleted {
    after element java::Member deleted and removed from java::ConcreteClassifier[members]
    call deleteUmlMethod(oldValue)
}

routine deleteUmlMethod(java::Member jMem) {
    match {
        val uMem = retrieve uml::NamedElement corresponding to jMem
    }
    action {
        delete uMem
    }
}

reaction JavaMethodMadeAbstract {
    after element java::Abstract created and inserted in java::ClassMethod[annotationsAndModifiers]
    call  {
        setUmlMethodAbstract(affectedEObject, true)
    }
}

reaction JavaMethodMadeNonAbstract {
    after element java::Abstract deleted and removed from java::ClassMethod[annotationsAndModifiers]
    call setUmlMethodAbstract(affectedEObject, false)
}

routine setUmlMethodAbstract(java::ClassMethod jMeth, Boolean isAbstract) {
    match {
        val uOperation = retrieve uml::Operation corresponding to jMeth
    }
    action {
        update uOperation {
            uOperation.isAbstract = isAbstract
        }
    }
}

reaction JavaMethodMadeFinal {
    after element java::Final created and inserted in java::ClassMethod[annotationsAndModifiers]
    call setUmlMethodFinal(affectedEObject, true)
}

reaction JavaMethodMadeNonFinal {
    after element java::Final deleted and removed from java::ClassMethod[annotationsAndModifiers]
    call setUmlMethodFinal(affectedEObject, false)
}

routine setUmlMethodFinal(java::Method jMethod, Boolean isFinal) {
    match {
        val uOperation = retrieve uml::Operation corresponding to jMethod
    }
    action {
        update uOperation {
            uOperation.isLeaf = isFinal
        }
    }
}

reaction JavaElementMadeStatic {
    after element java::Static created and inserted in java::AnnotableAndModifiable[annotationsAndModifiers]
    call setUmlFeatureStatic(affectedEObject, true)
}

reaction JavaMethodMadeNonStatic {
    after element java::Static deleted and removed from java::AnnotableAndModifiable[annotationsAndModifiers]
    call setUmlFeatureStatic(affectedEObject, false)
}
//UML-Feature =  {Property, Operation}
routine setUmlFeatureStatic(java::AnnotableAndModifiable jElem, Boolean isStatic) {
    match {
        val uFeature = retrieve uml::Feature corresponding to jElem
    }
    action {
        update uFeature {
            uFeature.isStatic = isStatic
        }
    }
}

//===========================================
//=========================================== Parameter
//===========================================

reaction JavaParameterCreated {
    after element java::OrdinaryParameter created and inserted in java::Parametrizable[parameters]
    call createUmlParameter(affectedEObject, newValue)
}

routine createUmlParameter(java::Parametrizable jMeth, java::OrdinaryParameter jParam) {
    match {
        val uOperation = retrieve uml::Operation corresponding to jMeth
        require absence of uml::Parameter corresponding to jParam
    }
    action {
        val uParam = create uml::Parameter and initialize {
            uParam.name = jParam.name;
        }
        add correspondence between uParam and jParam
        update uOperation {
            uOperation.ownedParameters += uParam
        }
    }
}

reaction JavaParameterDeleted {
    after element java::OrdinaryParameter deleted and removed from java::Parametrizable[parameters]
    call deleteJavaParameter(oldValue)
}

routine deleteJavaParameter(java::OrdinaryParameter jParam) {
    match {
        val uParam = retrieve uml::Parameter corresponding to jParam
    }
    action{
        delete uParam         
    }
}

reaction JavaParameterTypeChanged {
    after element java::TypeReference replaced at java::OrdinaryParameter[typeReference]
    call changeUmlParameterType(affectedEObject, newValue)
}

routine changeUmlParameterType(java::OrdinaryParameter jParam, java::TypeReference jType) {
    match {
        val uParam = retrieve uml::Parameter corresponding to jParam
    }
    action {
        call javaToUmlTypePropagation.propagateParameterTypeChange(jParam, uParam)
    }
}

reaction JavaReturnTypeChanged {
    after element java::TypeReference replaced at java::Method[typeReference]
    call changeUmlReturnType(affectedEObject, newValue)
}

routine changeUmlReturnType(java::Method jMeth, java::TypeReference jType) {
    match {
        val uOperation = retrieve uml::Operation corresponding to jMeth
    }
    action {
        execute {
            var uParam = uOperation.getReturnResult
            if (uParam === null){
                // create a new return parameter
                uParam = uOperation.createOwnedParameter("returnParameter", null)
                uParam.direction = ParameterDirectionKind.RETURN_LITERAL
            }
            javaToUmlTypePropagation.propagateMethodReturnTypeChange(jMeth, uParam)
        }
    }
}

//===========================================
//=========================================== General
//=========================================== 

reaction JavaElementVisibilityChanged {
    after element java::Modifier created and inserted in java::AnnotableAndModifiable[annotationsAndModifiers]
    with newValue instanceof Public || newValue instanceof Private || newValue instanceof Protected
    call changeUmlNamedElementVisibility(affectedEObject, newValue)
}

reaction JavaElementMadePackagePrivate {
    after element java::Modifier deleted and removed from java::Class[annotationsAndModifiers]
    with oldValue instanceof Private
    || oldValue instanceof Public
    || oldValue instanceof Protected
    call changeUmlNamedElementVisibility(affectedEObject, null)
}

routine changeUmlNamedElementVisibility(java::AnnotableAndModifiable jElem, java::Modifier mod) {
    match {
        val uElem = retrieve uml::NamedElement corresponding to jElem tagged with ""
    }
    action {
        update uElem {
            uElem.visibility = getUMLVisibilityKindFromJavaModifier(mod);
        }
    }
}

reaction JavaNamedElementRenamed {
    after attribute replaced at java::NamedElement[name]
    with !(affectedEObject instanceof CompilationUnit)
    call renameUmlNamedElement(affectedEObject)
}

reaction JavaCompilationUnitRenamed {
    after attribute replaced at java::CompilationUnit[name]
    call renameUmlNamedElementCorrespondingToCompilationUnit(affectedEObject)
}

routine renameUmlNamedElement(java::NamedElement jElement) {
    match {
        val uElement = retrieve uml::NamedElement corresponding to jElement tagged with ""
        
    }
    action {
        update uElement {
            uElement.name = jElement.name;
        }
    }
}

routine renameUmlNamedElementCorrespondingToCompilationUnit(java::CompilationUnit jElement) {
    match {
        val uElement = retrieve uml::NamedElement corresponding to jElement
    }
    action {
        update uElement {
            var propagatedName = jElement.name
            if(!jElement.namespaces.empty) { // trim off the namespace in case the name is loaded fully classified
                var namespacePrefix = jElement.namespaces.join("\\.") + "\\." // escaping avoids eating any char with "." regex
                propagatedName = propagatedName.replaceFirst(namespacePrefix, "")
            }
            if(propagatedName.endsWith(".java")) { // trim off file extension if it exists 
                propagatedName = propagatedName.replaceFirst("\\.java", "") // escaping avoids eating any char with "." regex
            }
            uElement.name = propagatedName;
        }
    }
}

//===========================================
//=========================================== Unsupported
//===========================================

//An interface can theoretically have static, non-abstract methods
reaction JavaClassMethodCreatedInInterface {
    after element java::ClassMethod created and inserted in java::Interface[members]
    call showMessage(userInteractor, "ClassMethods are currently not supported in Interfaces. Please delete " + newValue)
}

reaction JavaParameterMadeFinal {
    after element java::Final created and inserted in java::Parameter[annotationsAndModifiers]
    call showMessage(userInteractor, "Final parameters are not supported. Please remove the modifier from " + affectedEObject)
}