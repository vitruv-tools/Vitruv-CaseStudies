import org.eclipse.uml2.uml.Package
import org.palladiosimulator.pcm.repository.Repository

import "http://palladiosimulator.org/PalladioComponentModel/Repository/5.2" as repository
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

reactions: umlXpcmRepository_R2L in reaction to changes in PCM
execute actions in UML
import routines umlXpcmRoutines
reaction OnRepositoryRepositoryInsertedAsRoot {
	after element repository::Repository created
	call repository_ElementCreatedCheck(affectedEObject)
}

reaction OnRepositoryRepositoryDeleted {
	after element repository::Repository deleted
	call repository_ElementDeletedCheck(affectedEObject)
}

reaction OnRepositoryEntityNameReplacedAtRepository_entityNameBidirectional {
	after attribute replaced at repository::Repository[entityName]
	call onRepositoryEntityNameReplacedAtRepository_entityNameBidirectionalRepair(affectedEObject)
}

routine repository_BidirectionalUpdate(repository::Repository repository_) {
	action {
		call updateRepoPackageName(repository_)
	}
}

routine repository_CreateMapping(repository::Repository repository_) {
	match {
		require absence of uml::Package corresponding to repository_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:repositoryPkg_with_Repository:repository"
		require absence of uml::Package corresponding to repository_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:contractsPkg_with_Repository:repository"
		require absence of uml::Package corresponding to repository_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:datatypesPkg_with_Repository:repository"
	}
	action {
		val repositoryPkg_ = create uml::Package
		val contractsPkg_ = create uml::Package
		val datatypesPkg_ = create uml::Package
		add correspondence between repositoryPkg_ and repository_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:repositoryPkg_with_Repository:repository"
		add correspondence between contractsPkg_ and repository_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:contractsPkg_with_Repository:repository"
		add correspondence between datatypesPkg_ and repository_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:datatypesPkg_with_Repository:repository"
		execute {
			repositoryPkg_.getPackagedElements().^add(contractsPkg_)
			repositoryPkg_.getPackagedElements().^add(datatypesPkg_)
			contractsPkg_.setName("contracts")
			datatypesPkg_.setName("datatypes")			
		}
		call createUmlModelRoot(repository_, repositoryPkg_)		
		call repository_BidirectionalUpdate(repository_)
	}
}

routine repository_DeleteMapping(uml::Package repositoryPkg_, uml::Package contractsPkg_ , uml::Package datatypesPkg_) {
	action {
		delete repositoryPkg_
		delete contractsPkg_
		delete datatypesPkg_
	}
}

routine repository_BidirectionalCheck(ecore::EObject affectedEObject, plain String as routineName) {
	action {
		call {
			if ( affectedEObject instanceof Repository ) { var Repository repository_ = affectedEObject { if ( routineName === "updateRepoPackageName" ) updateRepoPackageName ( repository_ ) } }
		}
	}
}

routine repository_ElementCreatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Repository ) { var Repository repository_ = affectedEObject repository_CreateMapping ( repository_ ) }
		}
	}
}

routine repository_ElementDeletedCheck(ecore::EObject affectedEObject) {
	match {
		val repositoryPkg_correspondingTo_repository = retrieve optional uml::Package corresponding to affectedEObject tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:repositoryPkg_with_Repository:repository"
		val contractsPkg_correspondingTo_repository = retrieve optional uml::Package corresponding to affectedEObject tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:contractsPkg_with_Repository:repository"
		val datatypesPkg_correspondingTo_repository = retrieve optional uml::Package corresponding to affectedEObject tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:datatypesPkg_with_Repository:repository"
	}
	action {
		call {
			var Package repositoryPkg_
			var Package contractsPkg_
			var Package datatypesPkg_
			if ( repositoryPkg_correspondingTo_repository . isPresent ( ) ) repositoryPkg_ = repositoryPkg_correspondingTo_repository . get ( )
			if ( contractsPkg_correspondingTo_repository . isPresent ( ) ) contractsPkg_ = contractsPkg_correspondingTo_repository . get ( )
			if ( datatypesPkg_correspondingTo_repository . isPresent ( ) ) datatypesPkg_ = datatypesPkg_correspondingTo_repository . get ( )
			if ( repositoryPkg_ !== null && contractsPkg_ !== null && datatypesPkg_ !== null ) repository_DeleteMapping ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ )
		}
	}
}

routine repository_ElementUpdatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Repository ) { var Repository repository_ = affectedEObject repository_CreateMapping ( repository_ ) }
			repository_ElementDeletedCheck(affectedEObject)
		}
	}
}

routine onRepositoryEntityNameReplacedAtRepository_entityNameBidirectionalRepair(repository::Repository affectedEObject) {
	action {
		call repository_BidirectionalCheck(affectedEObject, "updateRepoPackageName")
	}
}