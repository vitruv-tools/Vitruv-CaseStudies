import org.eclipse.uml2.uml.Package
import org.palladiosimulator.pcm.repository.Repository

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/Repository/5.2" as repository
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

reactions: umlXpcmRepository_L2R in reaction to changes in uml
execute actions in pcm
import routines umlXpcmRoutines
reaction OnRepositoryPackageInsertedInPackage {
	after element uml::Package inserted in uml::Package[packagedElement]
	call repository_ElementCreatedCheck(affectedEObject)
}

reaction OnRepositoryPackageRemovedFromPackage {
	after element uml::Package removed from uml::Package[packagedElement]
	call repository_ElementDeletedCheck(affectedEObject)
}

reaction OnRepositoryPackageDeleted {
	after element uml::Package deleted
	call repository_ElementDeletedCheck(affectedEObject)
}

reaction OnRepositoryNameReplacedAtPackage_name {
	after attribute replaced at uml::Package[name]
	call repository_ElementUpdatedCheck(affectedEObject)
}

reaction OnRepositoryNameReplacedAtPackage_nameBidirectional {
	after attribute replaced at uml::Package[name]
	call onRepositoryNameReplacedAtPackage_nameBidirectionalRepair(affectedEObject)
}

routine repository_BidirectionalUpdate(uml::Package repositoryPkg_, uml::Package contractsPkg_ , uml::Package datatypesPkg_) {
	action {
		call updateRepoName(repositoryPkg_, contractsPkg_ , datatypesPkg_)
	}
}

routine repository_CreateMapping(uml::Package repositoryPkg_, uml::Package contractsPkg_ , uml::Package datatypesPkg_) {
	match {
		require absence of repository::Repository corresponding to repositoryPkg_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:repositoryPkg_with_Repository:repository"
	}
	action {
		val repository_ = create repository::Repository
		add correspondence between repository_ and repositoryPkg_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:repositoryPkg_with_Repository:repository"
		add correspondence between repository_ and contractsPkg_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:contractsPkg_with_Repository:repository"
		add correspondence between repository_ and datatypesPkg_ tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:datatypesPkg_with_Repository:repository"
		call createRepositoryRoot(repositoryPkg_, repository_)
		call repository_BidirectionalUpdate(repositoryPkg_, contractsPkg_ , datatypesPkg_)
	}
}

routine repository_DeleteMapping(repository::Repository repository_) {
	action {
		delete repository_
	}
}

routine repository_BidirectionalCheck(ecore::EObject affectedEObject, plain String as routineName) {
	action {
		call {
			if ( affectedEObject instanceof Package ) { var Package repositoryPkg_ = affectedEObject for ( datatypesPkg__candidate : repositoryPkg_ . packagedElements ) { if ( datatypesPkg__candidate !== null && datatypesPkg__candidate instanceof Package ) { var Package datatypesPkg_ = datatypesPkg__candidate as Package if ( "datatypes" === datatypesPkg_ . getName ( ) ) for ( contractsPkg__candidate : repositoryPkg_ . packagedElements ) { if ( contractsPkg__candidate !== null && contractsPkg__candidate instanceof Package ) { var Package contractsPkg_ = contractsPkg__candidate as Package if ( "contracts" === contractsPkg_ . getName ( ) ) { { if ( routineName === "updateRepoName" ) updateRepoName ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ ) } return } } } } } }
			if ( affectedEObject instanceof Package ) { var Package contractsPkg_ = affectedEObject if ( "contracts" === contractsPkg_ . getName ( ) ) { var repositoryPkg__candidate = contractsPkg_ . eContainer { if ( repositoryPkg__candidate !== null && repositoryPkg__candidate instanceof Package ) { var Package repositoryPkg_ = repositoryPkg__candidate as Package for ( datatypesPkg__candidate : repositoryPkg_ . packagedElements ) { if ( datatypesPkg__candidate !== null && datatypesPkg__candidate instanceof Package ) { var Package datatypesPkg_ = datatypesPkg__candidate as Package if ( "datatypes" === datatypesPkg_ . getName ( ) ) { { if ( routineName === "updateRepoName" ) updateRepoName ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ ) } return } } } } } } }
			if ( affectedEObject instanceof Package ) { var Package datatypesPkg_ = affectedEObject if ( "datatypes" === datatypesPkg_ . getName ( ) ) { var repositoryPkg__candidate = datatypesPkg_ . eContainer { if ( repositoryPkg__candidate !== null && repositoryPkg__candidate instanceof Package ) { var Package repositoryPkg_ = repositoryPkg__candidate as Package for ( contractsPkg__candidate : repositoryPkg_ . packagedElements ) { if ( contractsPkg__candidate !== null && contractsPkg__candidate instanceof Package ) { var Package contractsPkg_ = contractsPkg__candidate as Package if ( "contracts" === contractsPkg_ . getName ( ) ) { { if ( routineName === "updateRepoName" ) updateRepoName ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ ) } return } } } } } } }
		}
	}
}

routine repository_ElementCreatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Package ) { var Package repositoryPkg_ = affectedEObject for ( datatypesPkg__candidate : repositoryPkg_ . packagedElements ) { if ( datatypesPkg__candidate !== null && datatypesPkg__candidate instanceof Package ) { var Package datatypesPkg_ = datatypesPkg__candidate as Package if ( "datatypes" === datatypesPkg_ . getName ( ) ) for ( contractsPkg__candidate : repositoryPkg_ . packagedElements ) { if ( contractsPkg__candidate !== null && contractsPkg__candidate instanceof Package ) { var Package contractsPkg_ = contractsPkg__candidate as Package if ( "contracts" === contractsPkg_ . getName ( ) ) { repository_CreateMapping ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ ) return } } } } } }
			if ( affectedEObject instanceof Package ) { var Package contractsPkg_ = affectedEObject if ( "contracts" === contractsPkg_ . getName ( ) ) { var repositoryPkg__candidate = contractsPkg_ . eContainer { if ( repositoryPkg__candidate !== null && repositoryPkg__candidate instanceof Package ) { var Package repositoryPkg_ = repositoryPkg__candidate as Package for ( datatypesPkg__candidate : repositoryPkg_ . packagedElements ) { if ( datatypesPkg__candidate !== null && datatypesPkg__candidate instanceof Package ) { var Package datatypesPkg_ = datatypesPkg__candidate as Package if ( "datatypes" === datatypesPkg_ . getName ( ) ) { repository_CreateMapping ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ ) return } } } } } } }
			if ( affectedEObject instanceof Package ) { var Package datatypesPkg_ = affectedEObject if ( "datatypes" === datatypesPkg_ . getName ( ) ) { var repositoryPkg__candidate = datatypesPkg_ . eContainer { if ( repositoryPkg__candidate !== null && repositoryPkg__candidate instanceof Package ) { var Package repositoryPkg_ = repositoryPkg__candidate as Package for ( contractsPkg__candidate : repositoryPkg_ . packagedElements ) { if ( contractsPkg__candidate !== null && contractsPkg__candidate instanceof Package ) { var Package contractsPkg_ = contractsPkg__candidate as Package if ( "contracts" === contractsPkg_ . getName ( ) ) { repository_CreateMapping ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ ) return } } } } } } }
		}
	}
}

routine repository_ElementDeletedCheck(ecore::EObject affectedEObject) {
	match {
		val repository_correspondingTo_repositoryPkg = retrieve optional repository::Repository corresponding to affectedEObject tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:repositoryPkg_with_Repository:repository"
		val repository_correspondingTo_contractsPkg = retrieve optional repository::Repository corresponding to affectedEObject tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:contractsPkg_with_Repository:repository"
		val repository_correspondingTo_datatypesPkg = retrieve optional repository::Repository corresponding to affectedEObject tagged with "umlXpcmRepository_map_UML_and_PCM_correspondence_Package:datatypesPkg_with_Repository:repository"
	}
	action {
		call {
			var Repository repository_
			if ( repository_correspondingTo_repositoryPkg . isPresent ( ) ) repository_ = repository_correspondingTo_repositoryPkg . get ( )
			if ( repository_correspondingTo_contractsPkg . isPresent ( ) ) repository_ = repository_correspondingTo_contractsPkg . get ( )
			if ( repository_correspondingTo_datatypesPkg . isPresent ( ) ) repository_ = repository_correspondingTo_datatypesPkg . get ( )
			if ( repository_ !== null ) repository_DeleteMapping ( repository_ )
		}
	}
}

routine repository_ElementUpdatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Package ) { var Package repositoryPkg_ = affectedEObject for ( datatypesPkg__candidate : repositoryPkg_ . packagedElements ) { if ( datatypesPkg__candidate !== null && datatypesPkg__candidate instanceof Package ) { var Package datatypesPkg_ = datatypesPkg__candidate as Package if ( "datatypes" === datatypesPkg_ . getName ( ) ) for ( contractsPkg__candidate : repositoryPkg_ . packagedElements ) { if ( contractsPkg__candidate !== null && contractsPkg__candidate instanceof Package ) { var Package contractsPkg_ = contractsPkg__candidate as Package if ( "contracts" === contractsPkg_ . getName ( ) ) { repository_CreateMapping ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ ) return } } } } } }
			if ( affectedEObject instanceof Package ) { var Package contractsPkg_ = affectedEObject if ( "contracts" === contractsPkg_ . getName ( ) ) { var repositoryPkg__candidate = contractsPkg_ . eContainer { if ( repositoryPkg__candidate !== null && repositoryPkg__candidate instanceof Package ) { var Package repositoryPkg_ = repositoryPkg__candidate as Package for ( datatypesPkg__candidate : repositoryPkg_ . packagedElements ) { if ( datatypesPkg__candidate !== null && datatypesPkg__candidate instanceof Package ) { var Package datatypesPkg_ = datatypesPkg__candidate as Package if ( "datatypes" === datatypesPkg_ . getName ( ) ) { repository_CreateMapping ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ ) return } } } } } } }
			if ( affectedEObject instanceof Package ) { var Package datatypesPkg_ = affectedEObject if ( "datatypes" === datatypesPkg_ . getName ( ) ) { var repositoryPkg__candidate = datatypesPkg_ . eContainer { if ( repositoryPkg__candidate !== null && repositoryPkg__candidate instanceof Package ) { var Package repositoryPkg_ = repositoryPkg__candidate as Package for ( contractsPkg__candidate : repositoryPkg_ . packagedElements ) { if ( contractsPkg__candidate !== null && contractsPkg__candidate instanceof Package ) { var Package contractsPkg_ = contractsPkg__candidate as Package if ( "contracts" === contractsPkg_ . getName ( ) ) { repository_CreateMapping ( repositoryPkg_ , contractsPkg_ , datatypesPkg_ ) return } } } } } } }
			repository_ElementDeletedCheck(affectedEObject)
		}
	}
}

routine onRepositoryNameReplacedAtPackage_nameBidirectionalRepair(uml::Package affectedEObject) {
	action {
		call repository_BidirectionalCheck(affectedEObject, "updateRepoName")
	}
}