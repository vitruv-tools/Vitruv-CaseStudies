import org.eclipse.emf.ecore.EObject
import org.eclipse.uml2.uml.Parameter
import org.palladiosimulator.pcm.repository.CollectionDataType
import org.palladiosimulator.pcm.repository.Repository
import tools.vitruv.applications.pcmumlclass.mapping.PcmUmlClassHelper
import tools.vitruv.applications.pcmumlclass.mapping.TagLiterals

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml 
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines handle type and multiplicity changes for an uml::Parameter corresponding to 
//	a pcm::Signature (return parameter) or a pcm::Parameter in an pcm::Signature (regular Parameter).
//
// 	For more details see PcmCollectionDataType.reactions.
//
//	Related files: 
//		PcmCollectionDataType.reactions
//		PcmSignature.reactions, PcmParameter.reactions
//		UmlRegularParameter.reactions
//		SignatureConceptTest, ParameterConceptTest

reactions: umlReturnAndRegularParameterTypeReactions
in reaction to changes in UML
execute actions in PCM

//in parameter mapping aufnehmen (falls nicht optional)

reaction RegularOrReturnParameterLowerChanged2 {
	after attribute replaced at uml::LiteralInteger[value]
	with affectedEObject.owner instanceof Parameter 
		&& affectedEObject.value == newValue
	call propagateTypeChange(affectedEObject.owner as Parameter)
}

reaction RegularOrReturnParameterUpperChanged2 {
	after attribute replaced at uml::LiteralUnlimitedNatural[value]
	with affectedEObject.owner instanceof Parameter 
		&& affectedEObject.value == newValue
	call propagateTypeChange(affectedEObject.owner as Parameter)
}

routine propagateTypeChange(uml::Parameter umlParameter) {
	match {
		val pcmSignature = retrieve optional pcm::OperationSignature corresponding to umlParameter tagged with TagLiterals.SIGNATURE__RETURN_PARAMETER
		val pcmParameter = retrieve optional pcm::Parameter corresponding to umlParameter tagged with TagLiterals.PARAMETER__REGULAR_PARAMETER
		
		val pcmOldCollectionType = retrieve optional pcm::CollectionDataType corresponding to umlParameter tagged with TagLiterals.COLLECTION_DATATYPE__PROPERTY
	}
	action {
		execute {
			if (pcmSignature.isPresent || pcmParameter.isPresent) { // limit context to synchronized uml::Parameters
				val EObject pcmStoredElement = if (pcmSignature.isPresent) pcmSignature.get else pcmParameter.get
				val pcmRepository = pcmStoredElement.eResource.allContents.filter(Repository).head
				val pcmDataType = PcmUmlClassHelper.getCorrespondingPcmDataType(correspondenceModel, umlParameter.type, umlParameter.lower, umlParameter.upper, pcmRepository, userInteractor)
				if (pcmSignature.isPresent) {pcmSignature.get.returnType__OperationSignature = pcmDataType}
				if (pcmParameter.isPresent) {pcmParameter.get.dataType__Parameter = pcmDataType}
				
				if(pcmOldCollectionType.isPresent  && pcmOldCollectionType.get !== pcmDataType) removeCorrespondenceForOldCollectionType_Parameter(umlParameter)
				if(pcmDataType instanceof CollectionDataType) addCorrespondenceForCollectionType_Parameter(umlParameter, pcmDataType)
			}
		}
	}
}

routine removeCorrespondenceForOldCollectionType_Parameter(uml::Parameter umlParameter) {
	match {
		val pcmCollectionType = retrieve pcm::CollectionDataType corresponding to umlParameter tagged with TagLiterals.COLLECTION_DATATYPE__PARAMETER
	}
	action {
		remove correspondence between pcmCollectionType and umlParameter tagged with TagLiterals.COLLECTION_DATATYPE__PARAMETER
	}
}

routine addCorrespondenceForCollectionType_Parameter(uml::Parameter umlParameter, pcm::CollectionDataType pcmCollectionType) {
	match {
		// one Parameter can only correspond to one CollectionDataType, but one CollectionDataType can correspond to many Parameters
		require absence of pcm::CollectionDataType corresponding to umlParameter tagged with TagLiterals.COLLECTION_DATATYPE__PARAMETER
	}
	action {
		add correspondence between pcmCollectionType and umlParameter tagged with TagLiterals.COLLECTION_DATATYPE__PARAMETER
	}
}

