import org.eclipse.uml2.uml.Class
import tools.vitruv.applications.pcmumlclass.TagLiterals

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::AssemblyContext in a pcm::ComposedProvidingRequiringEntity (CPRE)
//	with a uml::Property in an uml::Class (the implementation class to the CPRE).
//
// 	The correspondence is instantiated from this side, when the uml::Property[type] is set to a uml::Class
//	that corresponds to a pcm::InterfaceProvidingRequiringEntity (IPRE). 
//	The correspondence is deleted when the uml::Property[type] is set to any type that does not correspond 
//	to an IPRE, or when the property is moved to an uml::Class that does not correspond to CPRE.
//
//	Related files: 
//		PcmAssemblyContext.reactions
//		AssemblyContextConceptTest
reactions: umlAssemblyContextPropertyReactions
in reaction to changes in uml
execute actions in pcm

reaction AssemblyContextPropertyInserted {
	after element uml::Property inserted in uml::Class[ownedAttribute]
	with affectedEObject.ownedAttributes.contains(newValue)
	call insertCorrespondingAssemblyContext(newValue, affectedEObject)
}

routine insertCorrespondingAssemblyContext(uml::Property umlProperty, uml::Class umlComponent) {
	match {
		val pcmCompositeComponent = retrieve optional pcm::ComposedProvidingRequiringEntity corresponding to umlComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
		val pcmInnerComponent = retrieve optional pcm::RepositoryComponent corresponding to umlProperty.
			type tagged TagLiterals.IPRE__IMPLEMENTATION
	}
	update {
		if (pcmCompositeComponent.isPresent && (pcmInnerComponent.isPresent || umlProperty.type === null) // allow 'null' for uninitialized references
		) {
			detectOrCreateCorrespondingAssemblyContext(umlProperty, umlComponent)
			moveCorrespondingAssemblyContext(umlProperty, umlComponent)
		} else {
			// not a matching context -> delete correspondence, if it exists
			deleteCorrespondingAssemblyContext(umlProperty)
		}
	}
}

routine detectOrCreateCorrespondingAssemblyContext(uml::Property umlProperty, uml::Class umlComponent) {
	match {
		val pcmCompositeComponent = retrieve pcm::ComposedProvidingRequiringEntity corresponding to umlComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
		val pcmInnerComponent = retrieve pcm::RepositoryComponent corresponding to umlProperty.type tagged TagLiterals.
			IPRE__IMPLEMENTATION
		require absence of pcm::AssemblyContext corresponding to umlProperty tagged TagLiterals.
			ASSEMBLY_CONTEXT__PROPERTY
	}
	update {
		val pcmAssemblyContextCandidate = pcmCompositeComponent.assemblyContexts__ComposedStructure.findFirst [
			entityName == umlProperty.name
		]
		if (pcmAssemblyContextCandidate === null) {
			createCorrespondingAssemblyContext(umlProperty, umlComponent)
		} else {
			addCorrespondenceForExistingAssemblyContext(umlProperty, pcmAssemblyContextCandidate)
		}
	}
}

routine addCorrespondenceForExistingAssemblyContext(uml::Property umlProperty, pcm::AssemblyContext pcmAssemblyContext) {
	match {
		require absence of uml::Property corresponding to pcmAssemblyContext tagged TagLiterals.
			ASSEMBLY_CONTEXT__PROPERTY
		require absence of pcm::AssemblyContext corresponding to umlProperty tagged TagLiterals.
			ASSEMBLY_CONTEXT__PROPERTY
	}
	update {
		addCorrespondenceBetween(pcmAssemblyContext, umlProperty, TagLiterals.ASSEMBLY_CONTEXT__PROPERTY)
	}
}

routine createCorrespondingAssemblyContext(uml::Property umlProperty, uml::Class umlComponent) {
	match {
		val pcmCompositeComponent = retrieve pcm::ComposedProvidingRequiringEntity corresponding to umlComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
		val pcmInnerComponent = retrieve pcm::RepositoryComponent corresponding to umlProperty.type tagged TagLiterals.
			IPRE__IMPLEMENTATION
		require absence of pcm::AssemblyContext corresponding to umlProperty tagged TagLiterals.
			ASSEMBLY_CONTEXT__PROPERTY
	}
	create {
		val pcmAssemblyContext = new pcm::AssemblyContext
	}
	update {
		pcmAssemblyContext.encapsulatedComponent__AssemblyContext = pcmInnerComponent
		pcmCompositeComponent.assemblyContexts__ComposedStructure += pcmAssemblyContext
		addCorrespondenceBetween(pcmAssemblyContext, umlProperty, TagLiterals.ASSEMBLY_CONTEXT__PROPERTY)
		changeNameOfCorrespondingAssemblyContext(umlProperty, umlProperty.name)
	}
}

routine moveCorrespondingAssemblyContext(uml::Property umlProperty, uml::Class umlComponent) {
	match {
		val pcmCompositeComponent = retrieve pcm::ComposedProvidingRequiringEntity corresponding to umlComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
		val pcmAssemblyContext = retrieve pcm::AssemblyContext corresponding to umlProperty tagged TagLiterals.
			ASSEMBLY_CONTEXT__PROPERTY
	}
	update {
		pcmCompositeComponent.assemblyContexts__ComposedStructure += pcmAssemblyContext
	}
}

reaction AssemblyContextPropertyRemoved {
	after element uml::Property removed from uml::Class[ownedAttribute]
	with !affectedEObject.ownedAttributes.contains(oldValue) // validity check
	call removeCorrespondingAssemblyContext(oldValue, affectedEObject)
}

routine removeCorrespondingAssemblyContext(uml::Property umlProperty, uml::Class umlComponent) {
	match {
		val pcmCompositeComponent = retrieve pcm::ComposedProvidingRequiringEntity corresponding to umlComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
		val pcmAssemblyContext = retrieve pcm::AssemblyContext corresponding to umlProperty tagged TagLiterals.
			ASSEMBLY_CONTEXT__PROPERTY
	}
	update {
		pcmCompositeComponent.assemblyContexts__ComposedStructure -= pcmAssemblyContext
	}
}

reaction AssemblyContextPropertyDeleted {
	after element uml::Property deleted
	call deleteCorrespondingAssemblyContext(affectedEObject)
}

routine deleteCorrespondingAssemblyContext(uml::Property umlProperty) {
	match {
		val pcmAssemblyContext = retrieve pcm::AssemblyContext corresponding to umlProperty tagged TagLiterals.
			ASSEMBLY_CONTEXT__PROPERTY
	}
	update {
		removeCorrespondenceBetween(pcmAssemblyContext, umlProperty, TagLiterals.ASSEMBLY_CONTEXT__PROPERTY)
		removeObject(pcmAssemblyContext)
	}
}

reaction AssemblyContextPropertyNameChanged {
	after attribute replaced at uml::Property[name]
	with affectedEObject.name == newValue
	call changeNameOfCorrespondingAssemblyContext(affectedEObject, newValue)
}

routine changeNameOfCorrespondingAssemblyContext(uml::Property umlProperty, String newName) {
	match {
		val pcmAssemblyContext = retrieve pcm::AssemblyContext corresponding to umlProperty tagged TagLiterals.
			ASSEMBLY_CONTEXT__PROPERTY
	}
	update {
		pcmAssemblyContext.entityName = newName
	}
}

reaction AssemblyContextPropertyTypeChanged {
	after element uml::Class replaced at uml::Property[type]
	with affectedEObject.type === newValue
	call changeTypeOfCorrespondingAssemblyContext(affectedEObject, newValue)
}

routine changeTypeOfCorrespondingAssemblyContext(uml::Property umlProperty, uml::Class umlNewInnerComponent) {
	match {
		val pcmCompositeComponent = retrieve pcm::ComposedProvidingRequiringEntity corresponding to umlProperty.
			owner tagged TagLiterals.IPRE__IMPLEMENTATION
		val pcmAssemblyContext = retrieve optional pcm::AssemblyContext corresponding to umlProperty tagged TagLiterals.
			ASSEMBLY_CONTEXT__PROPERTY
		val pcmNewInnerComponent = retrieve optional pcm::RepositoryComponent corresponding to umlNewInnerComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
	}
	update {
		if (!pcmAssemblyContext.isPresent && pcmNewInnerComponent.isPresent) {
			createCorrespondingAssemblyContext(umlProperty, umlProperty.owner as Class)
		} else if (pcmAssemblyContext.isPresent && pcmNewInnerComponent.isPresent) {
			pcmAssemblyContext.get.encapsulatedComponent__AssemblyContext = pcmNewInnerComponent.get
		} else if (pcmAssemblyContext.isPresent && pcmNewInnerComponent === null) {
			// might be a transitional state -> keep correspondence, but synchronize 'null'
			pcmAssemblyContext.get.encapsulatedComponent__AssemblyContext = null
		} else {
			logger.warn("The type of a uml::Property in a pcm::AssemblyContext ~ uml::Property correspondence" +
				"has been set to a non-RepositoryComponent type. This is against convention and the corresponding AssemblyContext will be deleted.")
			deleteCorrespondingAssemblyContext(umlProperty)
		}
	}
}

