import org.eclipse.uml2.uml.UMLPackage
import tools.vitruv.applications.pcmumlclass.DefaultLiterals
import tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper
import tools.vitruv.applications.pcmumlclass.TagLiterals
import tools.vitruv.applications.util.temporary.uml.UmlTypeUtil
import tools.vitruv.applications.util.temporary.pcm.PcmDataTypeUtil
import org.palladiosimulator.pcm.repository.RepositoryPackage
import static tools.vitruv.applications.util.temporary.uml.UmlClassifierAndPackageUtil.findUmlPackage
import static extension tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper.isPackageFor
import static extension tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper.getCorrespondingPackageName

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

// The following reactions and routines synchronize a pcm::Repository with its corresponding uml::Packages
// (main package for components, contracts package for interfaces, and datatypes package)
// and bootstrap the pcm::PrimitiveDataType - uml::PrimitiveType correspondences for the externally defined primitive types
// on first creation of the repository.
//
// Related files:
// UmlRepositoryAndSystemPackage.reactions
// RepositoryConceptTest
reactions: pcmRepositoryReactions
in reaction to changes in pcm
execute actions in uml

import routines sharedRoutines // for UML model handling

reaction RepositoryCreated {
	after element pcm::Repository inserted as root
	call {
		addRepositoryCorrespondence(newValue)
		ensureUmlModelExists(newValue)
		createOrFindUmlRepositoryPackage(newValue)
		createUmlContractsPackage(newValue)
		createUmlDatatypesPackage(newValue)
		bootstrapPrimitiveDatatypes(newValue)
	}
}

routine addRepositoryCorrespondence(pcm::Repository pcmRepository) {
	update {
		addCorrespondenceBetween(pcmRepository, RepositoryPackage.Literals.REPOSITORY)
	}
}

routine createOrFindUmlRepositoryPackage(pcm::Repository pcmRepo) {
	match {
		val umlModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		require absence of uml::Package corresponding to pcmRepo tagged TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
	}
	update {
		var umlPackage = findUmlPackage(umlModel, pcmRepo.correspondingPackageName)
		if (umlPackage === null) {
			createUmlRepositoryPackage(pcmRepo)
		} else {
			addPackageCorrespondence(pcmRepo, umlPackage)
		}
	}
}

routine addPackageCorrespondence(pcm::Repository pcmRepo, uml::Package uPackage) {
	update {
		addCorrespondenceBetween(pcmRepo, uPackage, TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE)
	}
}

routine createUmlRepositoryPackage(pcm::Repository pcmRepo) {
	match {
		val umlModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
	}
	create {
		val umlRepositoryPkg = new uml::Package
	}
	update {
		umlRepositoryPkg.name = pcmRepo.correspondingPackageName;
		umlModel.nestedPackages += umlRepositoryPkg
		addCorrespondenceBetween(pcmRepo, umlRepositoryPkg, TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE)
	}
}

routine createUmlContractsPackage(pcm::Repository pcmRepo) {
	match {
		val umlRepositoryPkg = retrieve asserted uml::Package corresponding to pcmRepo tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
		require absence of uml::Package corresponding to pcmRepo tagged TagLiterals.REPOSITORY_TO_CONTRACTS_PACKAGE
	}
	update {
		// look for candidate before creating a new Package
		var umlContractsPkg = umlRepositoryPkg.nestedPackages.findFirst [ pkg |
			pkg.name == DefaultLiterals.CONTRACTS_PACKAGE_NAME
		]
		if (umlContractsPkg === null) {
			umlContractsPkg = umlRepositoryPkg.createNestedPackage(DefaultLiterals.CONTRACTS_PACKAGE_NAME)
		}
		addCorrespondenceBetween(pcmRepo, umlContractsPkg, TagLiterals.REPOSITORY_TO_CONTRACTS_PACKAGE)
	}
}

routine createUmlDatatypesPackage(pcm::Repository pcmRepo) {
	match {
		val umlRepositoryPkg = retrieve asserted uml::Package corresponding to pcmRepo tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
		require absence of uml::Package corresponding to pcmRepo tagged TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE
	}
	update {
		// look for candidate before creating a new Package
		var umlDatatypesPkg = umlRepositoryPkg.nestedPackages.findFirst [ pkg |
			pkg.name == DefaultLiterals.DATATYPES_PACKAGE_NAME
		]
		if (umlDatatypesPkg === null) {
			umlDatatypesPkg = umlRepositoryPkg.createNestedPackage(DefaultLiterals.DATATYPES_PACKAGE_NAME)
		}
		addCorrespondenceBetween(pcmRepo, umlDatatypesPkg, TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE)
	}
}

reaction RepositoryNameChanged {
	after attribute replaced at pcm::Repository[entityName]
	with affectedEObject.entityName == newValue
	call changeNameOfCorrespondingRepositoryPackage(affectedEObject)
}

routine changeNameOfCorrespondingRepositoryPackage(pcm::Repository pcmRepo) {
	match {
		val umlRepositoryPkg = retrieve asserted uml::Package corresponding to pcmRepo tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
	}
	update {
		if (!umlRepositoryPkg.isPackageFor(pcmRepo))
			umlRepositoryPkg.name = pcmRepo.correspondingPackageName
	}
}

reaction RepositoryDeleted {
	after element pcm::Repository deleted
	call deleteCorrespondingRepositoryPackages(affectedEObject)
}

routine deleteCorrespondingRepositoryPackages(pcm::Repository pcmRepo) {
	match {
		val umlModel = retrieve uml::Model corresponding to UMLPackage.Literals.MODEL
		val umlRepositoryPkg = retrieve optional uml::Package corresponding to pcmRepo tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
		val umlContractsPkg = retrieve optional uml::Package corresponding to pcmRepo tagged TagLiterals.
			REPOSITORY_TO_CONTRACTS_PACKAGE
		val umlDatatypesPkg = retrieve optional uml::Package corresponding to pcmRepo tagged TagLiterals.
			REPOSITORY_TO_DATATYPES_PACKAGE
	}
	update {
		// remove correspondences, UML model contents if desired
		umlRepositoryPkg.ifPresent [ umlRepositoryPackage |
			removeCorrespondenceBetween(pcmRepo, umlRepositoryPackage, TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE)
			// ask if the corresponding model should also be deleted
			val deleteCorrespondingUmlRepository = userInteractor.confirmationDialogBuilder.message(
				DefaultLiterals.INPUT_REQUEST_DELETE_CORRESPONDING_UML_MODEL).startInteraction

			if (deleteCorrespondingUmlRepository) { // DefaultLiterals.INPUT_REQUEST_DELETE_CORRESPONDING_UML_MODEL_YES
				umlContractsPkg.ifPresent[umlRepositoryPackage.packagedElements -= it]
				umlDatatypesPkg.ifPresent[umlRepositoryPackage.packagedElements -= it]
				umlModel.packagedElements -= umlRepositoryPackage // remove parent package last to allow the recorder to notice the child package deletion
			}
		]
		umlContractsPkg.ifPresent[removeCorrespondenceBetween(pcmRepo, it, TagLiterals.REPOSITORY_TO_CONTRACTS_PACKAGE)]
		umlDatatypesPkg.ifPresent[removeCorrespondenceBetween(pcmRepo, it, TagLiterals.REPOSITORY_TO_DATATYPES_PACKAGE)]
	}
}

//Primitive Datatypes are bootstraped in
routine bootstrapPrimitiveDatatypes(pcm::Repository pcmRepo) {
	match {
		val umlDatatypesPkg = retrieve asserted uml::Package corresponding to pcmRepo tagged TagLiterals.
			REPOSITORY_TO_DATATYPES_PACKAGE
	}
	update {
		val pcmPrimitiveTypes = PcmDataTypeUtil.getPcmPrimitiveTypes(pcmRepo)
		val umlPrimitiveTypes = UmlTypeUtil.getUmlPrimitiveTypes(pcmRepo.eResource.resourceSet)

		// store primary correspondces for prefered mapping between PCM and UML PrimitiveDatatypes
		for (pcmType : pcmPrimitiveTypes) {
			val umlType = PcmUmlClassHelper.mapPcmToUmlPrimitiveType(pcmType, umlPrimitiveTypes)
			if (umlType !== null) {
				addPrimitiveDatatypeCorrespondence(pcmType, umlType, TagLiterals.DATATYPE__TYPE)
			}
		}

		// store alternative correspondces for mapping between PCM and UML PrimitiveDatatypes in case non prefered UML datatypes are used
		for (umlType : umlPrimitiveTypes) {
			val pcmType = PcmUmlClassHelper.mapUmlToPcmPrimitiveType(umlType, pcmPrimitiveTypes)
			if (pcmType !== null) {
				addPrimitiveDatatypeCorrespondence(pcmType, umlType, TagLiterals.DATATYPE__TYPE__ALTERNATIVE)
			}
		}
	}
}

routine addPrimitiveDatatypeCorrespondence(pcm::PrimitiveDataType pcmPrimitiveType, uml::PrimitiveType umlPrimitiveType, String tag) {
	match {
		require absence of uml::PrimitiveType corresponding to pcmPrimitiveType tagged tag with it == umlPrimitiveType
		require absence of pcm::PrimitiveDataType corresponding to umlPrimitiveType tagged tag with it ==
			pcmPrimitiveType
	}
	update {
		addCorrespondenceBetween(pcmPrimitiveType, umlPrimitiveType, tag)
	}
}

