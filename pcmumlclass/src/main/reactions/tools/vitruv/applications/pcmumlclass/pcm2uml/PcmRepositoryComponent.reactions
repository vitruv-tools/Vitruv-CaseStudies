import org.eclipse.uml2.uml.Class
import tools.vitruv.applications.pcmumlclass.DefaultLiterals
import tools.vitruv.applications.pcmumlclass.TagLiterals
import static extension tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper.isPackageFor
import static extension tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper.getCorrespondingPackageName

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::RepositoryComponent 
//	with its corresponding uml::Package, uml::Class (implementation), and uml::Operation (constructor).
//
// 	The correspondence is instantiated from this side when the pcm::RepositoryComponent is inserted.
//	The correspondence is deleted when the pcm::RepositoryComponent is deleted.
//
//	Related files: 
//		UmlRepositoryComponentPackage.reactions
//		UmlIPREClassReactions.reactions
//		UmlIPREConstructorOperation.reactions
//		RepositoryComponentConceptTest
reactions: pcmRepositoryComponentReactions
in reaction to changes in pcm
execute actions in uml

reaction RepositoryComponentInserted {
	after element pcm::RepositoryComponent inserted in pcm::Repository[components__Repository]
	with affectedEObject.components__Repository.contains(newValue)
	call insertCorrespondingComponentPackage(newValue, affectedEObject)
}

routine insertCorrespondingComponentPackage(pcm::RepositoryComponent pcmComponent, pcm::Repository pcmRepository) {
	update {
		detectOrCreateCorrespondingComponentPackage(pcmComponent, pcmRepository)
		detectOrCreateCorrespondingComponentImplementation(pcmComponent)
		detectOrCreateCorrespondingComponentConstructor(pcmComponent)
		moveCorrespondingComponentPackage(pcmComponent, pcmRepository)
	}
}

routine detectOrCreateCorrespondingComponentPackage(pcm::RepositoryComponent pcmComponent, pcm::Repository pcmRepository) {
	match {
		val umlRepositoryPackage = retrieve uml::Package corresponding to pcmRepository tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
		val umlComponentPackage = retrieve optional uml::Package corresponding to pcmComponent tagged TagLiterals.
			REPOSITORY_COMPONENT__PACKAGE
	}
	update {
		if (!umlComponentPackage.isPresent) {
			val umlComponentPackageCandidate = umlRepositoryPackage.nestedPackages.findFirst[isPackageFor(pcmComponent)]
			if (umlComponentPackageCandidate !== null) {
				addCorrespondenceForExistingComponentPackage(pcmComponent, umlComponentPackageCandidate)
			} else {
				createCorrespondingComponentPackage(pcmComponent, pcmRepository)
			}
		}
	}
}

routine addCorrespondenceForExistingComponentPackage(pcm::RepositoryComponent pcmComponent, uml::Package umlComponentPackage) {
	match {
		require absence of uml::Package corresponding to pcmComponent tagged TagLiterals.REPOSITORY_COMPONENT__PACKAGE
		require absence of pcm::RepositoryComponent corresponding to umlComponentPackage tagged TagLiterals.
			REPOSITORY_COMPONENT__PACKAGE
	}
	update {
		addCorrespondenceBetween(pcmComponent, umlComponentPackage, TagLiterals.REPOSITORY_COMPONENT__PACKAGE)
	}
}

routine createCorrespondingComponentPackage(pcm::RepositoryComponent pcmComponent, pcm::Repository pcmRepository) {
	match {
		val umlRepositoryPackage = retrieve uml::Package corresponding to pcmRepository tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
		require absence of uml::Package corresponding to pcmComponent tagged TagLiterals.REPOSITORY_COMPONENT__PACKAGE
	}
	create {
		val umlComponentPackage = new uml::Package
	}
	update {
		umlComponentPackage.name = pcmComponent.correspondingPackageName
		umlRepositoryPackage.packagedElements += umlComponentPackage
		addCorrespondenceBetween(pcmComponent, umlComponentPackage, TagLiterals.REPOSITORY_COMPONENT__PACKAGE)
	}
}

routine detectOrCreateCorrespondingComponentImplementation(pcm::RepositoryComponent pcmComponent) {
	match {
		val umlComponentPackage = retrieve uml::Package corresponding to pcmComponent tagged TagLiterals.
			REPOSITORY_COMPONENT__PACKAGE
		val umlComponentImplementation = retrieve optional uml::Class corresponding to pcmComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
	}
	update {
		if (!umlComponentImplementation.isPresent) {
			val umlComponentImplementationCandidate = umlComponentPackage.packagedElements.filter(Class).findFirst [
				it.name == pcmComponent.entityName + DefaultLiterals.IMPLEMENTATION_SUFFIX
			]
			if (umlComponentImplementationCandidate !== null) {
				addCorrespondenceForExistingComponentImplementation(pcmComponent, umlComponentImplementationCandidate)
			} else {
				createCorrespondingComponentImplementation(pcmComponent)
			}
		}
	}
}

routine addCorrespondenceForExistingComponentImplementation(pcm::RepositoryComponent pcmComponent, uml::Class umlComponentImplementation) {
	match {
		require absence of uml::Class corresponding to pcmComponent tagged TagLiterals.IPRE__IMPLEMENTATION
		require absence of pcm::RepositoryComponent corresponding to umlComponentImplementation tagged TagLiterals.
			IPRE__IMPLEMENTATION
	}
	update {
		addCorrespondenceBetween(pcmComponent, umlComponentImplementation, TagLiterals.IPRE__IMPLEMENTATION)
	}
}

routine createCorrespondingComponentImplementation(pcm::RepositoryComponent pcmComponent) {
	match {
		val umlComponentPackage = retrieve uml::Package corresponding to pcmComponent tagged TagLiterals.
			REPOSITORY_COMPONENT__PACKAGE
		require absence of uml::Class corresponding to pcmComponent tagged TagLiterals.IPRE__IMPLEMENTATION
	}
	create {
		val umlComponentImplementation = new uml::Class
	}
	update {
		umlComponentImplementation.name = pcmComponent.entityName.toFirstUpper + DefaultLiterals.IMPLEMENTATION_SUFFIX
		umlComponentImplementation.isFinalSpecialization = true
		umlComponentPackage.packagedElements += umlComponentImplementation
		addCorrespondenceBetween(pcmComponent, umlComponentImplementation, TagLiterals.IPRE__IMPLEMENTATION)
	}
}

routine detectOrCreateCorrespondingComponentConstructor(pcm::RepositoryComponent pcmComponent) {
	match {
		val umlComponentImplementation = retrieve uml::Class corresponding to pcmComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
		val umlComponentConstructor = retrieve optional uml::Operation corresponding to pcmComponent tagged TagLiterals.
			IPRE__CONSTRUCTOR
	}
	update {
		if (!umlComponentConstructor.isPresent) {
			val umlComponentConstructorCandidate = umlComponentImplementation.ownedOperations.findFirst [
				it.name == pcmComponent.entityName.toFirstUpper + DefaultLiterals.IMPLEMENTATION_SUFFIX
			]
			if (umlComponentConstructorCandidate !== null) {
				addCorrespondenceForExistingComponentConstructor(pcmComponent, umlComponentConstructorCandidate)
			} else {
				createCorrespondingComponentConstructor(pcmComponent)
			}
		}
	}
}

routine addCorrespondenceForExistingComponentConstructor(pcm::RepositoryComponent pcmComponent, uml::Operation umlComponentConstructor) {
	match {
		require absence of uml::Operation corresponding to pcmComponent tagged TagLiterals.IPRE__CONSTRUCTOR
		require absence of pcm::RepositoryComponent corresponding to umlComponentConstructor tagged TagLiterals.
			IPRE__CONSTRUCTOR
	}
	update {
		addCorrespondenceBetween(pcmComponent, umlComponentConstructor, TagLiterals.IPRE__CONSTRUCTOR)
	}
}

routine createCorrespondingComponentConstructor(pcm::RepositoryComponent pcmComponent) {
	match {
		val umlComponentImplementation = retrieve uml::Class corresponding to pcmComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
		require absence of uml::Operation corresponding to pcmComponent tagged TagLiterals.IPRE__CONSTRUCTOR
	}
	create {
		val umlComponentConstructor = new uml::Operation
	}
	update {
		umlComponentConstructor.name = pcmComponent.entityName.toFirstUpper + DefaultLiterals.IMPLEMENTATION_SUFFIX
		umlComponentImplementation.ownedOperations += umlComponentConstructor
		addCorrespondenceBetween(pcmComponent, umlComponentConstructor, TagLiterals.IPRE__CONSTRUCTOR)
	}
}

routine moveCorrespondingComponentPackage(pcm::RepositoryComponent pcmComponent, pcm::Repository pcmRepository) {
	match {
		val umlRepositoryPackage = retrieve uml::Package corresponding to pcmRepository tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
		val umlComponentPackage = retrieve uml::Package corresponding to pcmComponent tagged TagLiterals.
			REPOSITORY_COMPONENT__PACKAGE
	}
	update {
		umlRepositoryPackage.packagedElements += umlComponentPackage
	}
}

reaction RepositoryComponentRemoved {
	after element pcm::RepositoryComponent removed from pcm::Repository[components__Repository]
	with !affectedEObject.components__Repository.contains(oldValue)
	call removeCorrespondingComponentPackage(oldValue, affectedEObject)
}

routine removeCorrespondingComponentPackage(pcm::RepositoryComponent pcmComponent, pcm::Repository pcmRepository) {
	match {
		val umlRepositoryPackage = retrieve uml::Package corresponding to pcmRepository tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
		val umlComponentPackage = retrieve uml::Package corresponding to pcmComponent tagged TagLiterals.
			REPOSITORY_COMPONENT__PACKAGE
	}
	update {
		umlRepositoryPackage.packagedElements -= umlComponentPackage
	}
}

reaction RepositoryComponentDeleted {
	after element pcm::RepositoryComponent deleted
	call deleteCorrespondingComponentPackage(affectedEObject)
}

routine deleteCorrespondingComponentPackage(pcm::RepositoryComponent pcmComponent) {
	match {
		val umlComponentPackage = retrieve uml::Package corresponding to pcmComponent tagged TagLiterals.
			REPOSITORY_COMPONENT__PACKAGE
		val umlComponentImplementation = retrieve uml::Class corresponding to pcmComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
		val umlComponentConstructor = retrieve uml::Operation corresponding to pcmComponent tagged TagLiterals.
			IPRE__CONSTRUCTOR
	}
	update {
		removeObject(umlComponentPackage)
		removeCorrespondenceBetween(pcmComponent, umlComponentPackage, TagLiterals.REPOSITORY_COMPONENT__PACKAGE)
		removeCorrespondenceBetween(pcmComponent, umlComponentImplementation, TagLiterals.IPRE__IMPLEMENTATION)
		removeCorrespondenceBetween(pcmComponent, umlComponentConstructor, TagLiterals.IPRE__CONSTRUCTOR)

	}
}

reaction RepositoryComponentNameChanged {
	after attribute replaced at pcm::RepositoryComponent[entityName]
	with affectedEObject.entityName == newValue
	call changeNameOfComponentCorrespondences(affectedEObject, newValue)
}

routine changeNameOfComponentCorrespondences(pcm::RepositoryComponent pcmComponent, String newName) {
	match {
		val umlComponentPackage = retrieve optional uml::Package corresponding to pcmComponent tagged TagLiterals.
			REPOSITORY_COMPONENT__PACKAGE
		val umlComponentImplementation = retrieve optional uml::Class corresponding to pcmComponent tagged TagLiterals.
			IPRE__IMPLEMENTATION
		val umlComponentConstructor = retrieve optional uml::Operation corresponding to pcmComponent tagged TagLiterals.
			IPRE__CONSTRUCTOR
	}
	update {
		if(umlComponentPackage.isPresent) umlComponentPackage.get.name = pcmComponent.correspondingPackageName
		if (umlComponentImplementation.isPresent)
			umlComponentImplementation.get.name = newName.toFirstUpper + DefaultLiterals.IMPLEMENTATION_SUFFIX
		if (umlComponentConstructor.isPresent)
			umlComponentConstructor.get.name = newName.toFirstUpper + DefaultLiterals.IMPLEMENTATION_SUFFIX
	}
}

