import edu.kit.ipd.sdq.commons.util.org.eclipse.emf.common.util.URIUtil
import tools.vitruv.applications.pcmumlclass.DefaultLiterals
import tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper
import tools.vitruv.applications.pcmumlclass.TagLiterals
import tools.vitruv.dsls.reactions.runtime.helper.PersistenceHelper
import tools.vitruv.change.interaction.UserInteractionOptions.WindowModality
import org.eclipse.uml2.uml.UMLPackage
import org.palladiosimulator.pcm.repository.RepositoryPackage
import org.palladiosimulator.pcm.system.SystemPackage
import org.eclipse.uml2.uml.Model
import java.util.ArrayList
import static extension tools.vitruv.applications.pcmumlclass.PcmUmlClassHelper.isPackageFor

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following reactions and routines synchronize a pcm::Repository
//	with its corresponding uml::Packages (main package for components, contracts package for interfaces, and datatypes package),
//	or a pcm::System with its corresponding uml::Package.
//
//	These reactions handle the correspondence for pcm::Repository and pcm::System correspondences,
//	because the corresponding uml::Packages have the same requirements for the context and therefore
//	the user needs to disambiguate what pcm root element should be created for a new uml::Package.
//
//	Related files:
//		PcmRepository.reactions, PcmSystem.reactions
//		RepositoryConceptTest, SystemConceptTest
reactions: umlRepositoryAndSystemPackageReactions
in reaction to changes in uml
execute actions in pcm

reaction UmlModelCreated {
	after element uml::Model inserted as root
	call ensureModelCorrespondenceExists(newValue)
}

routine ensureModelCorrespondenceExists(uml::Model newModel) {
	match {
		val alreadyCorrespondingModels = retrieve many uml::Model corresponding to UMLPackage.Literals.MODEL
		check !alreadyCorrespondingModels.contains(newModel)
	}
	update {
		addCorrespondenceBetween(UMLPackage.Literals.MODEL, newModel)
	}
}

reaction RepositoryOrSystemPackageInserted {
	after element uml::Package inserted in uml::Package[packagedElement]
	with {
		// Exclude elements of existing/external libraries
		var topmostPackage = newValue
		while (!(topmostPackage.eContainer instanceof Model)) {
			topmostPackage = topmostPackage.eContainer as org.eclipse.uml2.uml.Package
		}
		topmostPackage.name != "java" && topmostPackage.name != "jdk" && topmostPackage.name != "sun"
	}
	call insertCorrespondingRepositoryOrSystem(newValue, affectedEObject)
}

routine insertCorrespondingRepositoryOrSystem(uml::Package umlPackage, uml::Package umlParentPackage) {
	match {
		val pcmRepository = retrieve optional pcm::Repository corresponding to umlPackage tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
		val pcmSystem = retrieve optional pcm::System corresponding to umlPackage tagged TagLiterals.
			SYSTEM__SYSTEM_PACKAGE
	}
	update {
		if (!PcmUmlClassHelper.isContainedInRepositoryHierarchy(umlPackage, [ sourceElement, expectedType, tag |
			getCorrespondingElement(sourceElement, expectedType, null, tag, false)
		])) {
			if (!pcmRepository.isPresent && !pcmSystem.isPresent)
				userDisambiguateRepositoryOrSystemCreation(umlPackage, umlParentPackage)
		// no move-operation necessary since both repository and system are root elements
		} else {
			// nested component repositories and component based systems are not allowed
			deleteCorrespondingRepository(umlPackage)
			deleteCorrespondingSystem(umlPackage)
		}
	}
}

routine userDisambiguateRepositoryOrSystemCreation(uml::Package umlPkg, uml::Package umlParentPkg) {
	update {
		val pcmElementType = userInteractor.singleSelectionDialogBuilder.message(
			DefaultLiterals.USER_DISAMBIGUATE_REPOSITORY_SYSTEM__REQUEST).choices(
			DefaultLiterals.USER_DISAMBIGUATE_REPOSITORY_SYSTEM__OPTIONS).windowModality(WindowModality.MODAL).
			startInteraction
		switch (pcmElementType) {
			case DefaultLiterals.USER_DISAMBIGUATE_REPOSITORY_SYSTEM__REPOSITORY:
				createOrFindCorrespondingRepository(umlPkg, umlParentPkg)
			case DefaultLiterals.USER_DISAMBIGUATE_REPOSITORY_SYSTEM__SYSTEM:
				createOrFindCorrespondingSystem(umlPkg, umlParentPkg)
			default:
				return // do nothing
		}
	}
}

routine createOrFindCorrespondingRepository(uml::Package umlPkg, uml::Package umlParentPkg) {
	match {
		require absence of pcm::Repository corresponding to umlPkg tagged TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE
		val foundRepository = retrieve optional pcm::Repository corresponding to RepositoryPackage.Literals.
			REPOSITORY with umlPkg.isPackageFor(it)
	}
	update {
		if (foundRepository.isPresent) {
			ensureFirstCaseUpperCase(foundRepository.get, umlPkg)
			addRepositoryCorrespondence(foundRepository.get, umlPkg)
		} else {
			createCorrespondingRepository(umlPkg, umlParentPkg)
		}
	}
}

routine ensureFirstCaseUpperCase(pcm::NamedElement pcmElement, uml::Package umlPackage) {
	match {
		check pcmElement.entityName != umlPackage.name
	}
	update {
		pcmElement.entityName = umlPackage.name.toFirstUpper
	}
}

routine addRepositoryCorrespondence(pcm::Repository pcmRepository, uml::Package umlPkg) {
	update {
		addCorrespondenceBetween(pcmRepository, umlPkg, TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE)
	}
}

routine createCorrespondingRepository(uml::Package umlPkg, uml::Package umlParentPkg) {
	create {
		val pcmRepository = new pcm::Repository
	}
	update {
		pcmRepository.entityName = umlPkg.name?.toFirstUpper
		addCorrespondenceBetween(pcmRepository, umlPkg, TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE)
		addCorrespondenceBetween(pcmRepository, RepositoryPackage.Literals.REPOSITORY)
		val fileExtension = DefaultLiterals.PCM_REPOSITORY_EXTENSION

		var relativeModelPath = userInteractor.textInputDialogBuilder.message(
			DefaultLiterals.INPUT_REQUEST_NEW_MODEL_PATH).startInteraction
		if (relativeModelPath.nullOrEmpty) {
			relativeModelPath = DefaultLiterals.MODEL_DIRECTORY + "/" + DefaultLiterals.PCM_REPOSITORY_FILE_NAME;
		}

		// check if a model at the specified path already exists; if so, append a number
		// remove extension for now, so that it is easier to add a suffix if necessary
		if (relativeModelPath.endsWith(fileExtension)) {
			relativeModelPath.substring(0, relativeModelPath.length - fileExtension.length)
		}
		var uri = PersistenceHelper.getURIFromSourceProjectFolder(umlPkg, relativeModelPath + fileExtension)
		while (URIUtil.existsResourceAtUri(uri)) {
			uri = PersistenceHelper.getURIFromSourceProjectFolder(umlPkg, relativeModelPath + "-2" + fileExtension)
		}
		// append file extension now
		if (!relativeModelPath.endsWith(fileExtension)) {
			relativeModelPath += fileExtension
		}

		persistProjectRelative(umlPkg, pcmRepository, relativeModelPath);
	}
}

routine createOrFindCorrespondingSystem(uml::Package umlPkg, uml::Package umlParentPkg) {
	match {
		require absence of pcm::System corresponding to umlPkg tagged TagLiterals.SYSTEM__SYSTEM_PACKAGE
		val foundSystem = retrieve optional pcm::System corresponding to SystemPackage.Literals.SYSTEM with umlPkg.
			isPackageFor(it)
	}
	update {
		if (foundSystem.isPresent) {
			ensureFirstCaseUpperCase(foundSystem.get, umlPkg)
			addSystemCorrespondence(foundSystem.get, umlPkg)
		} else {
			createCorrespondingSystem(umlPkg, umlParentPkg)
		}
	}
}

routine addSystemCorrespondence(pcm::System pcmSystem, uml::Package umlPkg) {
	update {
		addCorrespondenceBetween(pcmSystem, umlPkg, TagLiterals.SYSTEM__SYSTEM_PACKAGE)
	}
}

routine createCorrespondingSystem(uml::Package umlPkg, uml::Package umlParentPkg) {
	create {
		val pcmSystem = new pcm::System
	}
	update {
		pcmSystem.entityName = umlPkg.name?.toFirstUpper
		addCorrespondenceBetween(pcmSystem, umlPkg, TagLiterals.SYSTEM__SYSTEM_PACKAGE)
		addCorrespondenceBetween(pcmSystem, SystemPackage.Literals.SYSTEM)
		val fileExtension = DefaultLiterals.PCM_SYSTEM_EXTENSION
		var relativeModelPath = userInteractor.textInputDialogBuilder.message(
			DefaultLiterals.INPUT_REQUEST_NEW_MODEL_PATH).startInteraction
		if (relativeModelPath.nullOrEmpty) {
			relativeModelPath = DefaultLiterals.MODEL_DIRECTORY + "/" + DefaultLiterals.PCM_SYSTEM_FILE_NAME;
		}

		// check if a model at the specified path already exists; if so, append a number
		// remove extension for now, so that it is easier to add a suffix if necessary
		if (relativeModelPath.endsWith(fileExtension)) {
			relativeModelPath.substring(0, relativeModelPath.length - fileExtension.length)
		}
		var uri = PersistenceHelper.getURIFromSourceProjectFolder(umlPkg, relativeModelPath + fileExtension)
		while (URIUtil.existsResourceAtUri(uri)) {
			uri = PersistenceHelper.getURIFromSourceProjectFolder(umlPkg, relativeModelPath + "-2" + fileExtension)
		}
		// append file extension now
		if (!relativeModelPath.endsWith(fileExtension)) {
			relativeModelPath += fileExtension
		}

		persistProjectRelative(umlPkg, pcmSystem, relativeModelPath);
	}
}

reaction UmlModelDeleted {
	after element uml::Model deleted
	call removedUmlModel(affectedEObject)
}

routine removedUmlModel(uml::Model removedModel) {
	update {
		val rootPackages = new ArrayList(removedModel.nestedPackages)
		rootPackages.forEach[deletePackage()]
		removeCorrespondenceBetween(UMLPackage.Literals.MODEL, removedModel)
	}
}

reaction RepositoryOrSystemPackageDeleted {
	after element uml::Package deleted
	call deletePackage(affectedEObject)
}

routine deletePackage(uml::Package umlPackage) {
	update {
		deleteCorrespondingRepository(umlPackage)
		deleteCorrespondingSystem(umlPackage)
	}
}

routine deleteCorrespondingRepository(uml::Package umlRepositoryPkg) {
	match {
		val pcmRepository = retrieve pcm::Repository corresponding to umlRepositoryPkg tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
	}
	update {
		removeCorrespondenceBetween(pcmRepository, umlRepositoryPkg, TagLiterals.REPOSITORY_TO_REPOSITORY_PACKAGE)
		removeObject(pcmRepository)
	}
}

routine deleteCorrespondingSystem(uml::Package umlSystemPkg) {
	match {
		val pcmSystem = retrieve pcm::System corresponding to umlSystemPkg tagged TagLiterals.SYSTEM__SYSTEM_PACKAGE
	}
	update {
		removeCorrespondenceBetween(pcmSystem, umlSystemPkg, TagLiterals.SYSTEM__SYSTEM_PACKAGE)
		removeObject(pcmSystem)
	}
}

reaction RepositoryOrSystemPackageRenamed {
	after attribute replaced at uml::Package[name]
	with affectedEObject.name == newValue
	call renameCorrespondingRepositoryOrSystem(affectedEObject, newValue)
}

routine renameCorrespondingRepositoryOrSystem(uml::Package umlPkg, String newName) {
	match {
		val pcmRepository = retrieve optional pcm::Repository corresponding to umlPkg tagged TagLiterals.
			REPOSITORY_TO_REPOSITORY_PACKAGE
		val pcmSystem = retrieve optional pcm::System corresponding to umlPkg tagged TagLiterals.SYSTEM__SYSTEM_PACKAGE
	}
	update {
		if (pcmRepository.isPresent)
			pcmRepository.get.entityName = newName?.toFirstUpper
		else if (pcmSystem.isPresent)
			pcmSystem.get.entityName = newName?.toFirstUpper
	}
}

