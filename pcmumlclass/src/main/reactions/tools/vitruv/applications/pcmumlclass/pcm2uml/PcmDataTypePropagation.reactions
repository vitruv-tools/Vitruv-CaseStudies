import org.eclipse.uml2.uml.LiteralUnlimitedNatural
import org.palladiosimulator.pcm.repository.CollectionDataType
import tools.vitruv.applications.pcmumlclass.TagLiterals
import tools.vitruv.change.interaction.UserInteractionOptions.NotificationType
import tools.vitruv.applications.util.temporary.pcm.PcmDataTypeUtil

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

//	The following routines define how a pcm::DataType change is propagated to the relevant uml::Parameter or uml::Property.
//
//	Since both Parameter and Property inherit from TypedElement and MultiplicityElement, but don't combine those traits in a common superclass, 
//	the routines expect two references to the same element but differently typed.
//
//	Related files: (used in)
//		PcmSignature.reactions,
//		PcmInnerDeclaration.reactions,
//		PcmParameter.reactions
reactions: pcmDataTypePropagationReactions
in reaction to changes in pcm
execute actions in uml

routine setUmlParameterType(pcm::DataType pcmType, uml::Parameter umlParameter) {
	update {
		setTypeOfUmlParameterOrProperty(pcmType, umlParameter, umlParameter, TagLiterals.COLLECTION_DATATYPE__PARAMETER)
	}
}

routine setUmlPropertyType(pcm::DataType pcmType, uml::Property umlProperty) {
	update {
		setTypeOfUmlParameterOrProperty(pcmType, umlProperty, umlProperty, TagLiterals.COLLECTION_DATATYPE__PROPERTY)
	}
}

// ******** general variants to reduce code duplication. If possible please use the facade routines above
routine setTypeOfUmlParameterOrProperty(pcm::DataType pcmType, uml::TypedElement umlElement, uml::MultiplicityElement umlMultiplicity, String tag) { // same element; Parameter or Property
	update {
		if (umlElement !== umlMultiplicity) {
			throw new IllegalStateException(
				"uml::TypedElement umlElement, uml::MultiplicityElement uMultiplicity" +
					"have to be the same element (uml::Parameter or uml::Property) for this routine to work, but they were not."
			)
		}

		if (pcmType !== null && pcmType instanceof CollectionDataType) {
			setTypeOfUmlParameterOrProperty_Collection(pcmType as CollectionDataType, umlElement, umlMultiplicity, tag)
		} else {
			setTypeOfUmlParameterOrProperty_NonCollection(pcmType, umlElement, umlMultiplicity, tag)
		}
	}
}

routine setTypeOfUmlParameterOrProperty_NonCollection(pcm::DataType pcmType, uml::TypedElement umlElement, uml::MultiplicityElement umlMultiplicity, String tag) { // same element; Parameter or Property
	match {
		val umlPrimitiveTypes = retrieve many uml::Type corresponding to pcmType tagged TagLiterals.DATATYPE__TYPE
		val umlCompositeType = retrieve optional uml::Type corresponding to pcmType tagged TagLiterals.
			COMPOSITE_DATATYPE__CLASS
	}
	update {
		if (!umlPrimitiveTypes.contains(umlElement.type)) {
			umlElement.type = umlPrimitiveTypes.head ?: umlCompositeType.orElse(null)	
		}
		umlMultiplicity.lower = 1
		umlMultiplicity.upper = 1
		removeOldCollectionDataTypeCorrespondence(umlElement, tag)
	}
}

routine setTypeOfUmlParameterOrProperty_Collection(pcm::CollectionDataType pcmType, uml::TypedElement umlElement, uml::MultiplicityElement umlMultiplicity, String tag) { // same element; Parameter or Property
	match {
		val umlPrimitiveType = retrieve many uml::Type corresponding to pcmType.
			innerType_CollectionDataType tagged TagLiterals.DATATYPE__TYPE
		val umlCompositeType = retrieve optional uml::Type corresponding to pcmType.
			innerType_CollectionDataType tagged TagLiterals.COMPOSITE_DATATYPE__CLASS
	}
	update {
		umlElement.type = umlPrimitiveType.head ?: umlCompositeType.orElse(null)
		umlMultiplicity.lower = 0
		umlMultiplicity.upper = LiteralUnlimitedNatural.UNLIMITED
		removeOldCollectionDataTypeCorrespondence(umlElement, tag)
		addCollectionDataTypeCorrespondence(pcmType, umlElement, tag)
	}
}

routine removeOldCollectionDataTypeCorrespondence(uml::TypedElement umlElement, String tag) { // Parameter or Property
	match {
		val oldCollectionType = retrieve pcm::CollectionDataType corresponding to umlElement tagged tag
	}
	update {
		removeCorrespondenceBetween(oldCollectionType, umlElement, tag)
	}
}

routine addCollectionDataTypeCorrespondence(pcm::CollectionDataType pcmType, uml::TypedElement umlElement, String tag) { // Parameter or Property
	match {
		require absence of pcm::CollectionDataType corresponding to umlElement tagged tag
	}
	update {
		addCorrespondenceBetween(pcmType, umlElement, tag)
	}
}

// UNSUPPORTED WARNING - unsupported/unmapped PrimitiveType has been set warning
reaction UnsupportedPrimitiveTypeSetAtInnerDeclaration {
	after element pcm::PrimitiveDataType replaced at pcm::InnerDeclaration[datatype_InnerDeclaration]
	with affectedEObject.datatype_InnerDeclaration === newValue &&
		!PcmDataTypeUtil.isSupportedPcmPrimitiveType(newValue)
	call unsupportedPrimitiveTypeSetWarning(newValue, affectedEObject)
}

reaction UnsupportedPrimitiveTypeSetAtParameter {
	after element pcm::PrimitiveDataType replaced at pcm::Parameter[dataType__Parameter]
	with affectedEObject.dataType__Parameter === newValue && !PcmDataTypeUtil.isSupportedPcmPrimitiveType(newValue)
	call unsupportedPrimitiveTypeSetWarning(newValue, affectedEObject)
}

reaction UnsupportedPrimitiveTypeSetAtSignature {
	after element pcm::PrimitiveDataType replaced at pcm::OperationSignature[returnType__OperationSignature]
	with affectedEObject.returnType__OperationSignature === newValue &&
		!PcmDataTypeUtil.isSupportedPcmPrimitiveType(newValue)
	call unsupportedPrimitiveTypeSetWarning(newValue, affectedEObject)
}

routine unsupportedPrimitiveTypeSetWarning(pcm::PrimitiveDataType primitive, EObject entity) {
	update {
		userInteractor.notificationDialogBuilder.message(
			"The pcm::PrimitiveDataType " + primitive + " set at the pcm element " + entity +
				" has no good match in the predefined set of uml::PrimitiveTypes " +
				" used by these transformations, is therefore not supported.").notificationType(
			NotificationType.WARNING).startInteraction
	}
}

