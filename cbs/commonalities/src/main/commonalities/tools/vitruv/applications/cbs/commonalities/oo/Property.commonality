import tools.vitruv.applications.cbs.commonalities.java.operators._
import tools.vitruv.applications.cbs.commonalities.uml.operators._

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

concept ObjectOrientedDesign

// Externally contained by ObjectOrientedDesign:Class.properties
referenced commonality Property {

	// Externally contained by uml:Class.ownedAttribute
	with uml:Property
	whereat {
		// TODO We only support single-valued properties currently.
		-> Property.lower = 1,
		-> Property.upper = 1
	}

	// Externally contained by java:Class.members
	with java:Field

	has name {
		= uml:Property.name

		= java:Field.name
	}

	has visibility {
		= umlVisibility(uml:Property.visibility)

		= javaVisibility(java:Field.annotationsAndModifiers, java:Field)
	}

	has ^static {
		= uml:Property.isStatic

		= javaStaticModifier(java:Field.annotationsAndModifiers, java:Field)
	}

	has final {
		= uml:Property.isReadOnly

		= javaFinalModifier(java:Field.annotationsAndModifiers, java:Field)
	}

	has type {
		= umlTypeReference(uml:Property.type, "ObjectOrientedDesign")

		= javaTypeReference(java:Field.typeReference, "ObjectOrientedDesign")
	}

	// TODO multiplicity, i.e. multi-valued vs single-valued
	// TODO mutli-valued collection type (list, set, ..): UML has modifiers for ordered, sequence, unique, etc.
	// TODO implicit getters and setters for UML properties? Also need to propagate type changes then
	// TODO default values
}
