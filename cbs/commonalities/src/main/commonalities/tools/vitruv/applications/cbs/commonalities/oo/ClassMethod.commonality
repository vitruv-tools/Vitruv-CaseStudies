import tools.vitruv.applications.cbs.commonalities.java.operators._
import tools.vitruv.applications.cbs.commonalities.uml.operators._

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.emftext.org/java" as java

concept ObjectOrientedDesign

// Externally contained by ObjectOrientedDesign:Class.methods
referenced commonality ClassMethod {

	// Externally contained by uml:Class.ownedOperation
	with uml:Operation

	// Externally contained by java:Class.members
	with java:ClassMethod

	has name {
		= uml:Operation.name

		= java:ClassMethod.name
	}

	has visibility {
		= umlVisibility(uml:Operation.visibility)

		= javaVisibility(java:ClassMethod.annotationsAndModifiers, java:ClassMethod)
	}

	has ^static {
		= uml:Operation.isStatic

		= javaStaticModifier(java:ClassMethod.annotationsAndModifiers, java:ClassMethod)
	}

	has final {
		= uml:Operation.isLeaf

		= javaFinalModifier(java:ClassMethod.annotationsAndModifiers, java:ClassMethod)
	}

	has abstract {
		= uml:Operation.isAbstract

		= javaAbstractModifier(java:ClassMethod.annotationsAndModifiers, java:ClassMethod)
	}

	has returnType {
		= umlReturnType(uml:Operation.ownedParameter, "ObjectOrientedDesign", uml:Operation)

		= javaTypeReference(java:ClassMethod.typeReference, "ObjectOrientedDesign")
	}

	has parameters referencing ObjectOrientedDesign:MethodParameter {
		// Note: The referenced participation only accepts input parameters.
		= uml:Operation.ownedParameter

		= java:ClassMethod.parameters
	}
}
